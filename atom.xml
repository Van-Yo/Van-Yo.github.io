<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>vanyo&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-09-18T07:00:10.981Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Little Bear</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈ES6 Promise 和 ES7 Async/await的使用</title>
    <link href="http://example.com/2020/09/18/hello-world/"/>
    <id>http://example.com/2020/09/18/hello-world/</id>
    <published>2020-09-18T02:24:24.884Z</published>
    <updated>2020-09-18T07:00:10.981Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知，Javascript是<code>单线程</code>的，所谓”单线程”，就是指一次只能完成一件任务。如果有<code>多个任务</code>，就<code>必须排队</code>，前面一个任务完成，再执行后面一个任务，以此类推。这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会<code>拖延整个程序的执行</code>。常见的浏览器无响应（假死），往往就是因为某一段Javascript代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。为了解决这个问题，Javascript语言将任务的<code>执行模式</code>分成两种：<code>同步</code>（Synchronous）和<code>异步</code>（Asynchronous）。当我们处理异步时，有三种常用的方法可以选择：异步回调，Promise和Async/await，接下来简述一下三者的使用区别和优缺点。</p><h2 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h2><p>回调是一个函数被作为一个<code>参数</code>传递到另一个函数里，在那个函数执行完后再执行，也就是B函数被作为参数传递到A函数里，在A函数执行完后再执行B，用代码表示就是如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function A(callback)&#123;</span><br><span class="line">　　callback();</span><br><span class="line">&#125;</span><br><span class="line">function B()&#123;&#125;</span><br><span class="line">A(B)</span><br></pre></td></tr></table></figure><blockquote><p>这也未免太简单了，是的，但现实往往就是简单的东西，项目中不会用到，太可怜了。而难的东西却一定是在简单东西基础上构建的。</p></blockquote><p>那回调和异步有关系吗？回调一定是<code>异步</code>的吗，看上面<code>A(B)</code>的例子就知道，明明还是<code>同步</code>，所以<code>回调并不一定就是异步，他俩并没有直接的关系</code>。<br>下面举一个真实的例子：<br>有三个函数，分别是task1，task2和task3，这三个都是同步任务，并且task2必须等到task1完成后才能执行，task3执行顺序不做要求，那么常规我们会写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function task1()&#123;</span><br><span class="line">    console.log(&#39;task1&#39;);</span><br><span class="line">&#125;</span><br><span class="line">function task2()&#123;</span><br><span class="line">    console.log(&#39;task2&#39;);</span><br><span class="line">&#125;</span><br><span class="line">function task3()&#123;</span><br><span class="line">    console.log(&#39;task3&#39;);</span><br><span class="line">&#125;</span><br><span class="line">function testAsync()&#123;</span><br><span class="line">    task1();</span><br><span class="line">    task2();</span><br><span class="line">    task3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testAsync();</span><br><span class="line">&#x2F;&#x2F; task1</span><br><span class="line">&#x2F;&#x2F; task2</span><br><span class="line">&#x2F;&#x2F; task3</span><br></pre></td></tr></table></figure><p>这样写并没有做<code>回调</code>，但效果已经达到了，task2确实在task1之后执行的。那接下来使用回调：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function task1(task)&#123;</span><br><span class="line">    console.log(&#39;task1&#39;);</span><br><span class="line">    task();</span><br><span class="line">&#125;</span><br><span class="line">function task2()&#123;</span><br><span class="line">    console.log(&#39;task2&#39;);</span><br><span class="line">&#125;</span><br><span class="line">function task3()&#123;</span><br><span class="line">    console.log(&#39;task3&#39;);</span><br><span class="line">&#125;</span><br><span class="line">function testAsync()&#123;</span><br><span class="line">    task1(task2);</span><br><span class="line">    task3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testAsync();</span><br><span class="line">&#x2F;&#x2F; task1</span><br><span class="line">&#x2F;&#x2F; task2</span><br><span class="line">&#x2F;&#x2F; task3</span><br></pre></td></tr></table></figure><p>输出结果一样，没有影响到task3的执行顺序，这就表明，该回调是<code>同步回调</code>。那什么是<code>异步回调</code>呢？</p><p>因为js是单线程的，但是有很多情况的执行步骤（ajax请求远程数据，IO等）是<code>非常耗时</code>的，如果一直单线程的<code>堵塞</code>下去会导致程序的等待时间过长页面失去响应，影响用户体验了。</p><p>如何去解决这个问题呢，我们可以这么想。<code>耗时</code>的我们都扔给<code>异步</code>去做，做好了再通知下我们做完了，我们拿到数据继续往下走。</p><p>接下来利用<code>setTimeout</code>来模拟一个异步回调，场景就是：task1是一个要耗时很长的一个请求，task2需要用到task1请求回来的数据，而task3却跟这两个任务没有任何关系，想达到的效果就是，task1执行完之后task2再执行，但是task3可以绕过task1和task2先执行。修改代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function task1(task)&#123;</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;task1&#39;);</span><br><span class="line">        task();</span><br><span class="line">    &#125;, 3000);</span><br><span class="line">&#125;</span><br><span class="line">function task2()&#123;</span><br><span class="line">    console.log(&#39;task2&#39;);</span><br><span class="line">&#125;</span><br><span class="line">function task3()&#123;</span><br><span class="line">    console.log(&#39;task3&#39;);</span><br><span class="line">&#125;</span><br><span class="line">function testAsync()&#123;</span><br><span class="line">    task1(task2);</span><br><span class="line">    task3();</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; task3 然后等待3秒</span><br><span class="line">&#x2F;&#x2F; task1</span><br><span class="line">&#x2F;&#x2F; task2</span><br></pre></td></tr></table></figure><p>上面的代码从上往下依次执行，由于task1里面<code>setTimeout是一个异步方法</code>，浏览器会<code>单开一个线程</code>去执行，所以<code>先会去执行下面的task3同步任务</code>，具体原理可参考<a href="http://blog.alanwu.site/2020/03/06/eventLoop/">JavaScript事件循环机制</a>。</p><blockquote><p>继续回到异步回调上来，在执行完任务执行时间超长的task1后，紧接着执行task2，那假如task2也是一个耗时很长的任务并且需要在其执行完之后拿到其执行完的结果呢，那是不是要往task2里面再加一个回调呢？那造成的结果可能就是传说中的<code>地狱回调</code>了，想想就害怕，所以<code>Promise</code>它带着解决方案来了！！！</p></blockquote><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>Promise的思想是， <code>每一个异步任务返回一个Promise对象</code>，该对象有一个then方法，允许指定回调函数。 Promises的出现大大改善了异步变成的困境，避免出现回调地狱，嵌套层级得到改善。他有如下API:</p><ul><li>Promise.resolve()</li><li>Promise.reject()</li><li>Promise.prototype.then()</li><li>Promise.prototype.catch()</li><li>Promise.all()  // 所有的完成</li><li>Promise.race() // 竞速，完成一个即可</li></ul><p>传送门阮一峰大神的<a href="http://es6.ruanyifeng.com/#docs/promise">ECMAScript 6入门</a></p><p>为了使代码简介，promise的rejected状态的相关reject()和catch()方法省略：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">task1()&#123;</span><br><span class="line">    return new Promise((resolve,reject)&#x3D;&gt;&#123;</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            console.log(&#39;task1执行了&#39;);</span><br><span class="line">            resolve(&#39;task1&#39;);</span><br><span class="line">        &#125;, 3000);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">task2(result)&#123;</span><br><span class="line">    return new Promise((resolve,reject)&#x3D;&gt;&#123;</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            console.log(&#39;task2执行了&#39;);</span><br><span class="line">            resolve(&#39;task2收到了task1的返回值了，他的值是&#39;+result);</span><br><span class="line">        &#125;, 3000);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">task3()&#123;</span><br><span class="line">    console.log(&#39;task3&#39;);</span><br><span class="line">&#125;,</span><br><span class="line">testAsync()&#123;</span><br><span class="line">    this.task1().then(res&#x3D;&gt;&#123;</span><br><span class="line">        return this.task2(res);</span><br><span class="line">    &#125;).then(res&#x3D;&gt;&#123;</span><br><span class="line">        console.log(res)</span><br><span class="line">    &#125;);</span><br><span class="line">    this.task3();</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; task3 等待3秒</span><br><span class="line">&#x2F;&#x2F; task1执行了 等待三秒</span><br><span class="line">&#x2F;&#x2F; task2执行了</span><br><span class="line">&#x2F;&#x2F; task2收到了task1的返回值了，他的值是task1</span><br></pre></td></tr></table></figure><blockquote><p>由此Promise对象还是很好用的，对于异步的流程的控制得到了大大改善，通过.then()的方法可进行链式调用。 可是 .then() .catch() 的使用也导致代码非常难看，嵌套也很深，所以async/await就出来了！！！</p></blockquote><h2 id="Async-await"><a href="#Async-await" class="headerlink" title="Async/await"></a>Async/await</h2><p>Async/await 是Javascript编写异步程序的新方法。以往的异步方法无外乎回调函数和Promise。但是Async/await建立于Promise之上。直接上代码吧！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">task1()&#123;</span><br><span class="line">    return new Promise((resolve,reject)&#x3D;&gt;&#123;</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            console.log(&#39;task1执行了&#39;);</span><br><span class="line">            resolve(&#39;task1&#39;);</span><br><span class="line">        &#125;, 3000);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">task2(result)&#123;</span><br><span class="line">    return new Promise((resolve,reject)&#x3D;&gt;&#123;</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            console.log(&#39;task2执行了&#39;);</span><br><span class="line">            resolve(&#39;task2收到了task1的返回值了，他的值是&#39;+result);</span><br><span class="line">        &#125;, 3000);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">task3()&#123;</span><br><span class="line">    console.log(&#39;task3&#39;);</span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F; 修改的地方</span><br><span class="line">async testAsync()&#123;</span><br><span class="line">    const res1 &#x3D; await this.task1();</span><br><span class="line">    const res2 &#x3D; await this.task2(res1);</span><br><span class="line">    console.log(res2);</span><br><span class="line">    this.task3();</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 等待三秒</span><br><span class="line">&#x2F;&#x2F; task1执行了 等待三秒</span><br><span class="line">&#x2F;&#x2F; task2执行了</span><br><span class="line">&#x2F;&#x2F; task2收到了task1的返回值了，他的值是task1</span><br><span class="line">&#x2F;&#x2F; task3</span><br></pre></td></tr></table></figure><p>上文中的<code>promise </code>实现方法是通过<code>then的链式调用</code>，但是采用<code>async</code>会更加简洁明了，但是结果发生变化了：<code>用同步的书写方式实现了异步的代码</code>。</p><blockquote><p>Async/await使得异步代码变的不再明显也是一点弊端咯，不过根据实际情况选择最合适的异步编程才是最好的选择。<code>async 是 Generator 函数的语法糖</code>。所以想更深入的理解其中内部原理的赶紧去看看 Generator 函数吧。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Async/await是近些年来JavaScript最具革命性的新特性之一。他让读者意识到使用Promise存在的一些问题，并提供了自身来代替Promise的方案。<br>当然，对这个新特性也有一定的担心，体现在：<br>他使得异步代码变的不再明显，我们好不容易已经学会并习惯了使用回调函数或者.then来处理异步，新的特性当然需要时间成本去学习和体会。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;众所周知，Javascript是&lt;code&gt;单线程&lt;/code&gt;的，所谓”单线程”，就是指一次只能完成一件任务。如果有&lt;code&gt;多个任务&lt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
