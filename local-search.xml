<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vue不太会用的小知识</title>
    <link href="/2021/12/03/unknow-vue-usage/"/>
    <url>/2021/12/03/unknow-vue-usage/</url>
    
    <content type="html"><![CDATA[<h3 id="sync修饰符"><a href="#sync修饰符" class="headerlink" title=".sync修饰符"></a>.sync修饰符</h3><div class="note note-info">            <p>父子组件传值，用的最多最熟的就是 <code>props</code> 和 <code>$emit</code> 了，并且子组件不能直接修改父组件传过来的值。假如需要在子组件中直接修改父组件的值，改完之后也不需要 <code>$emit</code> 也能传递给父组件，需要怎么写呢？</p>          </div><p><img src="sync.gif"></p><p>父组件 <code>:state.sync=&quot;state&quot;</code> :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container-area&quot;</span>&gt;<br>    &lt;ChangeState :state.sync=<span class="hljs-string">&quot;state&quot;</span> /&gt;<br>    &lt;div&gt;父组件：&#123;&#123; state &#125;&#125;&lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-comment">// 子组件</span><br><span class="hljs-keyword">import</span> ChangeState <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/ChangeState.vue&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  components: &#123; ChangeState &#125;,<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      state: <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>子组件 <code>this.$emit(&#39;update:state&#39;, !this.state)</code> ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;change-state&quot;</span>&gt;<br>    子组件：&#123;&#123; state &#125;&#125;<br>    &lt;el-button @click=<span class="hljs-string">&quot;change&quot;</span>&gt;切换&lt;/el-button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;ChangeState&#x27;</span>,<br>  props: &#123;<br>    state: &#123;<br>      type: <span class="hljs-built_in">Boolean</span>,<br>      <span class="hljs-keyword">default</span>: <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    <span class="hljs-function"><span class="hljs-title">change</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;update:state&#x27;</span>, !<span class="hljs-built_in">this</span>.state)<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="重置data的数据为初始状态"><a href="#重置data的数据为初始状态" class="headerlink" title="重置data的数据为初始状态"></a>重置data的数据为初始状态</h3><div class="note note-info">            <p>Vue中重置data的数据为初始状态，用的最多最笨的方法就是一个一个去重新赋值，那有没有什么便捷高效的方法呢？试试<code>Object.assign(this.$data, this.$options.data())</code>吧</p>          </div><p>栗子：通过 <code>change()</code> 方法修改 <code>data</code> 中的值，再通过 <code>reset()</code> 方法重置 <code>data</code> 的数据为初始状态<br><img src="rset.gif"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container-area&quot;</span>&gt;<br>    &lt;div&gt;姓名:&#123;&#123; name &#125;&#125;&lt;/div&gt;<br>    &lt;div&gt;年龄:&#123;&#123; age &#125;&#125;&lt;/div&gt;<br>    &lt;div&gt;等级:&#123;&#123; level &#125;&#125;&lt;/div&gt;<br>    &lt;div&gt;<br>      &lt;el-button @click=<span class="hljs-string">&quot;change&quot;</span>&gt;改变&lt;/el-button&gt;<br>      &lt;el-button @click=<span class="hljs-string">&quot;reset&quot;</span>&gt;重置&lt;/el-button&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      name: <span class="hljs-string">&#x27;11LuckyBOY&#x27;</span>,<br>      age: <span class="hljs-number">13</span>,<br>      level: <span class="hljs-number">1</span><br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    <span class="hljs-function"><span class="hljs-title">change</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;revan&#x27;</span><br>      <span class="hljs-built_in">this</span>.age = <span class="hljs-number">18</span><br>      <span class="hljs-built_in">this</span>.level = <span class="hljs-number">5</span><br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">reset</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-comment">// alert(JSON.stringify(this.$data))</span><br>      <span class="hljs-comment">// alert(JSON.stringify(this.$options.data()))</span><br>      <span class="hljs-built_in">Object</span>.assign(<span class="hljs-built_in">this</span>.$data, <span class="hljs-built_in">this</span>.$options.data())<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><code>this.$data</code> 获取当前状态下的 <code>data</code><br><code>this.$options.data()</code> 获取该组件初始状态下的 <code>data</code><br>所以，下面就可以将初始状态的data复制到当前状态的 <code>data</code> ，实现重置效果：<code>Object.assign(this.$data, this.$options.data())</code><br>当然，如果你只想重置 <code>data</code> 中的某一个对象或者属性：<code>this.form = this.$options.data().form</code></p><h3 id="watch监听对象中的某个属性值"><a href="#watch监听对象中的某个属性值" class="headerlink" title="watch监听对象中的某个属性值"></a>watch监听对象中的某个属性值</h3><p>监听对象<code>dialog</code>中属性值<code>visible</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">watch: &#123;<br>  <span class="hljs-string">&#x27;dialog.visible&#x27;</span>(val) &#123;<br>    <span class="hljs-comment">// 业务逻辑</span><br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新增 SSH 密钥到 GitHub 帐户</title>
    <link href="/2021/12/02/new-journey/"/>
    <url>/2021/12/02/new-journey/</url>
    
    <content type="html"><![CDATA[<h2 id="配置SSH通道访问Github"><a href="#配置SSH通道访问Github" class="headerlink" title="配置SSH通道访问Github"></a>配置SSH通道访问Github</h2><h3 id="检测本机本地机是否含有ssh设置"><a href="#检测本机本地机是否含有ssh设置" class="headerlink" title="检测本机本地机是否含有ssh设置"></a>检测本机本地机是否含有ssh设置</h3><ol><li>在 <code>Git Bush</code> 中输入指令 <code>ls -al ~/.ssh</code> 可以将本地磁盘 <code>C:\Users\Administrator\.ssh</code> 文件夹中的文件都列出来，其中 <code>id_rsa</code> 表示密钥， <code>id_rsa.pub</code> 表示公钥。<br><img src="ssh.jpg"><br><img src="ssh1.jpg"></li><li>如果没有 <code>C:\Users\Administrator\.ssh</code> 的文件夹表示之前没添加过密钥，手动新建 <code>C:\Users\Administrator\.ssh</code> 文件夹。</li></ol><h3 id="使用git-base生成心的ssh-key"><a href="#使用git-base生成心的ssh-key" class="headerlink" title="使用git base生成心的ssh key"></a>使用git base生成心的ssh key</h3><p>指令输入 <code>ssh-keygen -t rsa -C &quot;xxxxxx@xxx.com&quot;</code> (填写自己有效的邮箱)，根据提示输入，也可简单三下回车键，生成上一步需要的密钥和公钥文件</p><h3 id="添加ssh-key到GitHub"><a href="#添加ssh-key到GitHub" class="headerlink" title="添加ssh key到GitHub"></a>添加ssh key到GitHub</h3><ol><li>登录 <code>GitHub</code> 系统；点击右上角账号头像的“▼”→Settings→SSH and GPG keys→New SSH key<br><img src="github.jpg"></li><li> <code>Title</code> 随便填， <code>Key</code> 复制生成的 <code>id_rsa.pub</code> 的公钥内容粘贴进去即可<br><img src="add.jpg"></li><li>这样推拉远程仓库就不需要通过账号密码了，但是在 <code>SourceTree</code> 中在 <code>push</code> 时却显示密钥认证失败，转下面的解决方案。</li></ol><h2 id="SourceTree-push-报错SSH密钥认证失败"><a href="#SourceTree-push-报错SSH密钥认证失败" class="headerlink" title="SourceTree push 报错SSH密钥认证失败"></a>SourceTree push 报错SSH密钥认证失败</h2><ol><li>【工具】-【选项】-【一般】</li><li>因为 <code>sourceTree</code> 默认SSH客户端配置的SSH客户端 是 <code>PuTTY/Plink</code>,把它选择为 <code>OpenSSH SSH</code> 密钥自动会适配到当前 <code>id_rsa</code> 文件，点击确定。<br><img src="sourceTree.jpg"></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>SourceTree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端项目工程环境规范化</title>
    <link href="/2021/05/12/project-engineering-configuration/"/>
    <url>/2021/05/12/project-engineering-configuration/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p><code>Vue3</code> 跟 <code>Vite</code> 正式版发布有很长一段时间了，生态圈也渐渐丰富起来，作者已在多个项目中使用，总结一下：就是快！也不用担心稳定性问题，开发体验真不是一般好！还没尝试的同学可以从本文开始学习，从 0 开始手把手带你搭建一套规范的 <code>Vite</code> + <code>Vue3</code> + <code>TypeScript</code> 前端工程化项目环境。</p>          </div><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>本文将从一下方面展开：</p><ul><li>架构搭建</li><li>代码规范</li><li>提交规范</li><li>自动部署</li></ul><h2 id="架构搭建"><a href="#架构搭建" class="headerlink" title="架构搭建"></a>架构搭建</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>请确保你的电脑上成功安装 <code>Node.js</code>，本项目使用 <code>Vite</code> 构建工具，需要 <code>Node.js</code> 版本 <code>&gt;= 12.0.0</code>。</p><p>查看 <code>Node.js</code> 版本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">node -v   <span class="hljs-comment">// v14.16.1</span><br></code></pre></td></tr></table></figure><p>建议将 <code>Node.js</code> 升级到最新的稳定版本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用 nvm 安装最新稳定版 Node.js</span><br>nvm install stable<br></code></pre></td></tr></table></figure><p><code>npm</code> 换源（使用淘宝镜像）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 持久使用</span><br>npm config set registry https:<span class="hljs-comment">//registry.npm.taobao.org</span><br><br><span class="hljs-comment">// 查看npm源地址</span><br>npm config get registry   <span class="hljs-comment">// https://registry.npm.taobao.org/</span><br></code></pre></td></tr></table></figure><h3 id="使用-Vite-快速初始化项目雏形"><a href="#使用-Vite-快速初始化项目雏形" class="headerlink" title="使用 Vite 快速初始化项目雏形"></a>使用 Vite 快速初始化项目雏形</h3><p>使用 <code>NPM</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm init @vitejs/app<br></code></pre></td></tr></table></figure><p>然后按照终端提示完成以下操作：</p><ol><li>输入项目名称: <code>vite-vue3-tester</code></li><li>选择框架：<code>vue</code></li><li>选择语言类型：<code>Typescript</code></li><li>进入项目：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">cd vite-vue3-tester<br></code></pre></td></tr></table></figure><ol start="5"><li>安装依赖:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install<br></code></pre></td></tr></table></figure><ol start="6"><li>启动项目:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm run dev<br></code></pre></td></tr></table></figure><p>项目成功运行表示 <code>Vite + Vue3 + TypeScript</code> 简单的项目骨架搭建完毕，下面我们来为这个项目集成 <code>Vue Router</code>、<code>Vuex</code>、<code>Element Plus</code>、<code>Axios</code>、<code>Stylus/Sass/Less</code>。</p><h3 id="修改-Vite-配置文件"><a href="#修改-Vite-配置文件" class="headerlink" title="修改 Vite 配置文件"></a>修改 Vite 配置文件</h3><p><code>Vite</code> 配置文件 <code>vite.config.ts</code> 位于根目录下，项目启动时会自动读取。</p><p>本项目先做一些简单配置，例如：设置 <code>@</code> 指向 <code>src</code> 目录、 服务启动端口、打包路径、代理等。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-vue&#x27;</span><br><span class="hljs-comment">// 如果编辑器提示 path 模块找不到，则可以安装一下 @types/node -&gt; npm i @types/node -D</span><br><span class="hljs-keyword">import</span> &#123; resolve &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span><br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineConfig(&#123;<br>  plugins: [vue()],<br>  resolve: &#123;<br>    alias: &#123;<br>      <span class="hljs-string">&#x27;@&#x27;</span>: resolve(__dirname, <span class="hljs-string">&#x27;src&#x27;</span>) <span class="hljs-comment">// 设置 `@` 指向 `src` 目录</span><br>    &#125;<br>  &#125;,<br>  base: <span class="hljs-string">&#x27;./&#x27;</span>, <span class="hljs-comment">// 设置打包路径</span><br>  server: &#123;<br>    port: <span class="hljs-number">4000</span>, <span class="hljs-comment">// 设置服务启动端口号</span><br>    open: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 设置服务启动时是否自动打开浏览器</span><br>    cors: <span class="hljs-literal">true</span> <span class="hljs-comment">// 允许跨域</span><br><br>    <span class="hljs-comment">// 设置代理，根据我们项目实际情况配置</span><br>    <span class="hljs-comment">// proxy: &#123;</span><br>    <span class="hljs-comment">//   &#x27;/api&#x27;: &#123;</span><br>    <span class="hljs-comment">//     target: &#x27;http://xxx.xxx.xxx.xxx:8000&#x27;,</span><br>    <span class="hljs-comment">//     changeOrigin: true,</span><br>    <span class="hljs-comment">//     secure: false,</span><br>    <span class="hljs-comment">//     rewrite: (path) =&gt; path.replace(&#x27;/api/&#x27;, &#x27;/&#x27;)</span><br>    <span class="hljs-comment">//   &#125;</span><br>    <span class="hljs-comment">// &#125;</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>如果编辑器提示 <code>path</code> 模块找不到，则可以安装一下 <code>@types/node</code> -&gt; <code>npm i @types/node -D</code></p><h3 id="规范目录结构"><a href="#规范目录结构" class="headerlink" title="规范目录结构"></a>规范目录结构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">├── publish/<br>└── src/<br>    ├── assets/                    <span class="hljs-comment">// 静态资源目录</span><br>    ├── common/                    <span class="hljs-comment">// 通用类库目录</span><br>    ├── components/                <span class="hljs-comment">// 公共组件目录</span><br>    ├── router/                    <span class="hljs-comment">// 路由配置目录</span><br>    ├── store/                     <span class="hljs-comment">// 状态管理目录</span><br>    ├── style/                     <span class="hljs-comment">// 通用 CSS 目录</span><br>    ├── utils/                     <span class="hljs-comment">// 工具函数目录</span><br>    ├── views/                     <span class="hljs-comment">// 页面组件目录</span><br>    ├── App.vue<br>    ├── main.ts<br>    ├── shims-vue.d.ts<br>├── tests/                         <span class="hljs-comment">// 单元测试目录</span><br>├── index.html<br>├── tsconfig.json                  <span class="hljs-comment">// TypeScript 配置文件</span><br>├── vite.config.ts                 <span class="hljs-comment">// Vite 配置文件</span><br>└── package.json<br></code></pre></td></tr></table></figure><h3 id="集成路由工具-Vue-Router"><a href="#集成路由工具-Vue-Router" class="headerlink" title="集成路由工具 Vue Router"></a>集成路由工具 Vue Router</h3><ol><li>安装支持 Vue3 的路由工具 vue-router@4</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i vue-router@<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><ol start="2"><li>创建 <code>src/router/index.ts</code> 文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;<br>  createRouter,<br>  createWebHashHistory,<br>  RouteRecordRaw<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/home.vue&#x27;</span><br><span class="hljs-keyword">import</span> Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/vuex.vue&#x27;</span><br><br><span class="hljs-keyword">const</span> routes: <span class="hljs-built_in">Array</span>&lt;RouteRecordRaw&gt; = [<br>  &#123;<br>    path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;Home&#x27;</span>,<br>    component: Home<br>  &#125;,<br>  &#123;<br>    path: <span class="hljs-string">&#x27;/vuex&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;Vuex&#x27;</span>,<br>    component: Vuex<br>  &#125;,<br>  &#123;<br>    path: <span class="hljs-string">&#x27;/axios&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;Axios&#x27;</span>,<br>    component: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/axios.vue&#x27;</span>) <span class="hljs-comment">// 懒加载组件</span><br>  &#125;<br>]<br><br><span class="hljs-keyword">const</span> router = createRouter(&#123;<br>  history: createWebHashHistory(),<br>  routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><p>根据本项目路由配置的实际情况，你需要在 <code>src</code> 下创建 <code>views</code> 目录，用来存储页面组件。</p><p>我们在 <code>views</code> 目录下创建 <code>home.vue</code> 、<code>vuex.vue</code> 、<code>axios.vue</code>。</p><p>例如，<code>src/views/home.vue</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  &lt;div&gt;home&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=<span class="hljs-string">&quot;ts&quot;</span>&gt;<br><span class="hljs-keyword">import</span> &#123; defineComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineComponent(&#123;<br>  name: <span class="hljs-string">&#x27;Home&#x27;</span><br>&#125;)<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>#app &#123;<br>  font-family: Avenir, Helvetica, Arial, sans-serif;<br>  -webkit-font-smoothing: antialiased;<br>  -moz-osx-font-smoothing: grayscale;<br>  text-align: center;<br>  color: #2c3e50;<br>  margin-top: 60px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li>在 <code>main.ts</code> 文件中挂载路由配置</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router/index&#x27;</span><br><br>createApp(App).use(router).mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><ol start="4"><li>修改<code>src/App.vue</code> =&gt; <code>router-view</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  &lt;router-view&gt;&lt;/router-view&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=<span class="hljs-string">&quot;ts&quot;</span>&gt;<br><span class="hljs-keyword">import</span> &#123; defineComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineComponent(&#123;<br>  name: <span class="hljs-string">&#x27;App&#x27;</span><br>&#125;)<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>#app &#123;<br>  font-family: Avenir, Helvetica, Arial, sans-serif;<br>  -webkit-font-smoothing: antialiased;<br>  -moz-osx-font-smoothing: grayscale;<br>  text-align: center;<br>  color: #2c3e50;<br>  margin-top: 60px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>这样，<code>路由</code> 就配置好了。</p><h3 id="集成状态管理工具-Vuex"><a href="#集成状态管理工具-Vuex" class="headerlink" title="集成状态管理工具 Vuex"></a>集成状态管理工具 Vuex</h3><ol><li>安装支持 <code>Vue3</code> 的状态管理工具 <code>vuex@next</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i vuex@next<br></code></pre></td></tr></table></figure><ol start="2"><li>创建 <code>src/store/index.ts</code> 文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-keyword">const</span> defaultState = &#123;<br>  count: <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-comment">// Create a new store instance.</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> createStore(&#123;<br>  <span class="hljs-function"><span class="hljs-title">state</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> defaultState<br>  &#125;,<br>  mutations: &#123;<br>    <span class="hljs-function"><span class="hljs-title">increment</span>(<span class="hljs-params">state: <span class="hljs-keyword">typeof</span> defaultState</span>)</span> &#123;<br>      state.count++<br>    &#125;<br>  &#125;,<br>  actions: &#123;<br>    <span class="hljs-function"><span class="hljs-title">increment</span>(<span class="hljs-params">context</span>)</span> &#123;<br>      context.commit(<span class="hljs-string">&#x27;increment&#x27;</span>)<br>    &#125;<br>  &#125;,<br>  getters: &#123;<br>    <span class="hljs-function"><span class="hljs-title">double</span>(<span class="hljs-params">state: <span class="hljs-keyword">typeof</span> defaultState</span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * state.count<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="3"><li>在 <code>main.ts</code> 文件中挂载 <code>Vuex</code> 配置</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router/index&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/index&#x27;</span><br><br>createApp(App).use(router).use(store).mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><ol start="4"><li>测试，在<code>src/views/home.vue</code>中加上：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$store.commit(&#x27;increment&#x27;)&quot;</span>&gt;</span>&#123;&#123;$store.state.count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="集成-UI-框架-Element-Plus"><a href="#集成-UI-框架-Element-Plus" class="headerlink" title="集成 UI 框架 Element Plus"></a>集成 UI 框架 Element Plus</h3><ol><li>安装支持 <code>Vue3</code> 的 <code>UI</code> 框架 <code>Element Plus</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i element-plus<br></code></pre></td></tr></table></figure><ol start="2"><li>在 <code>main.ts</code> 文件中挂载 <code>Element Plus</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router/index&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/index&#x27;</span><br><span class="hljs-keyword">import</span> ElementPlus <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-plus/lib/theme-chalk/index.css&#x27;</span><br><br>createApp(App).use(router).use(store).use(ElementPlus).mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><ol start="3"><li>测试，在<code>src/views/home.vue</code>中改成：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$store.commit(&#x27;increment&#x27;)&quot;</span>&gt;</span>&#123;&#123;$store.state.count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="集成-HTTP-工具-Axios"><a href="#集成-HTTP-工具-Axios" class="headerlink" title="集成 HTTP 工具 Axios"></a>集成 HTTP 工具 Axios</h3><ol><li>安装 <code>Axios</code>（<code>Axios</code> 跟 <code>Vue</code> 版本没有直接关系，安装最新即可）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i axios<br></code></pre></td></tr></table></figure><ol start="2"><li>配置 <code>Axios</code>，新建文件<code>src/utils/axios.ts</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> &#123; ElMessage &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-plus&#x27;</span><br><br><span class="hljs-keyword">const</span> baseURL = <span class="hljs-string">&#x27;https://api.github.com&#x27;</span><br><br><span class="hljs-keyword">const</span> axios = Axios.create(&#123;<br>  baseURL,<br>  timeout: <span class="hljs-number">20000</span> <span class="hljs-comment">// 请求超时 20s</span><br>&#125;)<br><br><span class="hljs-comment">// 前置拦截器（发起请求之前的拦截）</span><br>axios.interceptors.request.use(<br>  (response) =&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据你的项目实际情况来对 config 做处理</span><br><span class="hljs-comment">     * 这里对 config 不做任何处理，直接返回</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">return</span> response<br>  &#125;,<br>  (error) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error)<br>  &#125;<br>)<br><br><span class="hljs-comment">// 后置拦截器（获取到响应时的拦截）</span><br>axios.interceptors.response.use(<br>  (response) =&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据你的项目实际情况来对 response 和 error 做处理</span><br><span class="hljs-comment">     * 这里对 response 和 error 不做任何处理，直接返回</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">return</span> response<br>  &#125;,<br>  (error) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (error.response &amp;&amp; error.response.data) &#123;<br>      <span class="hljs-keyword">const</span> code = error.response.status<br>      <span class="hljs-keyword">const</span> msg = error.response.data.message<br>      ElMessage.error(<span class="hljs-string">`Code: <span class="hljs-subst">$&#123;code&#125;</span>, Message: <span class="hljs-subst">$&#123;msg&#125;</span>`</span>)<br>      <span class="hljs-built_in">console</span>.error(<span class="hljs-string">`[Axios Error]`</span>, error.response)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      ElMessage.error(<span class="hljs-string">`<span class="hljs-subst">$&#123;error&#125;</span>`</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error)<br>  &#125;<br>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> axios<br></code></pre></td></tr></table></figure><ol start="3"><li>测试，在<code>src/views/axios.vue</code>中引入 <code>Axios</code> 配置文件:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;&lt;/template&gt;<br>&lt;script lang=<span class="hljs-string">&quot;ts&quot;</span>&gt;<br>  <span class="hljs-keyword">import</span> &#123; defineComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br>  <span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../utils/axios&#x27;</span><br><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> defineComponent(&#123;<br>    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;<br>      axios<br>        .get(<span class="hljs-string">&#x27;/users/XPoet&#x27;</span>)<br>        .then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;res: &#x27;</span>, res)<br>        &#125;)<br>        .catch(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;err: &#x27;</span>, err)<br>        &#125;)<br>    &#125;<br>  &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="集成-CSS-预编译器-Stylus-Sass-Less"><a href="#集成-CSS-预编译器-Stylus-Sass-Less" class="headerlink" title="集成 CSS 预编译器 Stylus/Sass/Less"></a>集成 CSS 预编译器 Stylus/Sass/Less</h3><p>这里以<code>Less</code>为例：</p><ol><li>安装</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i less -D<br></code></pre></td></tr></table></figure><ol start="2"><li>使用，在<code>src/views/home.vue</code>中：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style lang=&quot;less&quot;&gt;<br><span class="hljs-keyword">@bg</span> : #f0f0f0;<br><span class="hljs-selector-class">.home-area</span>&#123;<br>  <span class="hljs-attribute">background</span>: @bg;<br>&#125;<br>&lt;/<span class="hljs-selector-tag">style</span>&gt;<br></code></pre></td></tr></table></figure><p>至此，一个基于 <code>TypeScript + Vite + Vue3 + Vue Router + Vuex + Element Plus + Axios + Stylus/Sass/Less</code> 的前端项目开发环境搭建完毕。</p><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><blockquote><p>随着前端应用逐渐变得大型化和复杂化，在同一个项目中有多个人员参与时，每个人的前端能力程度不等，他们往往会用不同的编码风格和习惯在项目中写代码，长此下去，势必会让项目的健壮性越来越差。解决这些问题，理论上讲，口头约定和代码审查都可以，但是这种方式无法实时反馈，而且沟通成本过高，不够灵活，更关键的是无法把控。不以规矩，不能成方圆，我们不得不在项目使用一些工具来约束代码规范。</p></blockquote><p>本章讲解如何使用 <code>EditorConfig</code> + <code>Prettier</code> + <code>ESLint</code> 组合来实现代码规范化。</p><p>这样做带来好处：</p><ul><li>解决团队之间代码不规范导致的<code>可读性差</code>和<code>可维护性差</code>的问题。</li><li>解决团队成员<code>不同编辑器</code>导致的编码规范不统一问题。</li><li>提前发现<code>代码风格</code>问题，给出对应规范提示，及时修复。</li><li><code>减少代码审查</code>过程中反反复复的修改过程，节约时间。</li><li><code>自动格式化</code>，统一编码风格，从此和脏乱差的代码说再见。</li></ul><h3 id="集成-EditorConfig-配置"><a href="#集成-EditorConfig-配置" class="headerlink" title="集成 EditorConfig 配置"></a>集成 EditorConfig 配置</h3><p><code>EditorConfig</code> 有助于为不同 <code>IDE</code> 编辑器上处理同一项目的多个开发人员维护一致的编码风格。</p><p>在项目根目录下增加 <code>.editorconfig</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"># Editor configuration, see http://editorconfig.org<br><br># 表示是最顶层的 EditorConfig 配置文件<br>root = <span class="hljs-literal">true</span><br><br>[*] # 表示所有文件适用<br>charset = utf-8 # 设置文件字符集为 utf-8<br>indent_style = space # 缩进风格（tab | space）<br>indent_size = 4 # 缩进大小<br>end_of_line = lf # 控制换行类型(lf | cr | crlf)<br>trim_trailing_whitespace = true # 去除行首的任意空白字符<br>insert_final_newline = true # 始终在文件末尾插入一个新行<br><br>[*.md] # 表示仅 md 文件适用以下规则<br>max_line_length = off<br>trim_trailing_whitespace = <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>注意：<br><code>VSCode</code> 使用 <code>EditorConfig</code> 需要去插件市场下载插件 <code>EditorConfig for VS Code</code> 。</p><p><code>JetBrains</code> 系列（<code>WebStorm</code>、<code>IntelliJ IDEA</code> 等）则不用额外安装插件，可直接使用 <code>EditorConfig</code> 配置。</p><h3 id="集成-Prettier-配置"><a href="#集成-Prettier-配置" class="headerlink" title="集成 Prettier 配置"></a>集成 Prettier 配置</h3><p><code>Prettier</code> 是一款强大的代码格式化工具，支持 <code>JavaScript、TypeScript、CSS、SCSS、Less、JSX、Angular、Vue、GraphQL、JSON、Markdown</code> 等语言，基本上前端能用到的文件格式它都可以搞定，是当下最流行的代码格式化工具。</p><ol><li>安装 <code>Prettier</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i prettier -D<br></code></pre></td></tr></table></figure><ol start="2"><li>在本项目根目录下创建 <code>.prettierrc</code> 文件。</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;useTabs&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">&quot;tabWidth&quot;</span>: <span class="hljs-number">4</span>,<br>  <span class="hljs-attr">&quot;printWidth&quot;</span>: <span class="hljs-number">100</span>,<br>  <span class="hljs-attr">&quot;singleQuote&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;trailingComma&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>  <span class="hljs-attr">&quot;bracketSpacing&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;semi&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li><code>Prettier</code> 安装且配置好之后，就能使用命令来格式化代码</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"># 格式化所有文件（. 表示所有文件）<br>npx prettier --write .<br></code></pre></td></tr></table></figure><p>这样，执行完命令之后，代码都格式化成统一样式了。</p><p>注意：<br><code>VSCode</code> 编辑器使用 <code>Prettier</code> 配置需要下载插件 <code>Prettier - Code formatter</code> 。<br><code>JetBrains</code> 系列编辑器（<code>WebStorm</code>、<code>IntelliJ IDEA</code> 等）则不用额外安装插件，可直接使用 <code>Prettier</code> 配置。</p><p><code>Prettier</code> 配置好以后，在使用 <code>VSCode</code> 或 <code>WebStorm</code> 等编辑器的格式化功能时，编辑器就会按照 <code>Prettier</code> 配置文件的规则来进行格式化，避免了因为大家编辑器配置不一样而导致格式化后的代码风格不统一的问题。</p><h3 id="集成-ESLint-配置"><a href="#集成-ESLint-配置" class="headerlink" title="集成 ESLint 配置"></a>集成 ESLint 配置</h3><p><code>ESLint</code> 是一款用于查找并报告代码中问题的工具，并且支持部分问题自动修复。其核心是通过对代码解析得到的 <code>AST</code>（Abstract Syntax Tree 抽象语法树）进行模式匹配，来分析代码达到检查代码质量和风格问题的能力。</p><p>正如前面我们提到的因团队成员之间编程能力和编码习惯不同所造成的代码质量问题，我们使用 <code>ESLint</code> 来解决，<code>一边写代码一边查找问题</code>，如果发现错误，就给出<code>规则提示</code>，并且<code>自动修复</code>，长期下去，可以促使团队成员往同一种编码风格靠拢。</p><ol><li>安装 ESLint</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i eslint -D<br></code></pre></td></tr></table></figure><ol start="2"><li>配置 ESLint<br>ESLint 安装成功后，执行 <code>npx eslint --init</code>，然后按照终端操作提示完成一系列设置来创建配置文件。<br>依次选择：</li></ol><ul><li>How would you like to use ESLint? （你想如何使用 ESLint?）：<strong>To check syntax, find problems, and enforce code style（检查语法、发现问题并强制执行代码风格）</strong></li><li>What type of modules does your project use?（你的项目使用哪种类型的模块?）：<strong>JavaScript modules (import/export)</strong></li><li>Which framework does your project use? （你的项目使用哪种框架?）：<strong>Vue.js</strong></li><li>Does your project use TypeScript?（你的项目是否使用 TypeScript？）：<strong>Yes</strong></li><li>Where does your code run?（你的代码在哪里运行?）：<strong>选择 Browser 和 Node</strong></li><li>How would you like to define a style for your project?（你想怎样为你的项目定义风格？）：<strong>Use a popular style guide（使用一种流行的风格指南）</strong></li><li>Which style guide do you want to follow?（你想遵循哪一种风格指南?）：<strong>Airbnb</strong></li><li>What format do you want your config file to be in?（你希望你的配置文件是什么格式?）：<strong>JavaScript</strong></li><li>Would you like to install them now with npm?（你想现在就用 NPM 安装它们吗?）：<strong>Yes</strong></li></ul><p>注意：如果自动安装依赖失败，那么需要手动安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint-config-airbnb-base eslint-plugin-<span class="hljs-keyword">import</span> eslint-plugin-vue -D<br></code></pre></td></tr></table></figure><ol start="3"><li>ESLint 配置文件 .eslintrc.js</li></ol><p>在上一步操作完成后，会在项目根目录下自动生成 <code>.eslintrc.js</code> 配置文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>  env: &#123;<br>    browser: <span class="hljs-literal">true</span>,<br>    es2021: <span class="hljs-literal">true</span>,<br>    node: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-keyword">extends</span>: [<br>    <span class="hljs-string">&#x27;plugin:vue/essential&#x27;</span>,<br>    <span class="hljs-string">&#x27;airbnb-base&#x27;</span>,<br>  ],<br>  parserOptions: &#123;<br>    ecmaVersion: <span class="hljs-number">12</span>,<br>    parser: <span class="hljs-string">&#x27;@typescript-eslint/parser&#x27;</span>,<br>    sourceType: <span class="hljs-string">&#x27;module&#x27;</span>,<br>  &#125;,<br>  plugins: [<br>    <span class="hljs-string">&#x27;vue&#x27;</span>,<br>    <span class="hljs-string">&#x27;@typescript-eslint&#x27;</span>,<br>  ],<br>  rules: &#123;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>注意：<br><code>VSCode</code> 使用 <code>ESLint</code> 配置文件需要去插件市场下载插件 <code>ESLint</code> 。</p><p><code>JetBrains</code> 系列（<code>WebStorm</code>、<code>IntelliJ IDEA</code> 等）则不用额外安装插件。</p><p>配置好以后，我们在 <code>VSCode</code> 或 <code>WebStorm</code> 等编辑器中开启 <code>ESLin</code>(<code>VSCode</code>编辑器右下角点击<code>ESLint</code>选择<code>allow</code>)，写代码时，<code>ESLint</code> 就会按照我们配置的规则来进行实时代码检查，发现问题会给出对应错误提示和修复方案。</p><p>这样，我们发现我们项目中的很多文件都标红了，表示这些代码不符合<code>ESLint</code>规范。</p><p>虽然，现在编辑器已经给出错误提示和修复方案，但需要我们一个一个去点击修复，还是挺麻烦的。很简单，我们只需设置编辑器保存文件时自动执行 <code>eslint --fix</code> 命令进行代码风格修复。</p><p><code>VSCode</code> 在 <code>settings.json</code> 设置文件中，增加以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;editor.codeActionsOnSave&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;source.fixAll.eslint&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这时，我们去标红的文件中保存文件，<code>ctrl+s</code>，格式就被自动修改成<code>ESLint</code>规范了。</p><p>但是依然有一些文件显示不符合<code>ESLint</code>规范，修改<code>.eslintrc.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>    env: &#123;<br>        browser: <span class="hljs-literal">true</span>,<br>        es2021: <span class="hljs-literal">true</span>,<br>        node: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    <span class="hljs-keyword">extends</span>: [<br>        <span class="hljs-string">&#x27;plugin:vue/essential&#x27;</span>,<br>        <span class="hljs-string">&#x27;airbnb-base&#x27;</span>,<br>    ],<br>    parserOptions: &#123;<br>        ecmaVersion: <span class="hljs-number">12</span>,<br>        parser: <span class="hljs-string">&#x27;@typescript-eslint/parser&#x27;</span>,<br>        sourceType: <span class="hljs-string">&#x27;module&#x27;</span>,<br>    &#125;,<br>    plugins: [<br>        <span class="hljs-string">&#x27;vue&#x27;</span>,<br>        <span class="hljs-string">&#x27;@typescript-eslint&#x27;</span>,<br>    ],<br>    settings: &#123;<br>        <span class="hljs-string">&#x27;import/resolver&#x27;</span>: &#123;<br>            node: &#123;<br>                extensions: [<span class="hljs-string">&#x27;.js&#x27;</span>, <span class="hljs-string">&#x27;.jsx&#x27;</span>, <span class="hljs-string">&#x27;.ts&#x27;</span>, <span class="hljs-string">&#x27;.tsx&#x27;</span>],<br>            &#125;,<br>        &#125;,<br>    &#125;,<br>    rules: &#123;<br>        <span class="hljs-string">&#x27;linebreak-style&#x27;</span>: <span class="hljs-number">0</span>,<br>        indent: [<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-number">4</span>], <span class="hljs-comment">// eslint缩进四格</span><br>        <span class="hljs-string">&#x27;import/extensions&#x27;</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;never&#x27;</span>, &#123; <span class="hljs-string">&#x27;web.js&#x27;</span>: <span class="hljs-string">&#x27;never&#x27;</span>, <span class="hljs-attr">json</span>: <span class="hljs-string">&#x27;never&#x27;</span> &#125;],<br>        <span class="hljs-string">&#x27;import/no-extraneous-dependencies&#x27;</span>: [<span class="hljs-number">2</span>, &#123;<br>            devDependencies: <span class="hljs-literal">true</span>,<br>            peerDependencies: <span class="hljs-literal">true</span>,<br>            <span class="hljs-comment">// optionalDependencies: true,</span><br>            <span class="hljs-comment">// bundledDependencies: true</span><br>        &#125;],<br>        <span class="hljs-string">&#x27;import/no-unresolved&#x27;</span>: [<br>            <span class="hljs-number">2</span>,<br>            &#123; <span class="hljs-attr">caseSensitive</span>: <span class="hljs-literal">false</span> &#125;,<br>        ],<br>    &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="解决-Prettier-和-ESLint-的冲突"><a href="#解决-Prettier-和-ESLint-的冲突" class="headerlink" title="解决 Prettier 和 ESLint 的冲突"></a>解决 Prettier 和 ESLint 的冲突</h3><p>通常大家会在项目中根据实际情况添加一些额外的 ESLint 和 Prettier 配置规则，难免会存在规则冲突情况。</p><p>解决两者冲突问题，需要用到 <code>eslint-plugin-prettier</code> 和 <code>eslint-config-prettier</code>。</p><ul><li><code>eslint-plugin-prettier</code> 将 <code>Prettier</code> 的规则设置到 ESLint 的规则中。</li><li><code>eslint-config-prettier</code> 关闭 <code>ESLint</code> 中与 <code>Prettier</code> 中会发生冲突的规则。</li></ul><p>最后形成优先级：<code>Prettier</code> 配置规则 &gt; <code>ESLint</code> 配置规则。</p><p>安装插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i eslint-plugin-prettier eslint-config-prettier -D<br></code></pre></td></tr></table></figure><p>在 <code>.eslintrc.js</code> 添加 <code>prettier</code> 插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>  ...<br>  <span class="hljs-keyword">extends</span>: [<br>    <span class="hljs-string">&#x27;plugin:vue/essential&#x27;</span>,<br>    <span class="hljs-string">&#x27;airbnb-base&#x27;</span>,<br>    <span class="hljs-string">&#x27;plugin:prettier/recommended&#x27;</span> <span class="hljs-comment">// 添加 prettier 插件</span><br>  ],<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，我们在执行 <code>eslint --fix</code> 命令时，<code>ESLint</code> 就会按照 <code>Prettier</code> 的配置规则来格式化代码，轻松解决二者冲突问题。</p><h3 id="集成-husky-和-lint-staged"><a href="#集成-husky-和-lint-staged" class="headerlink" title="集成 husky 和 lint-staged"></a>集成 husky 和 lint-staged</h3><p>我们在项目中已集成 <code>ESLint</code> 和 <code>Prettier</code>，在编码时，这些工具可以对我们写的代码进行实时校验，在一定程度上能有效规范我们写的代码，但团队可能会有些人觉得这些条条框框的限制很麻烦，选择视“提示”而不见，依旧按自己的一套风格来写代码，或者干脆禁用掉这些工具，开发完成就直接把代码提交到了仓库，日积月累，<code>ESLint</code> 也就形同虚设。</p><p>所以，我们还需要做一些限制，让没通过 <code>ESLint</code> 检测和修复的代码<code>禁止提交</code>，从而保证仓库代码都是符合规范的。</p><p>为了解决这个问题，我们需要用到 <code>Git Hook</code>，在本地执行 <code>git commit</code> 的时候，就对所提交的代码进行 <code>ESLint</code> 检测和修复（即执行 <code>eslint --fix</code>），如果这些代码没通过 <code>ESLint</code> 规则校验，则禁止提交。</p><p><strong>配置 husky</strong><br>使用 <code>husky-init</code> 命令快速在项目初始化一个 <code>husky</code> 配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npx husky-init &amp;&amp; npm install<br></code></pre></td></tr></table></figure><p><strong>注意</strong>，这里项目前提有git，不然无法运行。这里我们把当前项目部署到<code>github</code>中，后面也会用到<code>github</code>，部署方法略。</p><p>这行命令做了四件事：</p><ol><li>安装 <code>husky</code> 到开发依赖</li><li>在项目根目录下创建 <code>.husky</code> 目录</li><li>在 <code>.husky</code> 目录创建 <code>pre-commit hook</code>，并初始化 <code>pre-commit</code> 命令为<code> npm test</code></li><li>修改 <code>package.json</code> 的 <code>scripts</code>，增加 <code>&quot;prepare&quot;: &quot;husky install&quot;</code></li></ol><p>到这里，<code>husky</code> 配置完毕，现在我们来使用它：<br>修改 <code>.husky/pre-commit</code> hook 文件的触发命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">eslint --fix ./src --ext .vue,.js,.ts<br></code></pre></td></tr></table></figure><p>上面这个 <code>pre-commit</code> hook 文件的作用是：当我们执行 <code>git commit -m &quot;xxx&quot;</code> 时，会先对 <code>src</code> 目录下所有的 <code>.vue</code>、<code>.js</code>、<code>.ts</code>  文件执行 <code>eslint --fix</code> 命令，如果 <code>ESLint</code> 通过，成功 <code>commit</code>，否则终止 <code>commit</code>。</p><p>但是又存在一个问题：有时候我们明明只改动了一两个文件，却要对所有的文件执行 <code>eslint --fix</code>。假如这是一个历史项目，我们在中途配置了 <code>ESLint</code> 规则，那么在提交代码时，也会对其他未修改的“历史”文件都进行检查，可能会造成大量文件出现 <code>ESLint</code> 错误，显然不是我们想要的结果。</p><p>我们要做到只用 <code>ESLint</code> 修复自己此次写的代码，而不去影响其他的代码。所以我们还需借助一个神奇的工具 <code>lint-staged</code> 。</p><p><code>lint-staged</code> 这个工具一般结合 <code>husky</code> 来使用，它可以让 <code>husky</code> 的 <code>hook</code> 触发的命令只作用于 <code>git add</code>那些文件（即 <code>git</code> 暂存区的文件），而不会影响到其他文件。</p><p>接下来，我们使用 <code>lint-staged</code> 继续优化项目。</p><ol><li>安装 <code>lint-staged</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i lint-staged -D<br></code></pre></td></tr></table></figure><ol start="2"><li>在 <code>package.json</code>里增加 <code>lint-staged</code> 配置项</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;lint-staged&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;*.&#123;vue,js,ts&#125;&quot;</span>: <span class="hljs-string">&quot;eslint --fix&quot;</span><br>&#125;,<br></code></pre></td></tr></table></figure><p>这行命令表示：只对 <code>git</code> 暂存区的 <code>.vue</code>、<code>.js</code>、<code>.ts</code> 文件执行 <code>eslint --fix</code>。</p><ol start="3"><li>修改 <code>.husky/pre-commit</code> hook 的触发命令为：<code>npx lint-staged</code></li></ol><p>至此，<code>husky</code> 和 <code>lint-staged</code> 组合配置完成。</p><p>现在我们提交代码时就会变成这样：</p><p>假如我们修改了 <code>scr</code> 目录下的 <code>test-1.js</code>文件，然后 <code>git add ./src/</code>，最后 <code>git commit -m &quot;test...&quot;</code>，这时候就会只对 <code>test-1.js</code> 这两个文件执行 1。如果 ESLint 通过，成功提交，否则自动修复代码格式再提交。从而保证了我们提交到 <code>Git</code> 仓库的代码都是规范的。</p><p>无论写代码还是做其他事情，都应该用长远的眼光来看，刚开始使用 <code>ESint</code> 的时候可能会有很多问题，改起来也很费时费力，只要坚持下去，代码质量和开发效率都会得到提升，前期的付出都是值得的。</p><p>这些工具并不是必须的，没有它们你同样可以可以完成功能开发，但是利用好这些工具，你可以写出更高质量的代码。特别是一些刚刚接触的人，可能会觉得麻烦而放弃使用这些工具，失去了一次提升编程能力的好机会。</p><h2 id="提交规范"><a href="#提交规范" class="headerlink" title="提交规范"></a>提交规范</h2><p>前面我们已经统一代码规范，并且在提交代码时进行强约束来保证仓库代码质量。多人协作的项目中，在提交代码这个环节，也存在一种情况：<code>git commit</code> 不能保证每个人对提交信息的准确描述，因此会出现提交信息紊乱、风格不一致的情况。</p><p>如果 <code>git commit</code> 的描述信息精准，在后期维护和 <code>Bug</code> 处理时会变得有据可查，项目开发周期内还可以根据规范的提交信息快速生成开发日志，从而方便我们追踪项目和把控进度。</p><p>这里，我们使用社区最流行、最知名、最受认可的 <code>Angular</code> 团队提交规范。</p><h3 id="集成-Commitizen-实现规范提交"><a href="#集成-Commitizen-实现规范提交" class="headerlink" title="集成 Commitizen 实现规范提交"></a>集成 Commitizen 实现规范提交</h3><p>上面提到的 <code>Angular</code> 规范提交的格式，初次接触的同学咋一看可能会觉得复杂，其实不然，如果让大家在 <code>git commit</code> 的时候严格按照上面的格式来写，肯定是有压力的，首先得记住不同的类型到底是用来定义什么，<code>subject</code> 怎么写，<code>body</code> 怎么写，<code>footer</code> 要不要写等等问题，<code>懒才是程序员第一生产力</code>，为此我们使用 <code>Commitizen</code> 工具来帮助我们自动生成 <code>commit message</code> 格式，从而实现规范提交。</p><blockquote><p>Commitizen 是一个帮助撰写规范 commit message 的工具。它有一个命令行工具 cz-cli。</p></blockquote><ol><li>安装 <code>Commitizen</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install commitizen -D<br></code></pre></td></tr></table></figure><ol start="2"><li>初始化项目</li></ol><p>成功安装 <code>Commitizen</code> 后，我们用 <code>cz-conventional-changelog</code> 适配器来初始化项目：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npx commitizen init cz-conventional-changelog --save-dev --save-exact<br></code></pre></td></tr></table></figure><ol start="3"><li>使用 <code>Commitizen</code></li></ol><p>以前我们提交代码都是 <code>git commit -m &quot;xxx&quot;</code>，现在改为 <code>git cz</code>，然后按照终端操作提示，逐步填入信息，就能自动生成规范的 <code>commit message</code>。</p><p>最后，在 Git 提交历史中就能看到刚刚规范的提交记录了。</p><ol start="4"><li>自定义配置提交说明</li></ol><p>从上面的截图可以看到，<code>git cz</code> 终端操作提示都是<code>英文</code>的，如果想改成<code>中文</code>的或者自定义这些配置选项，我们使用 <code>cz-customizable</code> 适配器。</p><p><code>cz-customizable</code> 初始化项目</p><p>运行如下命令使用 <code>cz-customizable</code> 初始化项目，注意之前已经初始化过一次，这次再初始化，需要加 <code>--force</code> 覆盖。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npx commitizen init cz-customizable --save-dev --save-exact --force<br></code></pre></td></tr></table></figure><ol start="5"><li>使用 cz-customizable</li></ol><p>在项目根目录下创建 <code>.cz-config.js</code> 文件，然后按照官方提供的示例来配置。</p><p>在本项目中我们修改成中文：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-comment">// type 类型（定义之后，可通过上下键选择）</span><br>  types: [<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;feat&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;feat:     新增功能&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;fix&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;fix:      修复 bug&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;docs&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;docs:     文档变更&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;style:    代码格式（不影响功能，例如空格、分号等格式修正）&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;refactor&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;refactor: 代码重构（不包括 bug 修复、功能新增）&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;perf&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;perf:     性能优化&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;test:     添加、修改测试用例&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;build&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;build:    构建流程、外部依赖变更（如升级 npm 包、修改 webpack 配置等）&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;ci&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;ci:       修改 CI 配置、脚本&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;chore&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;chore:    对构建过程或辅助工具和库的更改（不影响源文件、测试用例）&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;revert&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;revert:   回滚 commit&#x27;</span> &#125;<br>  ],<br><br>  <span class="hljs-comment">// scope 类型（定义之后，可通过上下键选择）</span><br>  scopes: [<br>    [<span class="hljs-string">&#x27;components&#x27;</span>, <span class="hljs-string">&#x27;组件相关&#x27;</span>],<br>    [<span class="hljs-string">&#x27;hooks&#x27;</span>, <span class="hljs-string">&#x27;hook 相关&#x27;</span>],<br>    [<span class="hljs-string">&#x27;utils&#x27;</span>, <span class="hljs-string">&#x27;utils 相关&#x27;</span>],<br>    [<span class="hljs-string">&#x27;element-ui&#x27;</span>, <span class="hljs-string">&#x27;对 element-ui 的调整&#x27;</span>],<br>    [<span class="hljs-string">&#x27;styles&#x27;</span>, <span class="hljs-string">&#x27;样式相关&#x27;</span>],<br>    [<span class="hljs-string">&#x27;deps&#x27;</span>, <span class="hljs-string">&#x27;项目依赖&#x27;</span>],<br>    [<span class="hljs-string">&#x27;auth&#x27;</span>, <span class="hljs-string">&#x27;对 auth 修改&#x27;</span>],<br>    [<span class="hljs-string">&#x27;other&#x27;</span>, <span class="hljs-string">&#x27;其他修改&#x27;</span>],<br>    <span class="hljs-comment">// 如果选择 custom，后面会让你再输入一个自定义的 scope。也可以不设置此项，把后面的 allowCustomScopes 设置为 true</span><br>    [<span class="hljs-string">&#x27;custom&#x27;</span>, <span class="hljs-string">&#x27;以上都不是？我要自定义&#x27;</span>]<br>  ].map(<span class="hljs-function">(<span class="hljs-params">[value, description]</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      value,<br>      name: <span class="hljs-string">`<span class="hljs-subst">$&#123;value.padEnd(<span class="hljs-number">30</span>)&#125;</span> (<span class="hljs-subst">$&#123;description&#125;</span>)`</span><br>    &#125;<br>  &#125;),<br><br>  <span class="hljs-comment">// 是否允许自定义填写 scope，在 scope 选择的时候，会有 empty 和 custom 可以选择。</span><br>  <span class="hljs-comment">// allowCustomScopes: true,</span><br><br>  <span class="hljs-comment">// allowTicketNumber: false,</span><br>  <span class="hljs-comment">// isTicketNumberRequired: false,</span><br>  <span class="hljs-comment">// ticketNumberPrefix: &#x27;TICKET-&#x27;,</span><br>  <span class="hljs-comment">// ticketNumberRegExp: &#x27;\\d&#123;1,5&#125;&#x27;,</span><br><br><br>  <span class="hljs-comment">// 针对每一个 type 去定义对应的 scopes，例如 fix</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  scopeOverrides: &#123;</span><br><span class="hljs-comment">    fix: [</span><br><span class="hljs-comment">      &#123; name: &#x27;merge&#x27; &#125;,</span><br><span class="hljs-comment">      &#123; name: &#x27;style&#x27; &#125;,</span><br><span class="hljs-comment">      &#123; name: &#x27;e2eTest&#x27; &#125;,</span><br><span class="hljs-comment">      &#123; name: &#x27;unitTest&#x27; &#125;</span><br><span class="hljs-comment">    ]</span><br><span class="hljs-comment">  &#125;,</span><br><span class="hljs-comment">  */</span><br><br>  <span class="hljs-comment">// 交互提示信息</span><br>  messages: &#123;<br>    type: <span class="hljs-string">&#x27;确保本次提交遵循 Angular 规范！\n选择你要提交的类型：&#x27;</span>,<br>    scope: <span class="hljs-string">&#x27;\n选择一个 scope（可选）：&#x27;</span>,<br>    <span class="hljs-comment">// 选择 scope: custom 时会出下面的提示</span><br>    customScope: <span class="hljs-string">&#x27;请输入自定义的 scope：&#x27;</span>,<br>    subject: <span class="hljs-string">&#x27;填写简短精炼的变更描述：\n&#x27;</span>,<br>    body:<br>      <span class="hljs-string">&#x27;填写更加详细的变更描述（可选）。使用 &quot;|&quot; 换行：\n&#x27;</span>,<br>    breaking: <span class="hljs-string">&#x27;列举非兼容性重大的变更（可选）：\n&#x27;</span>,<br>    footer: <span class="hljs-string">&#x27;列举出所有变更的 ISSUES CLOSED（可选）。 例如: #31, #34：\n&#x27;</span>,<br>    confirmCommit: <span class="hljs-string">&#x27;确认提交？&#x27;</span><br>  &#125;,<br><br>  <span class="hljs-comment">// 设置只有 type 选择了 feat 或 fix，才询问 breaking message</span><br>  allowBreakingChanges: [<span class="hljs-string">&#x27;feat&#x27;</span>, <span class="hljs-string">&#x27;fix&#x27;</span>],<br><br>  <span class="hljs-comment">// 跳过要询问的步骤</span><br>  skipQuestions: [<span class="hljs-string">&#x27;body&#x27;</span>, <span class="hljs-string">&#x27;footer&#x27;</span>],<br><br>  <span class="hljs-comment">// subject 限制长度</span><br>  subjectLimit: <span class="hljs-number">100</span>,<br>  breaklineChar: <span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-comment">// 支持 body 和 footer</span><br>  <span class="hljs-comment">// footerPrefix : &#x27;ISSUES CLOSED:&#x27;</span><br>  <span class="hljs-comment">// askForBreakingChangeFirst : true,</span><br>&#125;<br></code></pre></td></tr></table></figure><p>建议大家结合项目实际情况来自定义配置提交规则，例如很多时候我们不需要写长描述，公司内部的代码仓库也不需要管理 <code>issue</code>，那么可以把询问 <code>body</code> 和 <code>footer</code> 的步骤跳过（在 <code>.cz-config.js</code> 中修改成 <code>skipQuestions: [&#39;body&#39;, &#39;footer&#39;]</code>）。</p><p>用 <code>git cz</code>试一下吧！</p><h3 id="集成-commitlint-验证提交规范"><a href="#集成-commitlint-验证提交规范" class="headerlink" title="集成 commitlint 验证提交规范"></a>集成 commitlint 验证提交规范</h3><p>在“代码规范”章节，我们已经讲到过，尽管制定了规范，但在多人协作的项目中，总有些人依旧我行我素，因此提交代码这个环节，我们也增加一个限制：只让符合 <code>Angular</code> 规范的 <code>commit message</code> 通过，我们借助 <code>@commitlint/config-conventional</code> 和 <code>@commitlint/cli</code> 来实现。</p><ol><li>安装 <code>commitlint</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i @commitlint/config-conventional @commitlint/cli -D<br></code></pre></td></tr></table></figure><ol start="2"><li>配置 <code>commitlint</code></li></ol><p>创建 <code>commitlint.config.js</code> 文件 在项目根目录下创建 <code>commitlint.config.js</code> 文件，并填入以下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = &#123; <span class="hljs-attr">extends</span>: [<span class="hljs-string">&#x27;@commitlint/config-conventional&#x27;</span>] &#125;<br></code></pre></td></tr></table></figure><p>使用 <code>husky</code> 的 <code>commit-msg</code> hook 触发验证提交信息的命令</p><p>我们使用 <code>husky</code> 命令在 <code>.husky</code> 目录下创建 <code>commit-msg</code> 文件，并在此执行 <code>commit message</code> 的验证命令。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npx husky add .husky/commit-msg <span class="hljs-string">&quot;npx --no-install commitlint --edit $1&quot;</span><br></code></pre></td></tr></table></figure><p>若执行失败，则手动创建 <code>commit-msg</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">#!/bin/sh<br>. <span class="hljs-string">&quot;$(dirname &quot;</span>$<span class="hljs-number">0</span><span class="hljs-string">&quot;)/_/husky.sh&quot;</span><br><br>npx --no-install commitlint --edit<br></code></pre></td></tr></table></figure><ol start="3"><li><code>commitlint</code> 验证</li></ol><p>不符合规范的提交信息（就会报错）:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">git commit -m <span class="hljs-string">&quot;test commitlint&quot;</span><br></code></pre></td></tr></table></figure><p>符合规范的提交信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">git commit -m <span class="hljs-string">&quot;test: commitlint test&quot;</span><br></code></pre></td></tr></table></figure><p>因为已在项目中集成 <code>commitizen</code>，建议大家用 <code>git cz</code> 来代替 <code>git commit</code> 提交代码，可以保证提交信息规范。</p><h2 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h2><p>到了这一步，我们已经在项目中集成<code>代码规范约束</code>、<code>提交信息规范约束</code>，从而保证我们远端仓库（如 <code>GitHub</code>、<code>GitLab</code>、<code>Gitee</code> 仓库等）的代码都是高质量的。</p><p>本项目是要搭建一套规范的<code>前端工程化</code>环境，为此我们使用 <code>CI</code>（Continuous Integration 持续集成）来完成项目最后的部署工作。</p><p>常见的 <code>CI</code> 工具有 <code>GitHub Actions</code>、<code>GitLab CI</code>、<code>Travis CI</code>、<code>Circle CI</code> 等。</p><p>这里，我们使用 <code>GitHub Actions</code>。</p><h3 id="什么是-GitHub-Actions"><a href="#什么是-GitHub-Actions" class="headerlink" title="什么是 GitHub Actions"></a>什么是 GitHub Actions</h3><p><code>GitHub Actions</code> 是 <code>GitHub</code> 的持续集成服务，持续集成由很多操作组成，比如<code>抓取代码</code>、<code>运行测试</code>、<code>登录远程服务器</code>、<code>发布到第三方服务</code>等等，<code>GitHub</code> 把这些操作称为 <code>actions</code>。</p><h3 id="创建-GitHub-Token"><a href="#创建-GitHub-Token" class="headerlink" title="创建 GitHub Token"></a>创建 GitHub Token</h3><p>创建一个有 <code>repo</code> 和 <code>workflow</code> 权限的 <a href="https://github.com/settings/tokens/new">GitHub Token</a></p><ul><li>Note ： vue3-depoly-token</li><li>workflow ： √</li><li>Generate token</li></ul><p>注意：新生成的 <code>Token</code> 只会显示一次，保存起来，后面要用到。如有遗失，重新生成即可。</p><h3 id="在仓库中添加-secret"><a href="#在仓库中添加-secret" class="headerlink" title="在仓库中添加 secret"></a>在仓库中添加 secret</h3><p>将上面新创建的 <code>Token</code> 添加到 <code>GitHub</code> 仓库的 <code>Secrets</code> 里，并将这个新增的 <code>secret</code> 命名为 <code>VUE3_PROJECT_DEPLOY</code> （名字无所谓，看你喜欢）。</p><p>步骤：仓库 -&gt; <code>settings</code> -&gt; <code>Secrets</code> -&gt; <code>New repository secret</code>。</p><div class="note note-warning">            <p>注意：新创建的 <code>secret</code> <code>VUE3_PROJECT_DEPLOY</code> 在 <code>Actions</code> 配置文件中要用到，两个地方需保持一致！</p>          </div><h3 id="创建-Actions-配置文件"><a href="#创建-Actions-配置文件" class="headerlink" title="创建 Actions 配置文件"></a>创建 Actions 配置文件</h3><ol><li>在项目根目录下创建 <code>.github</code> 目录。</li><li>在 <code>.github</code> 目录下创建 <code>workflows</code> 目录。</li><li>在 <code>workflows</code> 目录下创建 <code>deploy.yml</code> 文件。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js">name: deploy<br><br>on:<br>  push:<br>    branches: [master] # master 分支有 push 时触发<br><br>jobs:<br>  deploy:<br>    runs-on: ubuntu-latest<br>    steps:<br>      - uses: actions/checkout@v2<br><br>      - name: Setup Node.js v14.x<br>        uses: actions/setup-node@v1<br>        <span class="hljs-keyword">with</span>:<br>          node-version: <span class="hljs-string">&#x27;14.x&#x27;</span><br><br>      - name: Install<br>        run: npm install # 安装依赖<br><br>      - name: Build<br>        run: npm run build # 打包<br><br>      - name: Deploy<br>        uses: peaceiris/actions-gh-pages@v3 # 使用部署到 GitHub pages 的 action<br>        <span class="hljs-keyword">with</span>:<br>          publish_dir: ./dist # 部署打包后的 dist 目录<br>          github_token: $&#123;&#123; secrets.VUE3_PROJECT_DEPLOY &#125;&#125; # secret 名<br>          user_name: $&#123;&#123; secrets.MY_USER_NAME &#125;&#125;<br>          user_email: $&#123;&#123; secrets.MY_USER_EMAIL &#125;&#125;<br>          commit_message: Update Vite2.x + Vue3.x + TypeScript Starter # 部署时的 git 提交信息，自由填写<br><br></code></pre></td></tr></table></figure><h3 id="自动部署触发原理"><a href="#自动部署触发原理" class="headerlink" title="自动部署触发原理"></a>自动部署触发原理</h3><p>这里说明一下：</p><ol><li><code>master</code> 分支存储项目源代码</li><li><code>gh-pages</code> 分支存储打包后的静态文件</li></ol><blockquote><p><code>gh-pages</code> 分支，是 <code>GitHub Pages</code> 服务的固定分支，可以通过 <code>HTTP</code> 的方式访问到这个分支的静态文件资源。</p></blockquote><p>当有新提交的代码 <code>push</code> 到 <code>GitHub</code> 仓库的 <code>master</code> 分支时，就会触发 <code>GitHub Actions</code>，在 <code>GitHub</code> 服务器上执行 <code>Action</code> 配置文件里面的命令，例如：安装依赖、项目打包等，然后将打包好的静态文件部署到 <code>GitHub Pages</code> 的 <code>gh-pages</code> 分支上（如果该分支不存在则会自动创建），最后，我们就能通过域名访问了。</p><p>使用自动部署，我们只需专注于项目开发阶段，任何重复且枯燥的行为都交由程序去完成，懒才是程序员第一生产力。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>将刚才新增的 <code>deploy.yml</code> 文件推到 <code>dev</code> 分支上，然后再合到 <code>master</code> 分支。</p><p>这时候去 <code>Github</code> 中查看 <code>master</code> 分支，代码确实推到 <code>master</code> 分支中了，这时候 <code>action</code> 报错，查看一下是代码和依赖的问题，将涉及到的 <code>$store</code> 和 <code>element-plus</code> 删除，再次推到 <code>master</code> ，这时候自动部署成功，并且新建一个新的静态文件分支 <code>github-pages</code>，里面存放的是打包后的静态文件。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本文从<code>技术选项</code>到<code>架构搭建</code>、从<code>代码规范约束</code>到<code>提交信息规范约束</code>，再到<code>自动部署</code>，一步一步带领大家如何从一个最简单的前端项目骨架到规范的前端工程化环境，基本涵盖前端项目开发的整个流程，特别适合刚接触前端工程化的同学学习。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Eslint</tag>
      
      <tag>Prettier</tag>
      
      <tag>Vite</tag>
      
      <tag>Vue3.x</tag>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Js中关于this、apply、call、bind的深入探讨</title>
    <link href="/2021/03/09/js-this-bind-call-apply/"/>
    <url>/2021/03/09/js-this-bind-call-apply/</url>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><div class="note note-info">            <p>这又是一个面试经典问题~/(ㄒoㄒ)/~~也是 <code>ES5</code> 中众多坑中的一个，在 <code>ES6</code> 中可能会极大避免 <code>this</code> 产生的错误，但是为了一些老代码的维护，最好还是了解一下 <code>this</code> 的指向和 <code>call</code>、<code>apply</code>、<code>bind</code> 三者的区别。</p>          </div><h2 id="this-的指向"><a href="#this-的指向" class="headerlink" title="this 的指向"></a>this 的指向</h2><p>在 <code>ES5</code> 中，其实 <code>this</code> 的指向，始终坚持一个原理：<span class="label label-primary">this 永远指向最后调用它所在函数的那个对象</span>。</p><p>举个栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = &#123;<br>    name: <span class="hljs-string">&quot;Cherry&quot;</span>,<br>    fn : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);      <span class="hljs-comment">// Cherry</span><br>    &#125;<br>&#125;<br>a.fn();<br></code></pre></td></tr></table></figure><p>用上面这个栗子来解释原理：<code>this</code>在<code>fn</code>函数中，<code>fn</code>函数被调用，而调用它的对象是<code>a</code>，所以<code>this</code>指向对象<code>a</code>。</p><p>接下来利用几种 <code>JS</code> 中的函数调用来具体说明 <code>this</code> 的指向：</p><h2 id="JS-中的函数调用"><a href="#JS-中的函数调用" class="headerlink" title="JS 中的函数调用"></a>JS 中的函数调用</h2><p>函数调用的方法一共有 <code>4</code> 种<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="this、apply、call、bind">[1]</span></a></sup></p><ol><li>作为一个函数调用</li><li>函数作为方法调用</li><li>使用构造函数调用函数</li><li>作为函数方法调用函数（call、apply）</li></ol><h3 id="作为一个函数调用"><a href="#作为一个函数调用" class="headerlink" title="作为一个函数调用"></a>作为一个函数调用</h3><p>例 1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;windowsName&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;Cherry&quot;</span>;<br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);          <span class="hljs-comment">// windowsName</span><br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;inner:&quot;</span> + <span class="hljs-built_in">this</span>);    <span class="hljs-comment">// inner: Window</span><br>&#125;<br>a();<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;outer:&quot;</span> + <span class="hljs-built_in">this</span>)         <span class="hljs-comment">// outer: Window</span><br></code></pre></td></tr></table></figure><p>这样一个最简单的函数，不属于任何一个对象，就是一个函数，这样的情况在 <code>JavaScript</code> 的在浏览器中的<code>非严格模式</code>默认是属于全局对象 <code>window</code> 的，在严格模式，就是 <code>undefined</code>。</p><p>但这是一个全局的函数，很容易产生命名冲突，所以不建议这样使用。</p><p>这个时候我们再来看例 2：<br>例 2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;windowsName&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;Cherry&#x27;</span>;<br>    innerFunction();<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">innerFunction</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);      <span class="hljs-comment">// windowsName</span><br>    &#125;<br>&#125;<br><br>fn()<br></code></pre></td></tr></table></figure><p>这里的 <code>innerFunction()</code> 的调用就属于这一种调用方式：作为一个函数调用（它就是作为一个函数调用的，没有挂载在任何对象上，所以对于没有挂载在任何对象上的函数，在非严格模式下 <code>this</code> 就是指向 <code>window</code> 的）</p><h3 id="函数作为方法调用"><a href="#函数作为方法调用" class="headerlink" title="函数作为方法调用"></a>函数作为方法调用</h3><p>更多的情况是将函数作为对象的方法使用。比如例 3：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;windowsName&quot;</span>;<br><span class="hljs-keyword">var</span> a = &#123;<br>    name: <span class="hljs-string">&quot;Cherry&quot;</span>,<br>    fn : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);      <span class="hljs-comment">// Cherry</span><br>    &#125;<br>&#125;<br>a.fn();<br></code></pre></td></tr></table></figure><p>这里定义一个对象 <code>a</code>，对象 <code>a</code> 有一个属性（<code>name</code>）和一个方法（<code>fn</code>）。</p><p>然后对象 <code>a</code> 通过 <code>.</code> 方法调用了其中的 <code>fn</code> 方法。</p><p>然后我们一直记住的那句话“<span class="label label-primary">this 永远指向最后调用它所在函数的那个对象</span>”，所以在 <code>fn</code> 中的 <code>this</code> 就是指向 <code>a</code> 的。</p><p>我们做一个小小的改动：<br>例 4：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;windowsName&quot;</span>;<br><span class="hljs-keyword">var</span> a = &#123;<br>    name: <span class="hljs-string">&quot;Cherry&quot;</span>,<br>    fn : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);      <span class="hljs-comment">// Cherry</span><br>    &#125;<br>&#125;<br><span class="hljs-built_in">window</span>.a.fn();<br></code></pre></td></tr></table></figure><p>这里打印 <code>Cherry</code> 的原因也是因为刚刚那句话“<span class="label label-primary">this 永远指向最后调用它所在函数的那个对象</span>”，最后调用它的对象仍然是对象 <code>a</code>。</p><p>我们再来看一下这个例子：<br>例 5：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;windowsName&quot;</span>;<br><span class="hljs-keyword">var</span> a = &#123;<br>    <span class="hljs-comment">// name: &quot;Cherry&quot;,</span><br>    fn : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);      <span class="hljs-comment">// undefined</span><br>    &#125;<br>&#125;<br><span class="hljs-built_in">window</span>.a.fn();<br></code></pre></td></tr></table></figure><p>这里为什么会打印 <code>undefined</code> 呢？这是因为正如刚刚所描述的那样，调用 <code>fn</code> 的是 <code>a</code> 对象，也就是说 <code>fn</code> 的内部的 <code>this</code> 是对象 <code>a</code>，而对象 <code>a</code> 中并没有对 <code>name</code> 进行定义，所以 <code>log</code> 的 <code>this.name</code> 的值是 <code>undefined</code>。</p><p>这个例子还是说明了：<span class="label label-primary">this 永远指向最后调用它所在函数的那个对象</span>，因为最后调用 <code>fn</code> 的对象是 <code>a</code>，所以就算 <code>a</code> 中没有 <code>name</code> 这个属性，也不会继续向上一个对象寻找 <code>this.name</code>，而是直接输出 <code>undefined</code>。</p><p>再来看一个比较坑的例子：<br>例 6：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;windowsName&quot;</span>;<br><span class="hljs-keyword">var</span> a = &#123;<br>    name : <span class="hljs-literal">null</span>,<br>    <span class="hljs-comment">// name: &quot;Cherry&quot;,</span><br>    fn : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);      <span class="hljs-comment">// windowsName</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> f = a.fn;<br>f();<br></code></pre></td></tr></table></figure><p>这里你可能会有疑问，为什么不是 <code>Cherry</code>，这是因为虽然将 <code>a</code> 对象的 <code>fn</code> 方法赋值给变量 <code>f</code> 了，但是<code>没有调用</code>，再接着跟我念这一句话：“<span class="label label-primary">this 永远指向最后调用它所在函数的那个对象</span>”，由于刚刚的 <code>f</code> 并没有调用，所以 <code>fn()</code> 最后仍然是被 <code>window</code> 调用的。所以 <code>this</code> 指向的也就是 <code>window</code>。</p><p>由以上五个例子我们可以看出，<code>this</code> 的指向并不是在创建的时候就可以确定的，在 <code>es5</code> 中，永远是<span class="label label-primary">this 永远指向最后调用它所在函数的那个对象</span>。</p><h3 id="使用构造函数调用函数"><a href="#使用构造函数调用函数" class="headerlink" title="使用构造函数调用函数"></a>使用构造函数调用函数</h3><blockquote><p>如果函数调用前使用了 <code>new</code> 关键字, 则是调用了构造函数。这看起来就像创建了新的函数，但实际上 <code>JavaScript</code> 函数是重新创建的对象。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 构造函数:</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>(<span class="hljs-params">arg1, arg2</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.firstName = arg1;<br>    <span class="hljs-built_in">this</span>.lastName  = arg2;<br>&#125;<br><br><span class="hljs-comment">// This    creates a new object</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> myFunction(<span class="hljs-string">&quot;Li&quot;</span>,<span class="hljs-string">&quot;Cherry&quot;</span>);<br>a.lastName;                             <span class="hljs-comment">// 返回 &quot;Cherry&quot;</span><br></code></pre></td></tr></table></figure><p>这就有要说另一个面试经典问题：new 的过程了，(ಥ_ಥ)</p><p>这里就简单的来看一下 new 的过程吧：</p><p>伪代码表示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> myFunction(<span class="hljs-string">&quot;Li&quot;</span>,<span class="hljs-string">&quot;Cherry&quot;</span>);<br><br><span class="hljs-keyword">new</span> myFunction&#123;<br>    <span class="hljs-keyword">var</span> obj = &#123;&#125;;<br>    obj.__proto__ = myFunction.prototype;<br>    <span class="hljs-keyword">var</span> result = myFunction.call(obj,<span class="hljs-string">&quot;Li&quot;</span>,<span class="hljs-string">&quot;Cherry&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> result === <span class="hljs-string">&#x27;obj&#x27;</span>? result : obj;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>创建一个空对象 <code>obj</code>;</li><li>将新创建的空对象的隐式原型指向其构造函数的显示原型。</li><li>使用 <code>call</code> 改变 <code>this</code> 的指向</li><li>如果无返回值或者返回一个非对象值，则将 <code>obj</code> 返回作为新对象；如果返回值是一个新对象的话那么直接直接返回该对象。<br>所以我们可以看到，在 <code>new</code> 的过程中，我们是使用 <code>call</code> 改变了 <code>this</code> 的指向。</li></ol><h3 id="作为函数方法调用函数"><a href="#作为函数方法调用函数" class="headerlink" title="作为函数方法调用函数"></a>作为函数方法调用函数</h3><blockquote><p>在 <code>JavaScript</code> 中, 函数是对象。<code>JavaScript</code> 函数有它的属性和方法。<code>call()</code> 和 <code>apply()</code> 是预定义的函数方法。 两个方法可用于调用函数，两个方法的第一个参数必须是对象本身。 在 <code>JavaScript</code> 严格模式(strict mode)下, 在调用函数时第一个参数会成为 <code>this</code> 的值， 即使该参数不是一个对象。在 <code>JavaScript</code> 非严格模式(non-strict mode)下, 如果第一个参数的值是 <code>null</code> 或 <code>undefined</code>, 它将使用全局对象替代。</p></blockquote><p>例7：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;windowsName&quot;</span>;<br><br><span class="hljs-keyword">var</span> a = &#123;<br>    name : <span class="hljs-string">&quot;Cherry&quot;</span>,<br><br>    func1: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)     <br>    &#125;,<br><br>    func2: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.func1()<br>        &#125;,<span class="hljs-number">100</span> );<br>    &#125;<br><br>&#125;;<br><br>a.func2()     <span class="hljs-comment">// this.func1 is not a function</span><br></code></pre></td></tr></table></figure><p>这个简单一点的理解可以理解为“<span class="label label-primary">匿名函数的 this 永远指向 window</span>”，你可以这样想，还是那句话<span class="label label-primary">this 永远指向最后调用它所在函数的那个对象</span>，那么我们就来找最后调用匿名函数的对象，这就很尴尬了，因为匿名函数名字啊，笑哭，所以我们是没有办法被其他对象调用匿名函数的。所以说 <span class="label label-primary">匿名函数的 this 永远指向 window</span>。</p><p>如果这个时候你要问，那匿名函数都是怎么定义的，首先，我们通常写的匿名函数都是自执行的，就是在匿名函数后面加 <code>()</code> 让其自执行。其次就是虽然匿名函数不能被其他对象调用，但是可以被其他函数调用啊，比如例7中的 <code>setTimeout</code>。</p><h2 id="怎么改变-this-的指向"><a href="#怎么改变-this-的指向" class="headerlink" title="怎么改变 this 的指向"></a>怎么改变 this 的指向</h2><p>改变 <code>this</code> 的指向我总结有以下几种方法：</p><ul><li>使用 <code>ES6</code> 的箭头函数</li><li>在函数内部使用 <code>_this = this</code></li><li>使用 <code>apply</code>、<code>call</code>、<code>bind</code></li><li><code>new</code> 实例化一个对象</li></ul><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>如例7中所示，在不使用箭头函数的情况下，是会报错的，因为最后调用 <code>setTimeout</code> 的对象是 <code>window</code>，但是在 <code>window</code> 中并没有 <code>func1</code> 函数。</p><p>我们在改变 <code>this</code> 指向这一节将把这个例子作为 <code>demo</code> 进行改造。</p><p>众所周知，<code>ES6</code> 的箭头函数是可以避免 <code>ES5</code> 中使用 <code>this</code> 的坑的。箭头函数的 <code>this</code> 始终指向函数定义时的 <code>this</code>，而非执行时。箭头函数需要记着这句话：</p><blockquote><p>箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则，this 为 undefined。</p></blockquote><p>例8：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;windowsName&quot;</span>;<br><br><span class="hljs-keyword">var</span> a = &#123;<br>    name : <span class="hljs-string">&quot;Cherry&quot;</span>,<br><br>    func1: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)     <br>    &#125;,<br><br>    func2: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>( <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-built_in">this</span>.func1()<br>        &#125;,<span class="hljs-number">100</span>);<br>    &#125;<br>&#125;;<br><br>a.func2()     <span class="hljs-comment">// Cherry</span><br></code></pre></td></tr></table></figure><h3 id="在函数内部使用-this-this"><a href="#在函数内部使用-this-this" class="headerlink" title="在函数内部使用 _this = this"></a>在函数内部使用 _this = this</h3><p>如果不使用 <code>ES6</code>，那么这种方式应该是最简单的不会出错的方式了，我们是先将调用这个函数的对象保存在变量 <code>_this</code> 中，然后在函数中都使用这个 <code>_this</code>，这样 <code>_this</code> 就不会改变了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;windowsName&quot;</span>;<br><br><span class="hljs-keyword">var</span> a = &#123;<br><br>    name : <span class="hljs-string">&quot;Cherry&quot;</span>,<br><br>    func1: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)     <br>    &#125;,<br><br>    func2: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-built_in">setTimeout</span>( <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            _this.func1()<br>        &#125;,<span class="hljs-number">100</span>);<br>    &#125;<br>&#125;;<br><br>a.func2()       <span class="hljs-comment">// Cherry</span><br></code></pre></td></tr></table></figure><p>这个例子中，在 <code>func2</code> 中，首先设置 <code>var _this = this</code>;，这里的 <code>this</code> 是调用 <code>func2</code> 的对象 <code>a</code>，为了防止在 <code>func2</code> 中的 <code>setTimeout</code> 被 <code>window</code> 调用而导致的在 <code>setTimeout</code> 中的 <code>this</code> 为 <code>window</code>。我们将 <code>this</code>(指向变量 <code>a</code>) 赋值给一个变量 <code>_this</code>，这样，在 <code>func2</code> 中我们使用 <code>_this</code> 就是指向对象 <code>a</code> 了。</p><h3 id="使用-apply、call、bind"><a href="#使用-apply、call、bind" class="headerlink" title="使用 apply、call、bind"></a>使用 apply、call、bind</h3><p>使用 <code>apply</code>、<code>call</code>、<code>bind</code> 函数也是可以改变 <code>this</code> 的指向的，原理稍后再讲，我们先来看一下是怎么实现的：</p><p><strong>使用 apply</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = &#123;<br>    name : <span class="hljs-string">&quot;Cherry&quot;</span>,<br><br>    func1: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)<br>    &#125;,<br><br>    func2: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.func1()<br>        &#125;.apply(a),<span class="hljs-number">100</span>);<br>    &#125;<br><br>&#125;;<br><br>a.func2()            <span class="hljs-comment">// Cherry</span><br></code></pre></td></tr></table></figure><p><strong>使用 call</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = &#123;<br>    name : <span class="hljs-string">&quot;Cherry&quot;</span>,<br><br>    func1: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)<br>    &#125;,<br><br>    func2: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.func1()<br>        &#125;.call(a),<span class="hljs-number">100</span>);<br>    &#125;<br><br>&#125;;<br><br>a.func2()            <span class="hljs-comment">// Cherry</span><br></code></pre></td></tr></table></figure><p><strong>使用 bind</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = &#123;<br>    name : <span class="hljs-string">&quot;Cherry&quot;</span>,<br><br>    func1: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)<br>    &#125;,<br><br>    func2: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">this</span>.func1()<br>        &#125;.bind(a)(),<span class="hljs-number">100</span>);<br>    &#125;<br><br>&#125;;<br><br>a.func2()            <span class="hljs-comment">// Cherry</span><br></code></pre></td></tr></table></figure><h3 id="apply、call、bind-区别"><a href="#apply、call、bind-区别" class="headerlink" title="apply、call、bind 区别"></a>apply、call、bind 区别</h3><p>刚刚我们已经介绍了 <code>apply</code>、<code>call</code>、<code>bind</code> 都是可以改变 <code>this</code> 的指向的，但是这三个函数稍有不同。<br><code>apply()</code> 方法调用一个函数, 其具有一个指定的<code>this</code>值，以及作为一个<code>数组</code>（或<code>类似数组的对象</code>）提供的参数； <code>apply</code> 和 <code>call</code> 的区别是 <code>call</code> 方法接受的是若干个参数列表，而 <code>apply</code> 接收的是一个包含多个参数的数组。</p><p>apply:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a =&#123;<br>    name : <span class="hljs-string">&quot;Cherry&quot;</span>,<br>    fn : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a,b</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log( a + b)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> b = a.fn;<br>b.apply(a,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])     <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p>call:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a =&#123;<br>    name : <span class="hljs-string">&quot;Cherry&quot;</span>,<br>    fn : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a,b</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log( a + b)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> b = a.fn;<br>b.call(a,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)       <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p>我们先来将刚刚的例子使用 bind 试一下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a =&#123;<br>    name : <span class="hljs-string">&quot;Cherry&quot;</span>,<br>    fn : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a,b</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log( a + b)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> b = a.fn;<br>b.bind(a,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p><code>bind()</code>方法创建一个新的函数, 当被调用时，将其<code>this</code>关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。所以我们可以看出，<code>bind</code> 是创建一个新的函数，我们必须要手动去调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a =&#123;<br>    name : <span class="hljs-string">&quot;Cherry&quot;</span>,<br>    fn : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a,b</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log( a + b)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> b = a.fn;<br>b.bind(a,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)()           <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>关于<code>this</code>、<code>apply</code>、<code>call</code>、<code>bind</code>的知识的掌握还需要经常地去查看熟悉。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://juejin.cn/post/6844903496253177863">this、apply、call、bind</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript深入之从原型到原型链到继承</title>
    <link href="/2021/03/05/js-prototype/"/>
    <url>/2021/03/05/js-prototype/</url>
    
    <content type="html"><![CDATA[<h2 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h2><h3 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h3><p>我们先使用<code>构造函数</code>创建一个对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br>person.name = <span class="hljs-string">&#x27;Kevin&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(person.name) <span class="hljs-comment">// Kevin</span><br></code></pre></td></tr></table></figure><p>在这个例子中，<code>Person</code> 就是一个<code>构造函数</code>，我们使用 <code>new</code> 创建了一个实例对象 <code>person</code>。说明：能用<code>new</code>实例化对象的函数就是<code>构造函数</code>。很简单吧，接下来进入正题：</p><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><p>每个函数都有一个 <code>prototype</code> 属性，就是我们经常在各种例子中看到的那个 <code>prototype</code> ，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><span class="hljs-comment">// 虽然写在注释里，但是你要注意：</span><br><span class="hljs-comment">// prototype是函数才会有的属性</span><br>Person.prototype.name = <span class="hljs-string">&#x27;Kevin&#x27;</span>;<br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-built_in">console</span>.log(person1.name) <span class="hljs-comment">// Kevin</span><br><span class="hljs-built_in">console</span>.log(person2.name) <span class="hljs-comment">// Kevin</span><br></code></pre></td></tr></table></figure><p>那这个函数的 <code>prototype</code> 属性到底指向的是什么呢？是这个函数的原型吗？</p><p>其实，函数的 <code>prototype</code> 属性指向了一个对象，这个对象正是调用该构造函数而创建的<code>实例</code>的<code>原型</code>，也就是这个例子中的 <code>person1</code> 和 <code>person2</code> 的原型。</p><p>那什么是原型呢？你可以这样理解：每一个<code>JavaScript对象</code>(null除外)在创建的时候就会与之<code>关联</code>另一个<code>对象</code>，这个对象就是我们所说的<code>原型</code>，每一个对象都会从原型<code>&quot;继承&quot;</code>属性。</p><p>让我们用一张图表示<code>构造函数</code>和<code>实例原型</code>之间的关系：<br><img src="prototype-1.jpg"><br>在这张图中我们用 <code>Object.prototype </code>表示实例原型。</p><p>那么我们该怎么表示<code>实例</code>与<code>实例原型</code>，也就是 <code>person</code> 和 <code>Person.prototype</code> 之间的关系呢，这时候我们就要讲到第二个属性：</p><h3 id="proto"><a href="#proto" class="headerlink" title="proto"></a><strong>proto</strong></h3><p>这是每一个<code>JavaScript</code>对象(除了 <code>null</code> )都具有的一个属性，叫<code>__proto__</code>，这个属性会指向该对象的<code>原型</code>。</p><p>为了证明这一点,我们可以在火狐或者谷歌中输入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-built_in">console</span>.log(person.__proto__ === Person.prototype); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>于是我们更新下关系图：<br><img src="prototype-2.jpg"><br>既然<code>实例对象</code>和<code>构造函数</code>都可以指向<code>原型</code>，那么<code>原型</code>是否有属性<code>指向</code>构造函数或者实例呢？</p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>指向实例倒是没有，因为一个构造函数可以生成多个实例，但是<code>原型</code>指向<code>构造函数</code>倒是有的，这就要讲到第三个属性：<code>constructor</code>，每个原型都有一个 <code>constructor</code> 属性指向<code>关联</code>的<code>构造函数</code>。</p><p>为了验证这一点，我们可以尝试：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><span class="hljs-built_in">console</span>.log(Person === Person.prototype.constructor); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>所以再更新下关系图：<br><img src="prototype-3.jpg"><br>综上我们已经得出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br><br><span class="hljs-built_in">console</span>.log(person.__proto__ == Person.prototype) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(Person.prototype.constructor == Person) <span class="hljs-comment">// true</span><br><span class="hljs-comment">// 顺便学习一个ES5的方法,可以获得对象的原型</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.getPrototypeOf(person) === Person.prototype) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>了解了构造函数、实例原型、和实例之间的关系，接下来我们讲讲实例和原型的关系：</p><h3 id="实例与原型"><a href="#实例与原型" class="headerlink" title="实例与原型"></a>实例与原型</h3><p>当读取实例的属性时，如果<code>找不到</code>，就会查找与对象关联的<code>原型</code>中的<code>属性</code>，如果还<code>查不到</code>，就去找<code>原型的原型</code>，一直找到<code>最顶层</code>为止。</p><p>举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><br>Person.prototype.name = <span class="hljs-string">&#x27;Kevin&#x27;</span>;<br><br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br><br>person.name = <span class="hljs-string">&#x27;Daisy&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(person.name) <span class="hljs-comment">// Daisy</span><br><br><span class="hljs-keyword">delete</span> person.name;<br><span class="hljs-built_in">console</span>.log(person.name) <span class="hljs-comment">// Kevin</span><br></code></pre></td></tr></table></figure><p>在这个例子中，我们给实例对象 <code>person</code> 添加了 <code>name</code> 属性，当我们打印 <code>person.name</code> 的时候，结果自然为 <code>Daisy</code>。<br><img src="prototype-4.jpg"><br>但是当我们删除了 <code>person</code> 的 <code>name</code> 属性时，读取 <code>person.name</code>，从 <code>person</code> 对象中找不到 <code>name</code> 属性就会从 <code>person</code> 的原型也就是 <code>person.__proto__</code> ，也就是 <code>Person.prototype</code>中查找，幸运的是我们找到了 <code>name</code> 属性，结果为 <code>Kevin</code>。<br><img src="prototype-5.jpg"><br>但是万一还没有找到呢？原型的原型又是什么呢？</p><h3 id="原型的原型"><a href="#原型的原型" class="headerlink" title="原型的原型"></a>原型的原型</h3><p>在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>obj.name = <span class="hljs-string">&#x27;Kevin&#x27;</span><br><span class="hljs-built_in">console</span>.log(obj.name) <span class="hljs-comment">// Kevin</span><br></code></pre></td></tr></table></figure><p>其实原型对象就是通过 <code>Object</code> 构造函数生成的，结合之前所讲，实例的 <code>__proto__</code> 指向构造函数的 <code>prototype</code> ，所以我们再更新下关系图：<br><img src="prototype-6.jpg"></p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>那 <code>Object.prototype</code> 的原型呢？<code>null</code>，我们可以打印：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.prototype.__proto__ === <span class="hljs-literal">null</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>然而 <code>null</code> 究竟代表了什么呢？<code>null</code> 表示“没有对象”，即该处不应该有值。</p><p>所以 <code>Object.prototype.__proto__</code> 的值为 <code>null</code> 跟 <code>Object.prototype</code> 没有原型，其实表达了一个意思。所以查找属性的时候查到 <code>Object.prototype</code> 就可以停止查找了。</p><p>最后一张关系图也可以更新为：<br><img src="prototype-7.jpg"><br>顺便还要说一下，图中由相互关联的原型组成的链状结构就是<code>原型链</code>，也就是<code>蓝色</code>的这条线。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>最后，补充三点大家可能不会注意的地方：</p><p><strong>constructor</strong><br>首先是 <code>constructor</code> 属性，我们看个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();<br><span class="hljs-built_in">console</span>.log(person.constructor === Person); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>当获取 <code>person.constructor</code> 时，其实 <code>person</code> 中并没有 <code>constructor</code> 属性,当不能读取到<code>constructor</code> 属性时，会从 <code>person</code> 的原型也就是 <code>Person.prototype</code> 中读取，正好原型中有该属性，所以：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">person.constructor === Person.prototype.constructor<br></code></pre></td></tr></table></figure><p><strong><strong>proto</strong></strong><br>其次是 <code>__proto__</code> ，绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 <code>Person.prototype</code> 中，实际上，它是来自于 <code>Object.prototype</code> ，与其说是一个属性，不如说是一个 <code>getter/setter</code>，当使用 <code>obj.__proto__</code> 时，可以理解成返回了<code> Object.getPrototypeOf(obj)</code>。</p><p><strong>真的是继承吗？</strong><br>最后是关于继承，前面我们讲到“<code>每一个对象都会从原型‘继承’属性</code>”，实际上，继承是一个十分具有迷惑性的说法，引用《你不知道的JavaScript》中的话，就是：</p><p>继承意味着复制操作，然而 JavaScript 默认并<code>不会复制</code>对象的属性，相反，JavaScript 只是在两个对象之间创建一个<code>关联</code>，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，<code>委托</code>的说法反而更准确些。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Parent</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&#x27;kevin&#x27;</span>;<br>&#125;<br><br>Parent.prototype.getName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Child</span> (<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><br>Child.prototype = <span class="hljs-keyword">new</span> Parent();<br><br><span class="hljs-keyword">var</span> child1 = <span class="hljs-keyword">new</span> Child();<br><br><span class="hljs-built_in">console</span>.log(child1.getName()) <span class="hljs-comment">// kevin</span><br></code></pre></td></tr></table></figure><p>画个图表示一下：<br><img src="prototype-8.jpg"><br>问题：<br>1.引用类型的属性被所有实例<code>共享</code>，举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Parent</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.names = [<span class="hljs-string">&#x27;kevin&#x27;</span>, <span class="hljs-string">&#x27;daisy&#x27;</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Child</span> (<span class="hljs-params"></span>) </span>&#123;<br><br>&#125;<br><br>Child.prototype = <span class="hljs-keyword">new</span> Parent();<br><br><span class="hljs-keyword">var</span> child1 = <span class="hljs-keyword">new</span> Child();<br><br>child1.names.push(<span class="hljs-string">&#x27;yayu&#x27;</span>);<br><br><span class="hljs-built_in">console</span>.log(child1.names); <span class="hljs-comment">// [&quot;kevin&quot;, &quot;daisy&quot;, &quot;yayu&quot;]</span><br><br><span class="hljs-keyword">var</span> child2 = <span class="hljs-keyword">new</span> Child();<br><br><span class="hljs-built_in">console</span>.log(child2.names); <span class="hljs-comment">// [&quot;kevin&quot;, &quot;daisy&quot;, &quot;yayu&quot;]</span><br></code></pre></td></tr></table></figure><p>2.在创建 <code>Child</code> 的实例时，不能向<code>Parent</code>传参</p><h3 id="借用构造函数-经典继承"><a href="#借用构造函数-经典继承" class="headerlink" title="借用构造函数(经典继承)"></a>借用构造函数(经典继承)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Parent</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.names = [<span class="hljs-string">&#x27;kevin&#x27;</span>, <span class="hljs-string">&#x27;daisy&#x27;</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Child</span> (<span class="hljs-params"></span>) </span>&#123;<br>    Parent.call(<span class="hljs-built_in">this</span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> child1 = <span class="hljs-keyword">new</span> Child();<br><br>child1.names.push(<span class="hljs-string">&#x27;yayu&#x27;</span>);<br><br><span class="hljs-built_in">console</span>.log(child1.names); <span class="hljs-comment">// [&quot;kevin&quot;, &quot;daisy&quot;, &quot;yayu&quot;]</span><br><br><span class="hljs-keyword">var</span> child2 = <span class="hljs-keyword">new</span> Child();<br><br><span class="hljs-built_in">console</span>.log(child2.names); <span class="hljs-comment">// [&quot;kevin&quot;, &quot;daisy&quot;]</span><br></code></pre></td></tr></table></figure><p>再来一张图：<br><img src="prototype-9.jpg"><br>优点：</p><ol><li>避免了引用类型的属性被所有实例共享</li><li>可以在 <code>Child</code> 中向 <code>Parent</code> 传参</li></ol><p>举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Parent</span> (<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Child</span> (<span class="hljs-params">name</span>) </span>&#123;<br>    Parent.call(<span class="hljs-built_in">this</span>, name);<br>&#125;<br><br><span class="hljs-keyword">var</span> child1 = <span class="hljs-keyword">new</span> Child(<span class="hljs-string">&#x27;kevin&#x27;</span>);<br><br><span class="hljs-built_in">console</span>.log(child1.name); <span class="hljs-comment">// kevin</span><br><br><span class="hljs-keyword">var</span> child2 = <span class="hljs-keyword">new</span> Child(<span class="hljs-string">&#x27;daisy&#x27;</span>);<br><br><span class="hljs-built_in">console</span>.log(child2.name); <span class="hljs-comment">// daisy</span><br></code></pre></td></tr></table></figure><p>缺点：<br>方法都在构造函数中定义，每次创建实例都会创建一遍方法。</p><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>原型链继承和经典继承双剑合璧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Parent</span> (<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>];<br>&#125;<br><br>Parent.prototype.getName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Child</span> (<span class="hljs-params">name, age</span>) </span>&#123;<br><br>    Parent.call(<span class="hljs-built_in">this</span>, name);<br>    <br>    <span class="hljs-built_in">this</span>.age = age;<br><br>&#125;<br><br>Child.prototype = <span class="hljs-keyword">new</span> Parent();<br>Child.prototype.constructor = Child;<br><br><span class="hljs-keyword">var</span> child1 = <span class="hljs-keyword">new</span> Child(<span class="hljs-string">&#x27;kevin&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>);<br><br>child1.colors.push(<span class="hljs-string">&#x27;black&#x27;</span>);<br><br><span class="hljs-built_in">console</span>.log(child1.name); <span class="hljs-comment">// kevin</span><br><span class="hljs-built_in">console</span>.log(child1.age); <span class="hljs-comment">// 18</span><br><span class="hljs-built_in">console</span>.log(child1.colors); <span class="hljs-comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;black&quot;]</span><br><br><span class="hljs-keyword">var</span> child2 = <span class="hljs-keyword">new</span> Child(<span class="hljs-string">&#x27;daisy&#x27;</span>, <span class="hljs-string">&#x27;20&#x27;</span>);<br><br><span class="hljs-built_in">console</span>.log(child2.name); <span class="hljs-comment">// daisy</span><br><span class="hljs-built_in">console</span>.log(child2.age); <span class="hljs-comment">// 20</span><br><span class="hljs-built_in">console</span>.log(child2.colors); <span class="hljs-comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;]</span><br></code></pre></td></tr></table></figure><p>再来一张图：<br><img src="prototype-10.jpg"><br>组合继承最大的缺点是会调用两次父构造函数。</p><p>一次是设置子类型实例的原型的时候：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">Child.prototype = <span class="hljs-keyword">new</span> Parent();<br></code></pre></td></tr></table></figure><p>一次在创建子类型实例的时候：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> child1 = <span class="hljs-keyword">new</span> Child(<span class="hljs-string">&#x27;kevin&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>);<br></code></pre></td></tr></table></figure><p>回想下 <code>new</code> 的模拟实现，其实在这句中，我们会执行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">Parent.call(<span class="hljs-built_in">this</span>, name);<br></code></pre></td></tr></table></figure><p>在这里，我们又会调用了一次 <code>Parent</code> 构造函数。</p><p>所以，在这个例子中，如果我们打印 <code>child1</code> 对象，我们会发现 <code>Child.prototype</code> 和 <code>child1</code> 都有一个属性为<code>colors</code>，属性值为<code>[&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;]</code>。</p><p>那么我们该如何精益求精，避免这一次重复调用呢？</p><p>如果我们不使用 <code>Child.prototype = new Parent()</code> ，而是间接的让 <code>Child.prototype</code> 访问到 <code>Parent.prototype</code> 呢？</p><h3 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createObj</span>(<span class="hljs-params">o</span>) </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>    F.prototype = o;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> F();<br>&#125;<br></code></pre></td></tr></table></figure><p>就是 <code>ES5 Object.create</code> 的模拟实现，将传入的对象作为创建的对象的原型。</p><p>缺点：<br>包含引用类型的属性值始终都会共享相应的值，这点跟原型链继承一样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = &#123;<br>    name: <span class="hljs-string">&#x27;kevin&#x27;</span>,<br>    friends: [<span class="hljs-string">&#x27;daisy&#x27;</span>, <span class="hljs-string">&#x27;kelly&#x27;</span>]<br>&#125;<br><br><span class="hljs-keyword">var</span> person1 = createObj(person);<br><span class="hljs-keyword">var</span> person2 = createObj(person);<br><br>person1.name = <span class="hljs-string">&#x27;person1&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(person2.name); <span class="hljs-comment">// kevin</span><br><br>person1.firends.push(<span class="hljs-string">&#x27;taylor&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(person2.friends); <span class="hljs-comment">// [&quot;daisy&quot;, &quot;kelly&quot;, &quot;taylor&quot;]</span><br></code></pre></td></tr></table></figure><p>再来一张图：<br><img src="prototype-11.jpg"><br>注意：修改<code>person1.name</code>的值，<code>person2.name</code>的值并未发生改变，并不是因为<code>person1</code>和<code>person2</code>有独立的 <code>name</code> 值，而是因为<code>person1.name = &#39;person1&#39;</code>，给<code>person1</code>添加了 <code>name</code> 值，并非修改了原型上的 <code>name</code> 值。</p><h3 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h3><p>创建一个仅用于封装继承过程的函数，该函数在内部以某种形式来做增强对象，最后返回对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createObj</span> (<span class="hljs-params">o</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> clone = <span class="hljs-built_in">Object</span>.create(o);<br>    clone.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hi&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> clone;<br>&#125;<br></code></pre></td></tr></table></figure><p>缺点：跟借用构造函数模式一样，每次创建对象都会创建一遍方法。</p><h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><p>预备了上面这俩方法，就是为了引出<code>寄生组合式继承</code>，从而克服<code>组合继承</code>。<br>看看如何实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Parent</span> (<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>];<br>&#125;<br><br>Parent.prototype.getName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Child</span> (<span class="hljs-params">name, age</span>) </span>&#123;<br>    Parent.call(<span class="hljs-built_in">this</span>, name);<br>    <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><br><span class="hljs-comment">// 关键的三步</span><br><span class="hljs-keyword">var</span> F = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;&#125;;<br><br>F.prototype = Parent.prototype;<br><br>Child.prototype = <span class="hljs-keyword">new</span> F();<br><br><br><span class="hljs-keyword">var</span> child1 = <span class="hljs-keyword">new</span> Child(<span class="hljs-string">&#x27;kevin&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>);<br><br><span class="hljs-built_in">console</span>.log(child1);<br></code></pre></td></tr></table></figure><p>再来一张图：<br><img src="prototype-12.jpg"><br>最后我们封装一下这个继承方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">object</span>(<span class="hljs-params">o</span>) </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>) </span>&#123;&#125;<br>    F.prototype = o;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> F();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">prototype</span>(<span class="hljs-params">child, parent</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> prototype = object(parent.prototype);<br>    prototype.constructor = child;<br>    child.prototype = prototype;<br>&#125;<br><br><span class="hljs-comment">// 当我们使用的时候：</span><br>prototype(Child, Parent);<br></code></pre></td></tr></table></figure><p>最后来一张图：<br><img src="prototype-13.jpg"><br>引用《JavaScript高级程序设计》中对寄生组合式继承的夸赞就是：<br>这种方式的高效率体现它只调用了一次 <code>Parent</code> 构造函数，并且因此避免了在 <code>Parent.prototype</code> 上面创建不必要的、多余的属性。与此同时，原型链还能保持不变；因此，还能够正常使用 <code>instanceof</code> 和 <code>isPrototypeOf</code>。开发人员普遍认为<code>寄生组合式继承</code>是引用类型<code>最理想</code>的继承范式。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>原型和原型链以及继承就先介绍这么多，后续如果有写错的地方还待检查和修改:D</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Js基础知识加强排</title>
    <link href="/2021/03/03/js-enhance/"/>
    <url>/2021/03/03/js-enhance/</url>
    
    <content type="html"><![CDATA[<h2 id="手写代码"><a href="#手写代码" class="headerlink" title="手写代码"></a>手写代码</h2><h3 id="实现函数能够深度克隆基本类型"><a href="#实现函数能够深度克隆基本类型" class="headerlink" title="实现函数能够深度克隆基本类型"></a>实现函数能够深度克隆基本类型</h3><p><code>JS</code> 中的<code>浅拷贝</code>与<code>深拷贝</code>，只是针对复杂数据类型（<code>Object</code>，<code>Array</code>）的复制问题。<code>浅拷贝</code>与<code>深拷贝</code>都可以实现在已有对象上再生出一份的作用。但是对象的实例是存储在<code>堆内存</code>中然后通过一个<code>引用值</code>去操作对象，由此拷贝的时候就存在两种情况了：<code>拷贝引用</code>和<code>拷贝实例</code>，这也是<code>浅拷贝</code>和<code>深拷贝</code>的区别。注：有的数组自带方法是局限性的，例如<code>slice()</code>、<code>concat()</code>，仅适用于对不包含引用对象的<code>一维数组</code>的深拷贝。</p><p><strong>数组的深拷贝</strong></p><ul><li><code>slice()</code>（有上述局限）</li><li><code>concat()</code>（有上述局限）</li><li><code>扩展运算符</code>（有上述局限）</li></ul><p><strong>对象的深拷贝</strong></p><ul><li>利用 <code>JSON</code> 对象中的 <code>parse</code> 和 <code>stringify</code></li><li>扩展运算符（有上述局限）</li><li>利用<code>递归</code>来实现每一层都重新创建对象并赋值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepCopy</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>    <span class="hljs-keyword">var</span> result = obj.constructor === <span class="hljs-built_in">Array</span> ? [] : &#123;&#125;;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> obj) &#123;<br>      result[i] = <span class="hljs-keyword">typeof</span> obj[i] === <span class="hljs-string">&#x27;object&#x27;</span> ? deepCopy(obj[i]) : obj[i];<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">var</span> result = obj;<br>  &#125;<br>  <br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="函数中的arguments是数组吗？类数组转数组的方法了解一下？"><a href="#函数中的arguments是数组吗？类数组转数组的方法了解一下？" class="headerlink" title="函数中的arguments是数组吗？类数组转数组的方法了解一下？"></a>函数中的arguments是数组吗？类数组转数组的方法了解一下？</h3><p>函数中的<code>arguments</code>是类数组:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">info</span>(<span class="hljs-params">name,age,address</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">arguments</span><br>&#125;<br><span class="hljs-keyword">let</span> arg = info(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><span class="hljs-built_in">console</span>.log(arg);<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-number">0</span>:<span class="hljs-number">1</span>,<br>    <span class="hljs-number">1</span>:<span class="hljs-number">2</span>,<br>    <span class="hljs-number">2</span>:<span class="hljs-number">3</span>,<br>    length:<span class="hljs-number">3</span><br>&#125;<br></code></pre></td></tr></table></figure><p>类数组转数组的方法：</p><ul><li>扩展运算符</li><li><code>Array.from</code></li><li><code>Array.prototype.slice.apply(arguments)</code></li></ul><h3 id="原型、原型链、继承"><a href="#原型、原型链、继承" class="headerlink" title="原型、原型链、继承"></a>原型、原型链、继承</h3><p>详见<a href="https://van-yo.github.io/2021/03/05/js-prototype/">JavaScript深入之从原型到原型链到继承</a></p><h3 id="ES5中this、apply、call、bind问题"><a href="#ES5中this、apply、call、bind问题" class="headerlink" title="ES5中this、apply、call、bind问题"></a>ES5中this、apply、call、bind问题</h3><p>详见<a href="https://van-yo.github.io/2021/03/09/js-this-bind-call-apply/">Js中关于this、apply、call、bind的深入探讨</a></p><h3 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h3><p>详见<a href="https://juejin.cn/post/6844904050543034376">「硬核JS」一次搞懂JS运行机制</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mongodb学习指南</title>
    <link href="/2021/02/26/mongodb-learning-guide/"/>
    <url>/2021/02/26/mongodb-learning-guide/</url>
    
    <content type="html"><![CDATA[<h2 id="权限认证"><a href="#权限认证" class="headerlink" title="权限认证"></a>权限认证</h2><p><code>MongoDB</code>刚完成安装的时候，默认是<code>不需要</code>进行用户验证，直接可以连接mongod服务的实例，对数据库进行各种<code>读写</code>操作，执行各种命令，这样的好处是方便进行测试。在<code>生产环境</code>部署<code>MongoDB</code>服务实例时，就必须开启<code>安全认证</code>，为数据库连接设置管理账号。</p><h3 id="第一步：创建超级管理用户"><a href="#第一步：创建超级管理用户" class="headerlink" title="第一步：创建超级管理用户"></a>第一步：创建超级管理用户</h3><p>在开启安全认证之前，我们首先要建立一个<code>超级管理员账号</code>，可进行<code>其它用户</code>的<code>添加</code>，<code>删除</code>，<code>修改</code>操作。<code>root</code>角色的用户可以做<code>MongoDB</code>的各种操作，没有任何限制，类似于<code>mysql</code>的<code>root</code>账号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 切换到admin数据库</span><br>use admin<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建超级管理用户</span><br>db.createUser(&#123;<br>  user:<span class="hljs-string">&#x27;admin&#x27;</span>,<br>  pwd:<span class="hljs-string">&#x27;123456&#x27;</span>,<br>  roles:[&#123;<span class="hljs-attr">role</span>:<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-attr">db</span>:<span class="hljs-string">&#x27;admin&#x27;</span>&#125;]<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="第二步：修改mongodb数据库配置文件"><a href="#第二步：修改mongodb数据库配置文件" class="headerlink" title="第二步：修改mongodb数据库配置文件"></a>第二步：修改mongodb数据库配置文件</h3><p>文件路径：<code>mongodb安装目录\bin\mongod.cfg</code>，找到<code>#security</code>，改成如下配置，表示要开启访问控制。</p><p><strong>注意</strong>：最好是完全复制下面代码，因为<code>mongodb</code>配置文件严格对待<code>空格符</code>和<code>缩进符</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">security:<br>  authorization: enabled<br></code></pre></td></tr></table></figure><h3 id="第三步：重新启动mongodb"><a href="#第三步：重新启动mongodb" class="headerlink" title="第三步：重新启动mongodb"></a>第三步：重新启动mongodb</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 快捷键win+R</span><br><span class="hljs-comment">// 输入services.msc</span><br><span class="hljs-comment">// 找到mongodb服务右击重启</span><br></code></pre></td></tr></table></figure><h3 id="第四步：用超级管理员账户链接数据库"><a href="#第四步：用超级管理员账户链接数据库" class="headerlink" title="第四步：用超级管理员账户链接数据库"></a>第四步：用超级管理员账户链接数据库</h3><p>重启后若再次输入<code>mongo</code>连接数据库<code>show dbs</code>时就会报错或者不显示数据库列表了，必须使用<code>账号密码</code>进行登录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 本地连接：</span><br>mongo admin -u 用户名 -p 密码<br><span class="hljs-comment">// 远程数据库连接，例如：</span><br>mongo <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.200</span>:<span class="hljs-number">27017</span>/test -u 用户名 -p 密码<br></code></pre></td></tr></table></figure><h3 id="第五步：给每一个数据库创建一个用户权限"><a href="#第五步：给每一个数据库创建一个用户权限" class="headerlink" title="第五步：给每一个数据库创建一个用户权限"></a>第五步：给每一个数据库创建一个用户权限</h3><p>假如公司来了一个新员工，不能把超级管理员管理权限给他，需要给他一个数据库权限，他只能操作该数据库，不能对其他数据库进行增删改查。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 切换到该数据库</span><br>use eggcms<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建用户权限</span><br>db.createUser(<br>  &#123;<br>    user:<span class="hljs-string">&quot;eggadmin&quot;</span>,<br>    pwd:<span class="hljs-string">&quot;123456&quot;</span>,<br>    roles:[&#123;<span class="hljs-attr">role</span>:<span class="hljs-string">&quot;dbOwner&quot;</span>,<span class="hljs-attr">db</span>:<span class="hljs-string">&quot;eggcms&quot;</span>&#125;]<br>  &#125;<br>)<br></code></pre></td></tr></table></figure><h3 id="node连接数据库的时候需要配置账户密码"><a href="#node连接数据库的时候需要配置账户密码" class="headerlink" title="node连接数据库的时候需要配置账户密码"></a>node连接数据库的时候需要配置账户密码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> url = <span class="hljs-string">&#x27;mongodb://admin:123456@localhost:27017&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">show users   <span class="hljs-comment">// 查看当前库下的用户</span><br>db.dropUser(<span class="hljs-string">&quot;eggadmin&quot;</span>)   <span class="hljs-comment">// 删除用户</span><br>db.updateUser(<span class="hljs-string">&quot;admin&quot;</span>,&#123;<span class="hljs-attr">pwd</span>:<span class="hljs-string">&quot;password&quot;</span>&#125;);    <span class="hljs-comment">//修改用户密码</span><br>db.auth(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>);    <span class="hljs-comment">//密码认证</span><br></code></pre></td></tr></table></figure><h2 id="Nodejs调用Mongodb驱动"><a href="#Nodejs调用Mongodb驱动" class="headerlink" title="Nodejs调用Mongodb驱动"></a>Nodejs调用Mongodb驱动</h2><h3 id="第一步：初始化项目"><a href="#第一步：初始化项目" class="headerlink" title="第一步：初始化项目"></a>第一步：初始化项目</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm init -y<br></code></pre></td></tr></table></figure><h3 id="第二步：安装mongodb包"><a href="#第二步：安装mongodb包" class="headerlink" title="第二步：安装mongodb包"></a>第二步：安装mongodb包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm i mongodb -S<br></code></pre></td></tr></table></figure><h3 id="第三步：连接数据"><a href="#第三步：连接数据" class="headerlink" title="第三步：连接数据"></a>第三步：连接数据</h3><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; MongoClient &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mongodb&quot;</span>);<br><span class="hljs-comment">// 数据库信息：账号密码地址</span><br><span class="hljs-keyword">const</span> uri = <span class="hljs-string">&quot;mongodb://admin:123456@127.0.0.1:27017&quot;</span><br><br><span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> MongoClient(uri,&#123; <span class="hljs-attr">useUnifiedTopology</span>: <span class="hljs-literal">true</span> &#125;);<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 连接</span><br>        <span class="hljs-keyword">await</span> client.connect();<br>        <span class="hljs-comment">// 切换对应的数据库和集合</span><br>        <span class="hljs-keyword">const</span> database = client.db(<span class="hljs-string">&#x27;czschool&#x27;</span>);<br>        <span class="hljs-keyword">const</span> collection = database.collection(<span class="hljs-string">&#x27;teacher&#x27;</span>);<br>        <span class="hljs-comment">// 对应的数据库操作：增删改查</span><br>        <span class="hljs-keyword">const</span> query = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;revan&#x27;</span> &#125;;<br>        <span class="hljs-keyword">const</span> person = <span class="hljs-keyword">await</span> collection.findOne(query);<br>        <span class="hljs-built_in">console</span>.log(person);<br>    &#125;<span class="hljs-keyword">finally</span>&#123;<br>        <span class="hljs-comment">// 关闭数据库连接</span><br>        <span class="hljs-keyword">await</span> client.close()<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 启动</span><br>run().catch(<span class="hljs-built_in">console</span>.dir)<br></code></pre></td></tr></table></figure><h3 id="第四步：启动"><a href="#第四步：启动" class="headerlink" title="第四步：启动"></a>第四步：启动</h3><p>在项目终端输入<code>node app.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">D:\Work\Test\node-server-learning&gt;node app.js<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123; <span class="hljs-attr">_id</span>: 603a0f729ce5d7b58f23fea0,<br>  name: <span class="hljs-string">&#x27;revan&#x27;</span>,<br>  age: <span class="hljs-number">18</span>,<br>  ic_no: <span class="hljs-number">1</span> &#125;<br></code></pre></td></tr></table></figure><h2 id="Mongoose"><a href="#Mongoose" class="headerlink" title="Mongoose"></a>Mongoose</h2><h3 id="第一步：安装"><a href="#第一步：安装" class="headerlink" title="第一步：安装"></a>第一步：安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install mongoose -S<br></code></pre></td></tr></table></figure><h3 id="第二步：配置"><a href="#第二步：配置" class="headerlink" title="第二步：配置"></a>第二步：配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入模块</span><br><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>);<br><br><span class="hljs-comment">// 连接数据</span><br>mongoose.connect(<span class="hljs-string">&#x27;mongodb://czschooladmin:123456@127.0.0.1:27017/czschool&#x27;</span>,&#123;<br>    useNewUrlParser: <span class="hljs-literal">true</span>,<br>    useUnifiedTopology: <span class="hljs-literal">true</span>,<br>    useFindAndModify: <span class="hljs-literal">false</span>,<br>    useCreateIndex: <span class="hljs-literal">true</span><br>&#125;)<br><br><span class="hljs-comment">// 定义一个Schema</span><br><span class="hljs-keyword">const</span> StudentSchema = mongoose.Schema(&#123;<br>    name : <span class="hljs-built_in">String</span>,<br>    age : <span class="hljs-built_in">Number</span>,<br>    address : <span class="hljs-built_in">String</span>,<br>    tel : <span class="hljs-built_in">String</span><br>&#125;)<br><br><span class="hljs-comment">// 定义数据库模型</span><br><span class="hljs-keyword">const</span> Student = mongoose.model(<span class="hljs-string">&#x27;Student&#x27;</span>,StudentSchema);<br><br><span class="hljs-comment">// 操作数据库</span><br>Student.find(&#123;&#125;,<span class="hljs-function">(<span class="hljs-params">err,doc</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-built_in">console</span>.log(err);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(doc);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="第三步：操作数据库"><a href="#第三步：操作数据库" class="headerlink" title="第三步：操作数据库"></a>第三步：操作数据库</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 查</span><br>Student.find(&#123;&#125;,<span class="hljs-function">(<span class="hljs-params">err,doc</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-built_in">console</span>.log(err);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(doc);<br>&#125;)<br><br><span class="hljs-comment">// 增</span><br><span class="hljs-keyword">let</span> s = <span class="hljs-keyword">new</span> Student(&#123;<br>    name : <span class="hljs-string">&#x27;张三&#x27;</span>,<br>    age : <span class="hljs-number">19</span>,<br>    address : <span class="hljs-string">&#x27;上海市浦东新区&#x27;</span>,<br>    tel : <span class="hljs-string">&#x27;17628282822&#x27;</span><br>&#125;)<br><br>s.save(<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-built_in">console</span>.log(err);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;成功&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 改</span><br>Student.updateOne(&#123;<span class="hljs-string">&quot;_id&quot;</span>:<span class="hljs-string">&quot;603e3a56838a6037f87082b3&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Revan&quot;</span>&#125;,<span class="hljs-function">(<span class="hljs-params">err,doc</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-built_in">console</span>.log(err);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;修改成功&#x27;</span>);<br>&#125;)<br><br><span class="hljs-comment">// 删</span><br>Student.deleteOne(&#123;<span class="hljs-string">&quot;_id&quot;</span>:<span class="hljs-string">&quot;603e3a56838a6037f87082b3&quot;</span>&#125;,<span class="hljs-function">(<span class="hljs-params">err,doc</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-built_in">console</span>.log(err);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;删除成功&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mongodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前后端数据交互加密</title>
    <link href="/2021/02/24/data-s-encryption-and-decryption/"/>
    <url>/2021/02/24/data-s-encryption-and-decryption/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>在前后端分离的项目中，往往需要传输一些敏感的信息，例如密码、金额等，签名验签算法只能保证数据不被篡改，但是却无法对数据进行保密，如果用户输入的密码明文传输，就会被网络中的节点截获，虽然大部分网络运营商并不会去截取网络传输的内容，但是不能排除用户连接的WiFi网络是不是钓鱼网络，所以在传输敏感信息的时候需要加密，本文就讨论如何安全的让客户端和服务器交换秘钥。</p>          </div><h2 id="AES-RSA"><a href="#AES-RSA" class="headerlink" title="AES+RSA"></a>AES+RSA</h2><h3 id="简单介绍一下AES和RSA"><a href="#简单介绍一下AES和RSA" class="headerlink" title="简单介绍一下AES和RSA"></a>简单介绍一下AES和RSA</h3><ul><li><code>AES</code>：<code>对称加解密</code>，加密解密使用<code>同一个秘钥</code>。</li><li><code>RSA</code>：<code>非对称加解密</code>，使用<code>公钥加密</code>数据，只有对应的<code>私钥</code>才能<code>解密</code>，加密方和解密方各自保存秘钥对中的一个。</li></ul><h3 id="为什么前后端交互要结合AES和RSA"><a href="#为什么前后端交互要结合AES和RSA" class="headerlink" title="为什么前后端交互要结合AES和RSA"></a>为什么前后端交互要结合AES和RSA</h3><ol><li>如果只用<code>AES</code><br><code>前端</code>要加密数据，就需要保存<code>秘钥</code>，我们知道保存在<code>前端</code>的东西都不是秘密，秘钥<code>泄露</code>后，拿到<code>秘钥</code>和加密后的数据，就可以解密，加密毫无意义。</li><li>如果只用<code>RSA</code><br>前端只保存<code>秘钥</code>对中的一个，即使<code>泄露</code>，也无法<code>解密</code>数据，解决了<code>AES</code>的问题。但是<code>RSA</code>效率低，每次交互都进行<code>加解密</code>，对<code>性能</code>影响较大。</li></ol><blockquote><p>结合使用：<code>AES</code>加密数据，<code>RSA</code>加密<code>秘钥</code>。<code>AES</code>的<code>秘钥</code>动态生成，避免了<code>前端</code>保存<code>秘钥</code>导致泄露的可能，<code>RSA</code>对<code>秘钥</code>加密，保证<code>秘钥</code>传输过程的安全。最终提交到后端的数据是：<code>AES加密后的数据</code> + <code>RSA加密后的秘钥</code></p></blockquote><h3 id="图例"><a href="#图例" class="headerlink" title="图例"></a>图例</h3><div align=center>    <img src="aes-rsa.jpg" /></div>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全</tag>
      
      <tag>前端</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原生Nodejs封装类似Express框架</title>
    <link href="/2021/02/04/node-express-composed/"/>
    <url>/2021/02/04/node-express-composed/</url>
    
    <content type="html"><![CDATA[<h2 id="Express简介"><a href="#Express简介" class="headerlink" title="Express简介"></a>Express简介</h2><p><a href="https://expressjs.com/zh-cn/">Express</a> 是一种保持最低程度规模的灵活 Node.js Web 应用程序框架，为 Web 和移动应用程序提供一组强大的功能。其使用也是特别简单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br> <br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>  res.send(<span class="hljs-string">&#x27;Hello World&#x27;</span>)<br>&#125;)<br> <br>app.listen(<span class="hljs-number">3000</span>)<br></code></pre></td></tr></table></figure><h2 id="Express框架简易封装"><a href="#Express框架简易封装" class="headerlink" title="Express框架简易封装"></a>Express框架简易封装</h2><p>如何利用原生Nodejs封装一个类似的框架呢？开始吧！</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>./module/route.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>)<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-comment">// 根据后缀名获取文件类型</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFileMime</span>(<span class="hljs-params">extname</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> data = fs.readFileSync(<span class="hljs-string">&#x27;./data/mime.json&#x27;</span>);<br>    <span class="hljs-keyword">let</span> mimeObj = <span class="hljs-built_in">JSON</span>.parse(data.toString());<br>    <span class="hljs-keyword">return</span> mimeObj[extname]<br>&#125;<br><br><span class="hljs-comment">// 静态web服务的方法</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">initStatic</span>(<span class="hljs-params">req,res,staticPath</span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> pathname = url.parse(req.url).pathname;<br>    pathname = pathname == <span class="hljs-string">&#x27;/&#x27;</span> ? <span class="hljs-string">&#x27;/index.html&#x27;</span> : pathname;<br>    <span class="hljs-keyword">let</span> extname = path.extname(pathname).slice(<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-keyword">let</span> data = fs.readFileSync(<span class="hljs-string">&#x27;./&#x27;</span>+staticPath + pathname);<br>        <span class="hljs-built_in">console</span>.log(data)<br>        <span class="hljs-keyword">if</span>(data)&#123;<br>            <span class="hljs-built_in">console</span>.log(extname)<br>            <span class="hljs-keyword">let</span> mime = getFileMime(extname);<br>            res.writeHead(<span class="hljs-number">200</span>,&#123;<span class="hljs-string">&#x27;content-Type&#x27;</span>:<span class="hljs-string">&#x27;&#x27;</span>+mime+<span class="hljs-string">&#x27;;charset=&quot;utf-8&quot;&#x27;</span>&#125;)<br>            res.end(data);<br>        &#125;<br>    &#125;<span class="hljs-keyword">catch</span>(err)&#123;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> server = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 把 get 和 post 分开</span><br>    <span class="hljs-keyword">let</span> G = &#123;<br>        _get : &#123;&#125;,<br>        _post : &#123;&#125;,<br>        staticPath : <span class="hljs-string">&#x27;static&#x27;</span>   <span class="hljs-comment">// 静态web目录</span><br>    &#125;<br>    <br><br>    <span class="hljs-keyword">let</span> app = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req,res</span>)</span>&#123;<br>        <span class="hljs-comment">// 配置静态web目录</span><br>        initStatic(req,res,G.staticPath)<br><br>        <span class="hljs-keyword">let</span> pathname = url.parse(req.url).pathname;<br>        <span class="hljs-keyword">let</span> method = req.method.toLowerCase();<br>        <span class="hljs-keyword">if</span>(G[<span class="hljs-string">&#x27;_&#x27;</span>+method][pathname])&#123;<br>            <span class="hljs-keyword">if</span>(method == <span class="hljs-string">&#x27;get&#x27;</span>)&#123;<br>                G._get[pathname](req,res)<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(method == <span class="hljs-string">&#x27;post&#x27;</span>)&#123;<br>                <span class="hljs-comment">// 获取post数据，把他绑定到req.body</span><br>                <span class="hljs-keyword">let</span> postData = <span class="hljs-string">&#x27;&#x27;</span>;<br>                req.on(<span class="hljs-string">&#x27;data&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">chunk</span>)=&gt;</span>&#123;<br>                    postData+=chunk;<br>                &#125;)<br>                req.on(<span class="hljs-string">&#x27;end&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>                    req.body = postData;<br>                    G._post[pathname](req,res);<br>                &#125;)<br>            &#125;<br>            <br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            res.writeHead(<span class="hljs-number">404</span>, &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span>&#125;);<br>            res.end(<span class="hljs-string">&#x27;页面不存在&#x27;</span>);<br>        &#125;<br>    &#125;<br><br>    app.get = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">str,cb</span>)</span>&#123;<br>        G._get[str] = cb<br>    &#125;<br><br>    app.post = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">str,cb</span>)</span>&#123;<br>        G._post[str] = cb<br>    &#125;<br><br>    <span class="hljs-comment">// 静态web服务</span><br>    app.static = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">staticPath</span>)</span>&#123;<br>        G.staticPath = staticPath;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> app<br>&#125;<br><br><span class="hljs-built_in">module</span>.exports = server()<br></code></pre></td></tr></table></figure><h3 id="调用服务"><a href="#调用服务" class="headerlink" title="调用服务"></a>调用服务</h3><p>./express_router</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./module/route&#x27;</span>);<br><span class="hljs-keyword">const</span> ejs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;ejs&#x27;</span>)<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 原先http-server是这么写的</span><br><span class="hljs-comment"> * 也就是每次使用服务都会执行里面的function方法</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// http.createServer(function (request, response) &#123;</span><br><span class="hljs-comment">// response.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/plain&#x27;&#125;);</span><br><span class="hljs-comment">// response.end(&#x27;Hello World&#x27;);</span><br><span class="hljs-comment">// &#125;).listen(8081);</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 对上面的function进行改造，改成我们想要执行的东西</span><br><span class="hljs-comment"> * 注册web服务</span><br><span class="hljs-comment"> * 以后每次使用服务都会执行app方法</span><br><span class="hljs-comment">*/</span><br>http.createServer(app).listen(<span class="hljs-number">8088</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Server running at http://127.0.0.1:8088/&#x27;</span>);<br><br><span class="hljs-comment">// 静态web服务</span><br>app.static(<span class="hljs-string">&#x27;public&#x27;</span>)<br><br><span class="hljs-comment">// 配置路由</span><br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>res.writeHead(<span class="hljs-number">200</span>, &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span>&#125;);<br>res.end(<span class="hljs-string">&#x27;home&#x27;</span>);<br>&#125;)<br><br><span class="hljs-comment">// 配置路由</span><br>app.get(<span class="hljs-string">&#x27;/login&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>ejs.renderFile(<span class="hljs-string">&#x27;./views/login.ejs&#x27;</span>, &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;提交&#x27;</span>&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, str</span>)</span>&#123;<br>res.writeHead(<span class="hljs-number">200</span>, &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span>&#125;);<br>res.end(str);<br>&#125;);<br><br>&#125;)<br><br><span class="hljs-comment">// 配置路由</span><br>app.post(<span class="hljs-string">&#x27;/doLogin&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br><span class="hljs-built_in">console</span>.log(req.body)<br>res.writeHead(<span class="hljs-number">200</span>, &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/html;charset=&quot;utf-8&quot;&#x27;</span>&#125;);<br>res.end(<span class="hljs-built_in">JSON</span>.stringify(req.body));<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>核心代码大致如上，项目全部可查看<a href="https://github.com/Van-Yo/nodejs-express-composed">nodejs-express-composed</a></p><h2 id="Express学习"><a href="#Express学习" class="headerlink" title="Express学习"></a>Express学习</h2><p>接下来开始Express学习</p><h3 id="路由、动态路由、get传值"><a href="#路由、动态路由、get传值" class="headerlink" title="路由、动态路由、get传值"></a>路由、动态路由、get传值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br><br><span class="hljs-comment">// get请求</span><br><span class="hljs-comment">// http://localhost:3000/</span><br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.send(<span class="hljs-string">&#x27;Hello World&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">// post请求</span><br><span class="hljs-comment">// Postman测试</span><br>app.post(<span class="hljs-string">&#x27;/submit&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class="hljs-string">&#x27;提交成功&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">// put请求</span><br><span class="hljs-comment">// Postman测试</span><br>app.put(<span class="hljs-string">&#x27;/edit&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class="hljs-string">&#x27;修改成功&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">// selete请求</span><br><span class="hljs-comment">// Postman测试</span><br>app.delete(<span class="hljs-string">&#x27;/delete&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class="hljs-string">&#x27;删除成功&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 动态路由</span><br><span class="hljs-comment">// http://localhost:3000/getArticle/123456</span><br>app.get(<span class="hljs-string">&#x27;/getArticle/:id&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">let</span> id = req.params.id;<br>    <span class="hljs-keyword">if</span>(id)&#123;<br>        res.send(<span class="hljs-string">&#x27;文章id是：&#x27;</span>+id)<br>    &#125;<br>&#125;)<br><br><span class="hljs-comment">// get传值</span><br><span class="hljs-comment">// http://localhost:3000/getInfo?name=hello&amp;content=helloWorld</span><br>app.get(<span class="hljs-string">&#x27;/getInfo&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">let</span> obj = req.query;<br>    <span class="hljs-keyword">let</span> &#123;name,content&#125; = obj;<br>    res.send(<span class="hljs-string">`文章名是：<span class="hljs-subst">$&#123;name&#125;</span>，内容是：<span class="hljs-subst">$&#123;content&#125;</span>`</span>)<br>&#125;)<br><br>app.listen(<span class="hljs-number">3000</span>)<br></code></pre></td></tr></table></figure><h3 id="ejs模板引擎"><a href="#ejs模板引擎" class="headerlink" title="ejs模板引擎"></a>ejs模板引擎</h3><p>安装ejs包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install ejs -S<br></code></pre></td></tr></table></figure><p>/app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">// 配置模板引擎</span><br>app.set(<span class="hljs-string">&quot;view engine&quot;</span>,<span class="hljs-string">&quot;ejs&quot;</span>)<br><br><span class="hljs-comment">// ejs模板引擎</span><br><span class="hljs-comment">// http://localhost:3000/</span><br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> title = <span class="hljs-string">&quot;你好ejs&quot;</span><br>    <span class="hljs-comment">// 默认保存在/views</span><br>    res.render(<span class="hljs-string">&quot;index&quot;</span>,&#123;<br>        title<br>    &#125;)<br>&#125;)<br><br>app.listen(<span class="hljs-number">3000</span>)<br></code></pre></td></tr></table></figure><p>/views/index.ejs</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ejs模板引擎<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>ejs模板引擎<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&lt;%=title%&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="托管静态文件"><a href="#托管静态文件" class="headerlink" title="托管静态文件"></a>托管静态文件</h3><p>新建静态文件目录和静态文件/static/css/base.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span>&#123;<br>    <span class="hljs-attribute">background</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>/app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 配置静态web目录</span><br>app.use(express.static(<span class="hljs-string">&quot;static&quot;</span>))<br></code></pre></td></tr></table></figure><p>/views/index.ejs</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/css/base.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时访问 <a href="http://localhost:3000/css/base.css">http://localhost:3000/css/base.css</a> 或者 <a href="http://localhost:3000/">http://localhost:3000/</a> 就可以看到静态文件奏效了。</p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>1.<strong>应用级中间件（用于权限判断）</strong>：在请求路由前会<code>优先</code>进入该中间件，<code>next()</code>后再请求对应路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(<span class="hljs-function">(<span class="hljs-params">req,res,next</span>)=&gt;</span>&#123;<br>    next()<br>&#125;)<br></code></pre></td></tr></table></figure><p>2.<strong>路由级中间件（用的比较少）</strong>：假如有下面两个路由，没有加上<code>next()</code>，此时，访问 <a href="http://localhost:3000/getArticle/hello">http://localhost:3000/getArticle/hello</a> 是不会匹配第二个路由的，但是如果在第一个路由中加上<code>next()</code>，那两个路由就都会匹配到了，最终以匹配到的最后一个路由作为结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">app.get(<span class="hljs-string">&#x27;/getArticle/hello&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class="hljs-string">&#x27;文章名称是hello&#x27;</span>)<br>    next()<br>&#125;)<br><span class="hljs-comment">// 动态路由</span><br>app.get(<span class="hljs-string">&#x27;/getArticle/:id&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">let</span> id = req.params.id;<br>    <span class="hljs-keyword">if</span>(id)&#123;<br>        res.send(<span class="hljs-string">&#x27;文章id是：&#x27;</span>+id)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>3.<strong>错误处理中间件</strong>：放在所有路由的最后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">app.use(<span class="hljs-function">(<span class="hljs-params">req,res,next</span>)=&gt;</span>&#123;<br>    res.status(<span class="hljs-number">404</span>).send(<span class="hljs-string">&quot;404&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>4.<strong>内置中间件</strong>：配置静态web目录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 配置静态web目录</span><br>app.use(express.static(<span class="hljs-string">&quot;static&quot;</span>))<br></code></pre></td></tr></table></figure><p>5.<strong>第三方中间件</strong>：假如<code>body-parser</code>，获取<code>post</code>数据就可以使用<code>req.body</code>了<br>安装<code>body-parser</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install body-parser -S<br></code></pre></td></tr></table></figure><p>配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br><br><span class="hljs-comment">// create application/json parser</span><br>app.use(bodyParser.json())<br> <br><span class="hljs-comment">// create application/x-www-form-urlencoded parser</span><br>app.use(bodyParser.urlencoded(&#123;<span class="hljs-attr">extended</span>:<span class="hljs-literal">false</span>&#125;))<br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">app.post(<span class="hljs-string">&#x27;/submit&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class="hljs-built_in">JSON</span>.stringify(req.body))<br>&#125;)<br></code></pre></td></tr></table></figure><p>可以用<code>Postman</code>简单测试</p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p><code>Cookie</code>是<code>服务器</code>发送到用户<code>浏览器</code>并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被<code>携带</code>并发送到服务器上。<code>Express</code>可以使用<code>cookie-parser</code>来实现<code>Cookie</code>。</p><p>1.安装<code>cookie-parser</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install cookie-parser -S<br></code></pre></td></tr></table></figure><p>2.配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-keyword">const</span> cookieParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cookie-parser&#x27;</span>)<br><br>app.use(cookieParser())<br><br><span class="hljs-comment">// 设置cookie</span><br>app.get(<span class="hljs-string">&#x27;/doLogin&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.cookie(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;revan&quot;</span>,&#123;<span class="hljs-attr">maxAge</span>:<span class="hljs-number">1000</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>&#125;);<br>    res.send(<span class="hljs-string">&quot;设置cookie成功&quot;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 获取cookie</span><br>app.get(<span class="hljs-string">&#x27;/getInfo&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">let</span> username = req.cookies.username;<br>    res.send(<span class="hljs-string">&quot;您好！&quot;</span>+username);<br>&#125;)<br></code></pre></td></tr></table></figure><p>3.使用</p><ul><li>访问 <a href="http://localhost:3000/doLogin">http://localhost:3000/doLogin</a> 页面会显示：设置cookie成功</li><li><code>F12</code>切到开发者工具，在<code>cookie</code>中也能看到<code>username</code>的<code>cookie</code>值</li><li>访问 <a href="http://localhost:3000/getInfo">http://localhost:3000/getInfo</a> 页面会显示：您好！revan</li></ul><p>4.参数说明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> interface CookieOptions &#123;<br>    maxAge?: number;    <span class="hljs-comment">// 设置cookie的过期时间</span><br>    signed?: boolean;   <span class="hljs-comment">// 是否加密，默认不加密</span><br>    expires?: <span class="hljs-built_in">Date</span>;     <span class="hljs-comment">// 设置一个具体的cookie过期日期</span><br>    httpOnly?: boolean; <span class="hljs-comment">// true:只能在后端设置获取cookie</span><br>    path?: string;      <span class="hljs-comment">// 可以访问cookie的路由：req.cookies.username</span><br>    domain?: string;    <span class="hljs-comment">// 域(二级)共享cookie:&#123;domain:&#x27;.joker.com&#x27;&#125; =&gt; aaa.joker.com和 bbb.joker.com 共享cookie</span><br>    secure?: boolean;   <span class="hljs-comment">// true:cookie在http协议中无效</span><br>    encode?: <span class="hljs-function">(<span class="hljs-params">val: string</span>) =&gt;</span> string;<br>    sameSite?: boolean | <span class="hljs-string">&#x27;lax&#x27;</span> | <span class="hljs-string">&#x27;strict&#x27;</span> | <span class="hljs-string">&#x27;none&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>cookie加密：signed</strong></p><ol><li>配置加密密钥： <code>app.use(cookieParser(&#39;xxxxxx&#39;))</code></li><li>设置加密cookie： <code>res.cookie(&quot;username&quot;,&quot;revan&quot;,&#123;maxAge:1000*60*60,signed:true&#125;);</code></li><li>获取解密cookie： <code>req.signedCookies.username;</code></li></ol><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p><code>Session</code>的工作流程是基于<code>Cookie</code>的，当浏览器访问服务器并发送第一次请求时，服务器端会创建一个<code>session</code>对象，生成一个类似于<code>key</code>，<code>value</code>的键值对，然后将<code>key</code>（<code>cookie</code>）返回到浏览器（客户端），浏览器下次再访问时，携带<code>key</code>（<code>cookie</code>）找到对应的<code>session</code>（<code>value</code>）。</p><p>1.安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install express-session -S<br></code></pre></td></tr></table></figure><p>2.配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-keyword">const</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-session&#x27;</span>)<br><br>app.use(session(&#123;<br>    secret: <span class="hljs-string">&#x27;keyboard cat&#x27;</span>,     <span class="hljs-comment">// 服务器端设置的session签名</span><br>    name : <span class="hljs-string">&#x27;appkey&#x27;</span>,  <span class="hljs-comment">//存储cookie的名称，在浏览器开发者模式cookie中可以查看</span><br>    resave: <span class="hljs-literal">false</span>,  <span class="hljs-comment">// 默认</span><br>    saveUninitialized: <span class="hljs-literal">true</span>,    <span class="hljs-comment">// 默认</span><br>    <span class="hljs-comment">// cookie设置</span><br>    cookie: &#123; <br>        maxAge : <span class="hljs-number">1000</span>*<span class="hljs-number">60</span>,<br>        secure: <span class="hljs-literal">false</span> <br>    &#125;,<br>    rolling : <span class="hljs-literal">true</span>,     <span class="hljs-comment">// 再次访问路由会重新设置cookie的maxAge</span><br>&#125;))<br></code></pre></td></tr></table></figure><p>3.设置Session</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">app.get(<span class="hljs-string">&#x27;/doLogin&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 设置session</span><br>    req.session.username = <span class="hljs-string">&quot;张三&quot;</span>,<br>    res.send(<span class="hljs-string">&quot;登录&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>4.获取Session</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">app.get(<span class="hljs-string">&#x27;/getInfo&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(req.session.username)&#123;<br>        <span class="hljs-keyword">let</span> username = req.session.username;<br>        res.send(<span class="hljs-string">&quot;您好！&quot;</span>+username);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        res.send(<span class="hljs-string">&quot;没有登录&quot;</span>);<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>5.销毁Session</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.设置session的过期时间为0（会把所有的session都销毁）</span><br>req.session.cookie.maxAge = <span class="hljs-number">0</span><br><span class="hljs-comment">// 2.销毁指定的session</span><br>req.session.username = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment">// 3.销毁session</span><br>req.session.destroy()<br></code></pre></td></tr></table></figure><h2 id="Express应用程序生成器"><a href="#Express应用程序生成器" class="headerlink" title="Express应用程序生成器"></a>Express应用程序生成器</h2><p>主要用于对路由进行模块化封装和自动生成<code>Express</code>项目</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install -g express-generator<br></code></pre></td></tr></table></figure><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 配置模板文件是ejs，安装目录是 express-generator-demo</span><br>express --view=ejs /express-generator-demo<br></code></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install<br></code></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm start<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nodejs</tag>
      
      <tag>Express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端工程化</title>
    <link href="/2021/01/25/front-end-engineering/"/>
    <url>/2021/01/25/front-end-engineering/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>虽然<code>前端工程化</code>的概念兴起还没几年的时间，但是对于“工程化”这个词并不是一个新鲜词了，在其他软件开发的领域很早就已经有了高度的工程化，例如Web服务端开发。只不过那个时候，前端工程师并没有工程化的意识，也没有必要对前端进行工程化的操作，毕竟在那个时期，前端的开发工作只能算是整个项目开发过程中的“附属品”。那为什么这几年，<code>前端工程化</code>的概念又突然成为了热点话题了呢？要想讲好<code>前端工程化</code>其实并不容易，我就从下面几个方面入手，对<code>前端工程化</code>的概念做个简单的讲解，仅仅是个人理解，希望大家多多交流讨论。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="什么是前端工程化？">[1]</span></a></sup></p>          </div><h2 id="前端为什么要工程化？"><a href="#前端为什么要工程化？" class="headerlink" title="前端为什么要工程化？"></a>前端为什么要工程化？</h2><p>在回答前端工程化这个问题之前，我们应该先考虑另外一个问题：<code>前端开发中会不会涉及到业务？</code>再详细一点，就是前端工程师到底需不需要了解服务端的业务逻辑，再或者说，要不要将一部分服务端的业务逻辑放到前端来实现。这个问题没有标准的答案，实际上应该属于工程协作问题，就是谁该干什么的问题。</p><p>最早的前端开发就是<code>实现页面</code>，顶多再写写JS让页面可以有<code>交互</code>的特效。但是随着需求的增加，我们不仅要做<code>Web</code>应用，还要做<code>App</code>、<code>小程序</code>以及各种端。在这种需求日增的情况下，必须得考虑一种新的方式，<code>优化前端的开发工作</code>，例如，解决代码冗余，项目可维护性，提升版本迭代速度等等一系列的问题。<code>前端工程化</code>的概念也就是在这中情况下被提出了。</p><h2 id="实现前端工程化的基础——前后端分离"><a href="#实现前端工程化的基础——前后端分离" class="headerlink" title="实现前端工程化的基础——前后端分离"></a>实现前端工程化的基础——前后端分离</h2><p>实际上，现在的<code>前端工程化</code>应该还处于早期阶段，毕竟前端工程师这个岗位也才诞生没几年。在互联网发展的早期，<code>Web</code>应用很多情况下都是由<code>服务端</code>工程师一肩挑，前端开发顶多是写写<code>HTML</code>代码，实现页面的布局，然后再把写好的<code>HTML</code>静态文件<code>交给后端工程师套模板</code>，因为当时大部分的Web应用都是使用的<code>服务端渲染</code>技术，例如<code>Java</code>的<code>JSP</code>。</p><p>这种<code>传统模式</code>下的协作开发效率非常低，如果在页面测试中发现了一个<code>bug</code>，这个<code>bug</code>是由于一个<code>ClassName</code>的值少写了一个字母，你说这种情况到底是前端工程师的错，还是后端工程师套模板时的粗心大意呢？毕竟一个网站上有成千上万个<code>DOM</code>节点，谁也不能保证一行代码都不会写错。再假如，项目上线后发现网页的实际像素和设计稿上存在1像素的偏差，这个时候就需要由前端工程师重新设计一次<code>HTML</code>静态页面，然后再交给后端工程师继续套模板，等整个流程走完之后，你会发现一个更加严重的问题，整个项目中仅仅是1像素的偏差，就有可能要调动<code>整个开发团队</code>来处理这1像素的问题，极大的<code>浪费</code>了团队资源。</p><p>上面的问题也仅仅是传统开发问题中的冰山一角，面对这么多的问题，<code>前后端分离</code>开发也就应运而生了。<code>前后端分离开发</code>，为<code>前端工程化</code>的发展提供了生存的土壤。随着市场需求的不断变化，前端开发从传统的<code>WebPage</code>模式，转变到<code>WebApp</code>模式，<code>Web</code>产品形态的变化也不断推动着前端工程师的工作内容发生变化。在应对各种“变化”，前端工程师们也要设计出自己的前端开发“<code>方法论</code>”。</p><p><code>前端工程化</code>的主要目标就是<code>解放生产力</code>、<code>提高生产效率</code>。通过制定一系列的<code>规范</code>，借助<code>工具</code>和<code>框架</code>解决前端开发以及前后端协作过程中的痛点和难度问题。</p><h2 id="如何实施前端工程化？"><a href="#如何实施前端工程化？" class="headerlink" title="如何实施前端工程化？"></a>如何实施前端工程化？</h2><p>明确前后端开发的<code>分工</code>，是实现<code>前后端分离</code>的第一步，也是后面实现前端各种优化方案的基础。<code>前端工程师</code>主要负责的内容包括：</p><ul><li>静态资源和动态资源的处理；</li><li>JavaScript实现前端业务逻辑；</li><li>HTML模板文件的产出；</li><li>中间层Web服务，一般由Node.js实现；</li><li>前端单元测试；</li><li>前端项目部署；</li></ul><p>其中，<code>静态资源</code>包括<code>.js</code>文件、<code>.css</code>文件以及各种格式的<code>图片</code>、<code>媒体文件</code>等，这些文件不依赖于服务器，只需要在浏览器里面解析就可以了；<code>动态资源</code>是指<code>HTML</code>的模板，如果项目不是由服务器完成渲染的<code>SPA</code>（单页面）应用，那我们就要考虑如何实现<code>HTML模板</code>的<code>渲染</code>了。前端项目部署是指静态资源文件在测试服务器上的部署，以及HTML模板文件在Node.js中间层服务器上的部署。</p><p>从项目开发的整体环节来说，实现前端工程化还需要熟练掌握下面几个方面：</p><h3 id="（1）使用Webpack实现项目构建"><a href="#（1）使用Webpack实现项目构建" class="headerlink" title="（1）使用Webpack实现项目构建"></a>（1）使用Webpack实现项目构建</h3><p><code>构建</code>，简单来说就是<code>编译</code>，前端开发的所有文件<code>最终归属</code>是要交给<code>浏览器</code>去解析、渲染，并将页面呈现给用户，构建就是将前端开发中的所有<code>源代码</code>转化为<code>宿主浏览器</code>可以执行的代码。前端构建产出的资源文件只有三种，<code>HTML</code>、<code>CSS</code>、<code>JS</code>文件。需要完成编译的内容有：</p><ul><li>无法被浏览器直接识别的JS代码，包括ES6/7/8/9/10等符合ECMAScript规范的JS代码；</li><li>无法被浏览器直接识别的CSS代码，包括SASS/LESS等预编译的CSS语法；</li><li>无法被浏览器识别的HTML模板代码，包括jade、ejs、artTemplate、mustache等Node.js模板引擎；</li></ul><p><code>项目构建</code>其实就是为了弥补<code>浏览器自身的缺陷和不足</code>，是一种面向语言的<code>编译</code>过程。那么，除了针对语言本身之外，前端的构建还应该考虑到<code>Web</code>应用的<code>性能优化</code>。这些优化主要是为了<code>减少HTTP请求</code>，提升用户体验，包括：</p><ul><li>依赖打包，将同步依赖的文件打包在一起，减少HTTP请求数量；</li><li>资源嵌入，例如将小于10kb的图片编译为base64格式嵌入文档，减少HTTP请求；</li><li>文件压缩，减少文件体积，缩短请求时间；</li><li>为文件加入hash指纹，以应对浏览器缓存策略；</li><li>将开发环境下的域名与静态资源文件路径修改为生产环境下的域名和路径；</li><li>文件名称的改变；</li></ul><p>这里需要解释一下，前端的构建工具除了<code>Webpack</code>之外，还有其他的工具，例如<code>Gulp</code>、<code>Grunt</code>等，为什么这里只提到了<code>Webpack</code>？其实，<code>Gulp</code>、<code>Grunt</code>只能算是工作流管理工具，它们本身是不提供具体的功能，所有的<code>构建</code>、<code>部署</code>等功能都要由对应的<code>插件</code>来完成，使用<code>Gulp</code>和<code>Grunt</code>只是便于项目各个环节<code>工作流程</code>的控制。而且，这两款工具的话题热度和使用率远不及<code>Webpack</code>，<code>Webpack</code>虽然是近两年才崛起的构建工具，但目前依然成为了最流行的构建工具之一，<code>Vue</code>和<code>React</code>两大前端框架的<code>Webpack Loader</code>也是有官方或作者本人编写的。所以，我们在讲<code>前端工程化</code>构建时，推荐使用<code>Webpack</code>这款工具。</p><h3 id="（2）使用Babel完成JavaScript编译"><a href="#（2）使用Babel完成JavaScript编译" class="headerlink" title="（2）使用Babel完成JavaScript编译"></a>（2）使用Babel完成JavaScript编译</h3><p><code>JavaScript</code>可以说是前端最为核心的一门编程语言了，也就是我们常说的“<code>JS</code>”，<code>JS</code>本身是可以直接在浏览器中执行的，那么为什么还要使用<code>Babel</code>再<code>编译</code>一次呢？其实，这里要解释一下，在<code>ECMAScript2015</code>（简称ES6）正式发布以后，前端工程师关注的重心就由“<code>JS</code>”转向了“<code>ES</code>”，作为专业的前端工程师们应该都了解，<code>JavaScript</code> ≠ <code>ECMAScript</code>。</p><p><code>ECMAScript</code>是一个标准，<code>JavaScript</code>是对<code>ECMAScript</code>标准实现的一个子集。宿主浏览器的<code>API</code>（<code>BOM</code>和<code>DOM</code>）再加上<code>JavaScript</code>，就组成了我们传统认知中的<code>JavaScript</code>。但是随着<code>ECMAScript</code>的版本不断迭代更新，带来的并不是开发的便利，由于浏览器对<code>ECMAScript</code>新规范的支持实现比较滞后，即使是目前最新版的<code>Chrome</code>浏览器也没有完全支持<code>ECMAScript2015（ES6）</code>的所有规范，而且<code>ECMAScript2017</code>都已经发布了，为了更好的让新的<code>ES</code>规范能够无缝衔接浏览器，<code>Babel</code>编译<code>JavaScript</code>语法的作用就突显出来了。</p><p><code>Babel</code>的作用简单来说，就是将浏览器未实现的<code>ECMAScript</code>规范语法转化为可运行的<code>低版本语法</code>，例如将<code>ES6</code>的<code>class</code>转化为<code>ES5</code>的<code>prototype</code>实现。</p><h3 id="（3）CSS预编译"><a href="#（3）CSS预编译" class="headerlink" title="（3）CSS预编译"></a>（3）CSS预编译</h3><p><code>CSS</code>作为浏览器可以<code>直接识别</code>的样式语言，弥补了<code>HTML</code>原生样式的不足，对于早期互联网开发中，样式的要求并不复杂，仅需要少量的<code>CSS</code>代码即可。但是在如今追求用户极致体验的潮流下，<code>CSS</code>的开发要求不断提高，复杂的<code>CSS</code>开发变成一件非常繁琐和痛苦的事情。最主要的原因还是受限于浏览器的实现和<code>CSS</code>自身的弱编程能力。</p><p><code>CSS</code>预编译器的工作原理是提供便捷的语法和特性供开发者编写源代码，随后经过专门的编译工具将源码转化为<code>CSS</code>语法。</p><h3 id="（4）模块化开发"><a href="#（4）模块化开发" class="headerlink" title="（4）模块化开发"></a>（4）模块化开发</h3><p><code>模块化开发</code>和<code>组件化开发</code>是两个完全不同的概念，<code>模块化</code>属于<code>架构层面</code>的概念，<code>前端工程化</code>与<code>模块化</code>的关系就类似于组装车间与零件的关系。使用<code>模块化</code>开发，可以解决下面几个问题：</p><ul><li>避免命名冲突；</li><li>便于依赖管理；</li><li>利于性能优化；</li><li>提高可维护性；</li><li>提高代码可复用性；</li></ul><p>在<code>ES6</code>规范发布之前，<code>前端模块化</code>开发主要有三种规范，分别是：<code>CommonJS</code>、<code>AMD</code>、<code>CMD</code>。</p><p><code>CommonJS</code>是一种只适用于<code>JavaScript</code>的静态模块化规范，适合<code>Node.js</code>开发，但并不适合浏览器环境；而<code>AMD</code>/<code>CMD</code>规范并不是完全一致的，但核心功能是统一的，两个规范都重点解决了浏览器对前端模块化的需求。</p><p><code>ES6 Module</code>规范推出之后，前三者的模块化规范也逐渐退出前端的历史舞台。<code>ES6 Module</code>是语言层面的规范，与应用场景无关，所以一个不涉及运行环境API调用的模块可以在任何场景下运行。但是目前浏览器还没有完全支持这种规范，所以，要实现<code>ES6 Module</code>规范的话，还需要使用<code>构建工具</code>进行<code>编译</code>。</p><h3 id="（5）组件化开发"><a href="#（5）组件化开发" class="headerlink" title="（5）组件化开发"></a>（5）组件化开发</h3><p>前面提到了，<code>组件化</code>和<code>模块化</code>是两个完全不同的概念，<code>模块化</code>是文件层面上对代码和资源的拆分，<code>组件化</code>是设计层面上对<code>UI</code>的拆分。从<code>UI</code>中拆分出来的一个<code>结构单元</code>，成为<code>UI</code>组件，一个<code>UI</code>组件单元包含了<code>HTML模板</code>、<code>CSS样式</code>、<code>JS逻辑</code>。在页面的设计过程中，页面上的每一个元素都是组件，页面也是一个组件，只不过页面是一个大型组件，然后这个大型组件又由多个中小型组件拼装而成。中型组件还可以再拆分成小型组件，小型组件再拆分成DOM元素，DOM元素也属于浏览器自身的组件，是组件的基本单元。这种组件化开发就是前端开发的“分治思想”。</p><h3 id="（6）开发环境的本地服务器与Mock服务"><a href="#（6）开发环境的本地服务器与Mock服务" class="headerlink" title="（6）开发环境的本地服务器与Mock服务"></a>（6）开发环境的本地服务器与Mock服务</h3><p>在前端工程化开发中，通过构建工具可以将代码进行编译，然后在浏览器中进行调试，但是在开发过程中源码的每次修改都需要执行一次构建，构建完成后才能在浏览器里运行，这对前端工程师来说无疑就是一种灾难。要完美的解决这个问题，<code>可以使用本地服务器与构建工具结合</code>，对源码进行监听并在修改之后触发动态构建，使用自动化构建的方式代替人工。这种动态构建是使用本地服务器解决开发层面上的问题。</p><p><code>Mock服务</code>解决的是<code>前后端协作开发</code>的问题，前后端开发人员提前约定好<code>规范</code>，<code>前端工程师</code>通过<code>本地服务器</code>提供的<code>Mock数据接口</code>辅助前端逻辑的编写和功能模块的开发。如果项目中需要服务器端渲染（<code>SSR</code>），本地服务器还需要具备<code>解析HTML模板</code>的能力，同时Mock服务提供SSR所需的初始化数据。</p><p>前端工程师可以使用本地服务器提供的<code>Mock</code>数据接口，在后端人员开发的同时，进行前端逻辑的并行开发，等到后端真实接口开发完成后，将前端请求的地址从<code>Mock</code>服务迁移到服务器的<code>生产环境</code>即可。</p><h3 id="（7）规范化约束"><a href="#（7）规范化约束" class="headerlink" title="（7）规范化约束"></a>（7）规范化约束</h3><p>无论是<code>服务器端开发</code>还是<code>前端工程化开发</code>，<code>规范化</code>的约束都至关重要。开发人员在设计项目的整体架构时，为了考虑到项目的可扩展性、可维护性、高内聚性等因素，会对代码进行<code>封装</code>，使用配置化操作，为项目开发带来便利，这必然要求业务代码编程范式遵循既定的<code>约束</code>。这种约束虽然带来了开发上的便捷，但是在一定程度上制约了代码的可移植性。例如，在项目中使用了某个构建工具来解决项目需求，但是如果有一天项目需要更换另一个构建工具时，代码中原有的构建工具的配置会成为冗余代码，而且不能保证这类配置不会对新构建工具产生冲突。即便是没有产生冲突，对代码的性能优化也是会带来一定负面影响的。工程化方案作为一种服务，应该尽量降低对项目产生的负面影响。这是制定<code>编程范式约束</code>规范时最重要的考虑因素。</p><h3 id="（8）项目部署流程化"><a href="#（8）项目部署流程化" class="headerlink" title="（8）项目部署流程化"></a>（8）项目部署流程化</h3><p>站在前端开发的范畴来说，<code>项目部署</code>是指前端开发人员将构建产出的<code>代码包</code>部署到测试<code>服务器</code>的过程，而并非是将测试完成的代码发布到生产环境的过程。在部署过程中，要考虑<code>目标服务器</code>、<code>路径信息</code>是否与项目一一对应，并且可供负责部署到生产环境的开发人员进行配置，部署的操作流程应尽量简单。</p><p>在部署流程中，使用命令行<code>取代</code>工具执行（例如FTP）本地部署，能够极大的提高部署的速度和效率，但是这只是初级阶段的部署流程。考虑团队协作和安全方面的因素，<code>最佳的方式</code>应该是<code>搭建</code>一个可供严格审查、队列控制、操作简化的<code>部署平台</code>，并且有<code>专人负责</code>掌握流程进度。虽然这种搭建部署平台的方式在一定程度上减缓了整体的部署速度，但是加强了团队协作和安全保障。</p><h2 id="前端工程化未来的发展如何？"><a href="#前端工程化未来的发展如何？" class="headerlink" title="前端工程化未来的发展如何？"></a>前端工程化未来的发展如何？</h2><p>目前，<code>Web</code>应用开发的分工模式还处于<code>探索期</code>，而且从最近流行的“大前端”的趋势来看，前端工程师的发展或许会突破<code>Web</code>领域，向多端领域发展，例如<code>React Native</code>、<code>Weex</code>、<code>Electron</code>、<code>小程序</code>等。从诞生之初“<code>切图仔</code>”到<code>大前端</code>概念，前端工程师的定位和负责的技术范畴一直在变化，但是前端工程师产出的<code>服务对象</code>永远是<code>用户</code>。在<code>Node.js</code>之前，<code>浏览器</code>是前端工程师生存的“一亩三分地”，<code>Node.js</code>的出现打破了这个局面，以致出现了“<code>大前端</code>”的发展趋势。</p><p><code>Node.js</code>中间层+浏览器是目前实现“<code>大前端</code>”的基本模式，前端工程师掌握着与用户相关的所有资源，能够全面地掌握开发进度以及实现更合理的前后端分离方案。这种模式让前端工程师<code>突破</code>浏览器的瓶颈，迈向<code>Web</code>应用层面，这也是未来前端发展的主流趋势。</p><p>无论是专注于<code>浏览器</code>，还是兼顾了<code>Node.js</code>中间层，前端工程师的利剑始终指向的是面向浏览器的<code>Web</code>领域，<code>前端工程化</code>所提供的是一种服务，服务对象是不断参与到项目迭代过程中的前端开发人员，服务的内容涉及到<code>开发</code>、<code>构建</code>、<code>部署</code>等各个环节。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>前端工程师在未来的定位必然会发生变化，但是<code>前端工程化</code>唯一不变的原则是始终以<code>前端开发</code>为<code>中心</code>，前端工程化没有统一的行业标准，也没有固定的形态，更没有最合理的方案，只要前端工程师的定位还在不断的变化，<code>前端工程化</code>的进程将会一直持续下去。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://juejin.cn/post/6917447582985748493">什么是前端工程化？</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS运行机制</title>
    <link href="/2021/01/19/js-event-loop/"/>
    <url>/2021/01/19/js-event-loop/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p><code>Event Loop</code> 是一个很重要的概念，指的是计算机系统的一种运行机制。那么 <code>JS</code> 的 <code>运行机制</code> 是怎样的呢？</p>          </div><h2 id="学习目录"><a href="#学习目录" class="headerlink" title="学习目录"></a>学习目录</h2><div>            <input type="checkbox" disabled checked="checked">JS同步模式与异步模式          </div><div>            <input type="checkbox" disabled checked="checked">EventLoop          </div><div>            <input type="checkbox" disabled checked="checked">宏任务（Tasks）与微任务（Microtasks）          </div><h2 id="同步模式与异步模式"><a href="#同步模式与异步模式" class="headerlink" title="同步模式与异步模式"></a>同步模式与异步模式</h2><p>首先要确定 <code>js</code> 是 <code>单线程语言</code> ，<code>js</code>在设计之初用作用户互动，以及操作<code>DOM</code>。这决定了它只能是<code>单线程</code>（例如<code>多线程</code>操作同一<code>dom</code>，一个删除一个修改，这样会产生冲突）。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="一文搞懂js运行机制，宏任务微任务event loop">[1]</span></a></sup></p><p>但倘若只有<code>同步模式</code>，遇到耗时操作，页面便会<code>阻塞</code>，就像接口请求不到数据，或者图片未加载完成，页面就卡住一直等待。这样显然不现实也不实用。</p><p>所以<code>异步模式</code>应运而生。你可能会有疑问，<code>单线程</code>的<code>js</code>是怎么完成<code>异步操作</code>的，可以这么理解:<code>js</code>是<code>单线程</code>语言，但<code>运行环境</code>可以<code>开多线程</code>帮助处理（例如: <code>浏览器</code>，<code>node</code>..）。</p><p><code>js</code>后推出的<code>Worker类</code>，也是这么实现的。</p><p>来个栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;global begin&#x27;</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timer1</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;timer1 invoke&#x27;</span>)<br>&#125;,<span class="hljs-number">1800</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timer2</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;timer2 invoke&#x27;</span>);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inner</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;inner invoke&#x27;</span>);<br>    &#125;,<span class="hljs-number">1000</span>);<br>&#125;,<span class="hljs-number">1000</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;global end&#x27;</span>);<br><br><span class="hljs-comment">//result:</span><br><span class="hljs-comment">// global begin</span><br><span class="hljs-comment">// global end</span><br><span class="hljs-comment">// timer2 invoke</span><br><span class="hljs-comment">// timer1 invoke</span><br><span class="hljs-comment">// inner invoke</span><br></code></pre></td></tr></table></figure><p>分析一下js代码运行的顺序:</p><ol><li>首先运行<code>主线程</code>。<code>console.log同步代码</code>直接压入执行栈，执行并弹出，页面打印 <code>global begin</code>；</li><li>遇到<code>setTImeout异步代码</code>，函数进入<code>event Table</code>（异步事件注册表）并注册函数，<code>webAPIs</code>（浏览器）帮助我们倒计时，倒计时结束，再将回调函数放入<code>event Queue</code>（事件队列，消息队列），等待主线程运行完毕，会自动将<code>event Queue</code>（事件队列，消息队列）里的任务放入<code>主线程</code>继续执行；</li><li>所以<code>timer1</code>、<code>timer2</code>进入<code>event Table</code>（异步事件注册表）并注册函数，<code>webAPIs</code>（浏览器）帮助我们<code>一起倒计</code>时。主线程继续执行，打印<code>global end</code>，到此为止，<code>主线程</code>上的任务全部结束，主要是<code>同步任务</code>。</li><li>因为<code>timer2</code>的倒计时短，所以1000ms后放入<code>event Queue</code>队列，因为主线程任务已经完成了，所以<code>timer2</code>开始执行，打印<code>timer2 invoke</code>。又碰到<code>inner</code>，是个<code>setTImeout异步代码</code>，注册<code>inner</code>开始倒计时。因为<code>timer1</code>已经计时完1000ms还剩800ms，而<code>inner</code>还剩1000ms,所以再过800ms<code>timer1</code>会先放入<code>event Queue</code>队列，因为主线程上没有任务了，所以<code>timer1</code>也会放入<code>主线程</code>继续执行，所以完后打印<code>timer1 invoke</code>。</li><li>最后200ms后再去队列取事件，打印<code>inner invoke</code>。</li></ol><div class="note note-warning">            <p>这里有一个大坑，例如<code>setTimeout</code>设置<code>3000</code>，延时3秒操作，但通常<code>不是严格</code>3s后便会执行，4s？5s？ 之所以这样是因为，回调函数3s后放入队列，<code>等待主线程完成才会执行</code>。主线程的执行时间那就不知道了，假如主线程的执行时间是4s，4s&gt;3s，所以4s后才能执行回调函数。</p>          </div><h2 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a>EventLoop</h2><p>所谓事件环，就是三步不断循环的js的执行闭环，上面的粒子已经描述的很详细了。</p><ol><li>同步主线程</li><li>异步函数放入eventTable注册，等待完成后放入eventQueue</li><li>同步主线程完成，取eventQueue放入主线程</li></ol><h2 id="宏任务（Tasks）-与微任务（Microtasks）"><a href="#宏任务（Tasks）-与微任务（Microtasks）" class="headerlink" title="宏任务（Tasks） 与微任务（Microtasks）"></a>宏任务（Tasks） 与微任务（Microtasks）</h2><blockquote><p>两个任务皆为 异步任务，区别就是执行顺序。 我总结一句话，消息队列 有微先走微，微可插宏队。</p></blockquote><ul><li>宏任务：script（主线程）、setTimeout、setInterval、setImmediate</li><li>微任务：Promise的then（promise传入的执行函数会立即执行属于同步）、process.nextTick（node环境）、Object.observe(已废弃)、 MutationObserver（观测dom变化）</li></ul><p>栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Promise</span>.resolve().then(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Promise1&#x27;</span>)  <br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;setTimeout2&#x27;</span>)<br>  &#125;,<span class="hljs-number">0</span>)<br>&#125;)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;setTimeout1&#x27;</span>)<br>  <span class="hljs-built_in">Promise</span>.resolve().then(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Promise2&#x27;</span>)    <br>  &#125;)<br>&#125;,<span class="hljs-number">0</span>)<br><br><span class="hljs-comment">// Promise1，setTimeout1，Promise2，setTimeout2</span><br></code></pre></td></tr></table></figure><p>栗子解析：</p><ol><li>先走主线程，<code>promise</code>直接<code>resolve</code>，<code>then</code>里面函数属于<code>异步微任务</code>，下面的<code>setTimeout1</code>属于<code>异步宏任务</code>，都放入事件环；</li><li>当主线程走完，将事件环的函数放入主线程，<code>先微后宏</code>，打印<code>Promise1</code>，然后再次遇到<code>setTimeout</code>，放入事件环。</li><li><code>setTimeout1</code>回调执行， 打印<code>setTimeout1</code>，遇到<code>promise</code>放入事件环，<code>主线程第二遍</code>走完，现在事件环有 <code>setTimeout2</code>和<code>Promise2</code>。</li><li>微任务可插队宏任务，先打印 <code>Promise2</code>，再打印 <code>setTimeout2</code></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在了解完JS运行机制之后，只要捎带刷一刷类似的栗子就ok了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://juejin.cn/post/6913835186933366798">一文搞懂js运行机制，宏任务微任务event loop</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端路由学习</title>
    <link href="/2021/01/15/router-learning/"/>
    <url>/2021/01/15/router-learning/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>假如面试官问你：什么是前端路由？为什么用前端路由？前端路由解决了什么？你该怎么回答呢=.=！</p>          </div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先先简单回答一下上面的问题，然后带着问题和答案去学习<code>前端路由</code>。</p><div>            <input type="checkbox" disabled checked="checked">什么是前端路由?          </div><p><em>简单说就是前端控制页面跳转,而不需要要向后端去请求。</em></p><div>            <input type="checkbox" disabled checked="checked">为什么用前端路由？          </div><p><em>还不是因为时代在进步，单页应用的兴起，当然兴起的原因就不细说了。</em></p><div>            <input type="checkbox" disabled checked="checked">前端路由解决了什么？          </div><p><em>后台和前端工作更加细化了，后台主要工作就是提供数据，前端负责展示，当然还有一些节约资源，减小服务器压力什么的。</em></p><h2 id="多页应用和单页应用"><a href="#多页应用和单页应用" class="headerlink" title="多页应用和单页应用"></a>多页应用和单页应用</h2><p>多页应用和单页应用有什么区别呢？</p><h3 id="多页应用"><a href="#多页应用" class="headerlink" title="多页应用"></a>多页应用</h3><p>初学前端就知道，一个 <code>HTML</code> 就是一个页面，在浏览器输入网址后发起请求，返回来的 <code>HTML</code> 页面是最终呈现的效果，<code>url</code>类似于以index.html文件名结尾的都是多页应用。并且每次点击页面跳转，都会重新请求 <code>HTML</code> 资源。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="你好，谈谈你对前端路由的理解">[1]</span></a></sup></p><p>举个例子，<a href="https://www.cnblogs.com/">博客园</a>就是一个多页应用，每次加载页面，都会返回 <code>HTML</code> 资源以及里面的 <code>CSS</code> 等静态资源，组合成一个新的页面。可以通过查看后端<code>返回值</code>和<code>预览</code>进行查看：<br><img src="router-1.png"></p><p><img src="router-2.jpg"></p><p>网页上能看到什么图片或文字，你能在上述图片中找到相应的 <code>HTML</code> 结构，并且是单个的 <code>HTML</code> 文件，那也属于传统页面，也就是 <code>DOM</code> 直出。</p><h3 id="单页应用"><a href="#单页应用" class="headerlink" title="单页应用"></a>单页应用</h3><p>时代在进步，科技在发展，面对日益增长的网页需求，网页开始走向模块化、组件化的道路。随之而来的是代码的难以维护、不可控、迭代艰难等现象。面临这种情况，催生出不少优秀的现代前端框架，首当其冲的便是 <code>React</code> 、 <code>Vue</code> 、 <code>Angular</code> 等著名单页面应用框架。而这些框架有一个共同的特点，便是“通过 <code>JS</code> 渲染页面”。</p><p>举个例子，以前我们直出 <code>DOM</code> ，而现在运用这些单页面框架之后， <code>HTML</code> 页面基本上只有一个 <code>DOM</code> 入口，大致如下所示：<br><img src="router-3.jpg"><br>所有的页面组件，都是通过运行上图底部的 <code>main.bundle.js</code> 脚本，挂载到 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code> 这个节点下面。用一个极其简单的 JS 展示挂载这一个步骤：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">const</span> root = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>) <span class="hljs-comment">// 获取根节点</span></span><br><span class="javascript">    <span class="hljs-keyword">const</span> divNode = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>) <span class="hljs-comment">// 创建 div 节点</span></span><br><span class="javascript">    divNode.innerText = <span class="hljs-string">&#x27;你妈贵姓？&#x27;</span> <span class="hljs-comment">// 插入内容</span></span><br><span class="javascript">    root.appendChild(divNode) <span class="hljs-comment">// 插入根节点</span></span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>既然单页面是这样渲染的，那如果我有十几个页面要互相跳转切换，咋整！！？？这时候 <span class="label label-info">前端路由</span> 应运而生，它的出现就是为了解决<code>单页应用</code>，通过切换浏览器地址路径，来匹配相对应的页面组件。我们通过一张丑陋的图片来理解这个过程：<br><img src="router-4.jpg"></p><p><code>前端路由</code>会根据浏览器地址栏 <code>pathname</code> 的变化，去匹配相应的页面组件。然后将其通过创建 <code>DOM</code> 节点的形式，塞入根节点 <code>&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</code> 。这就达到了无刷新页面切换的效果，从侧面也能说明正因为无刷新，所以 <code>React</code> 、 <code>Vue</code> 、 <code>Angular</code> 等现代框架在创建页面组件的时候，每个组件都有自己的 <code>生命周期</code> 。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><code>前端路由</code> 插件比较火的俩框架对应的就是 <code>Vue-Router</code> 和 <code>React-Router</code> ,但是它们的逻辑，归根结底还是一样的，用殊途同归四个字，再合适不过。通过分析<code>哈希模式</code>和<code>历史模式</code>的实现原理，让大家对前端路由的原理有一个更深刻的理解。</p><h3 id="哈希模式"><a href="#哈希模式" class="headerlink" title="哈希模式"></a>哈希模式</h3><p><code>a</code> 标签锚点大家应该不陌生，而浏览器地址上 <code>#</code> 后面的变化，是可以被监听的，浏览器为我们提供了原生监听事件 <code>hashchange</code> ，它可以监听到如下的变化：</p><ul><li>点击 <code>a</code> 标签，改变了浏览器地址</li><li>浏览器的前进后退行为</li><li>通过 <code>window.location</code> 方法，改变浏览器地址</li></ul><p>接下来我们利用这些特点，去实现一个 <code>hash</code> 模式的简易路由：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hash 模式<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/page1&quot;</span>&gt;</span>page1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/page2&quot;</span>&gt;</span>page2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--渲染对应组件的地方--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;route-view&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 第一次加载的时候，不会执行 hashchange 监听事件，默认执行一次</span></span><br><span class="javascript">    <span class="hljs-comment">// DOMContentLoaded 为浏览器 DOM 加载完成时触发</span></span><br><span class="javascript">    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, Load)</span><br><span class="javascript">    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;hashchange&#x27;</span>, HashChange)</span><br><span class="javascript">    <span class="hljs-comment">// 展示页面组件的节点</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> routeView = <span class="hljs-literal">null</span></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Load</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      routeView = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;route-view&#x27;</span>)</span><br>      HashChange()<br>    &#125;<br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">HashChange</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-comment">// 每次触发 hashchange 事件，通过 location.hash 拿到当前浏览器地址的 hash 值</span></span><br><span class="javascript">      <span class="hljs-comment">// 根据不同的路径展示不同的内容</span></span><br><span class="javascript">      <span class="hljs-keyword">switch</span>(location.hash) &#123;</span><br><span class="javascript">      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;#/page1&#x27;</span>:</span><br><span class="javascript">        routeView.innerHTML = <span class="hljs-string">&#x27;page1&#x27;</span></span><br><span class="javascript">        <span class="hljs-keyword">return</span></span><br><span class="javascript">      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;#/page2&#x27;</span>:</span><br><span class="javascript">        routeView.innerHTML = <span class="hljs-string">&#x27;page2&#x27;</span></span><br><span class="javascript">        <span class="hljs-keyword">return</span></span><br><span class="javascript">      <span class="hljs-keyword">default</span>:</span><br><span class="javascript">        routeView.innerHTML = <span class="hljs-string">&#x27;page1&#x27;</span></span><br><span class="javascript">        <span class="hljs-keyword">return</span></span><br>      &#125;<br>    &#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当然，这是很简单的实现，真正的 <code>hash</code> 模式，还要考虑到很多复杂的情况，大家有兴趣就去看看源码。</p><h3 id="历史模式"><a href="#历史模式" class="headerlink" title="历史模式"></a>历史模式</h3><p><code>history</code> 模式会比 hash 模式稍麻烦一些，因为 <code>history</code> 模式依赖的是原生事件 <code>popstate</code> ，下面是来自 <code>MDN</code> 的解释：<br><img src="router-5.jpg"></p><div class="note note-primary">            <p>小知识：<code>pushState</code> 和 <code>replaceState</code> 都是 <code>HTML5</code> 的新 <code>API</code>，他们的作用很强大，可以做到改变浏览器地址却不刷新页面。这是实现改变地址栏却不刷新页面的重要方法。</p>          </div><p>包括 <code>a</code> 标签的点击事件也是<code>不会</code>被 <code>popstate</code> 监听。我们需要想个办法解决这个问题，才能实现 <code>history</code> 模式。</p><p><strong>解决思路：</strong>我们可以通过遍历页面上的所有 <code>a</code> 标签，阻止 <code>a</code> 标签的默认事件的同时，加上点击事件的回调函数，在回调函数内获取 <code>a</code> 标签的 <code>href</code> 属性值，再通过 <code>pushState</code> 去改变浏览器的 <code>location.pathname</code> 属性值。然后手动执行 <code>popstate</code> 事件的回调函数，去匹配相应的路由。逻辑上可能有些饶，我们用代码来解释一下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>History 模式<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/page1&quot;</span>&gt;</span>page1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/page2&quot;</span>&gt;</span>page2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;route-view&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript">    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, Load)</span><br><span class="javascript">    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;popstate&#x27;</span>, PopChange)</span><br><span class="javascript">    <span class="hljs-keyword">var</span> routeView = <span class="hljs-literal">null</span></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Load</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      routeView = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;route-view&#x27;</span>)</span><br><span class="javascript">      <span class="hljs-comment">// 默认执行一次 popstate 的回调函数，匹配一次页面组件</span></span><br>      PopChange()<br><span class="javascript">      <span class="hljs-comment">// 获取所有带 href 属性的 a 标签节点</span></span><br><span class="javascript">      <span class="hljs-keyword">var</span> aList = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;a[href]&#x27;</span>)</span><br><span class="javascript">      <span class="hljs-comment">// 遍历 a 标签节点数组，阻止默认事件，添加点击事件回调函数</span></span><br><span class="javascript">      aList.forEach(<span class="hljs-function"><span class="hljs-params">aNode</span> =&gt;</span> aNode.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="javascript">        e.preventDefault() <span class="hljs-comment">//阻止a标签的默认事件</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> href = aNode.getAttribute(<span class="hljs-string">&#x27;href&#x27;</span>)</span><br><span class="javascript">        <span class="hljs-comment">//  手动修改浏览器的地址栏</span></span><br><span class="javascript">        history.pushState(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;&#x27;</span>, href)</span><br><span class="javascript">        <span class="hljs-comment">// 通过 history.pushState 手动修改地址栏，</span></span><br><span class="javascript">        <span class="hljs-comment">// popstate 是监听不到地址栏的变化，所以此处需要手动执行回调函数 PopChange</span></span><br>        PopChange()<br>      &#125;))<br>    &#125;<br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">PopChange</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;location&#x27;</span>, location)</span><br><span class="javascript">      <span class="hljs-keyword">switch</span>(location.pathname) &#123;</span><br><span class="javascript">      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/page1&#x27;</span>:</span><br><span class="javascript">        routeView.innerHTML = <span class="hljs-string">&#x27;page1&#x27;</span></span><br><span class="javascript">        <span class="hljs-keyword">return</span></span><br><span class="javascript">      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/page2&#x27;</span>:</span><br><span class="javascript">        routeView.innerHTML = <span class="hljs-string">&#x27;page2&#x27;</span></span><br><span class="javascript">        <span class="hljs-keyword">return</span></span><br><span class="javascript">      <span class="hljs-keyword">default</span>:</span><br><span class="javascript">        routeView.innerHTML = <span class="hljs-string">&#x27;page1&#x27;</span></span><br><span class="javascript">        <span class="hljs-keyword">return</span></span><br>      &#125;<br>    &#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>这里注意，不能在浏览器直接打开该静态文件，需要通过 <code>web</code> 服务，启动端口去浏览网址。</p>          </div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章主要知识点集中在前端路由这块，能完全看完，并且把实现原理捋一遍，我想你应该对现代前端框架会有一个新的理解。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://juejin.cn/post/6917523941435113486">你好，谈谈你对前端路由的理解</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>Html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6中Reduce使用</title>
    <link href="/2021/01/12/es6-reduce-use/"/>
    <url>/2021/01/12/es6-reduce-use/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>什么？2021年了还不会<code>reduce</code>？那你可能要多写很多代码 =_=!!</p>          </div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于新手来说，<code>reduce</code>没有<code>map</code>、<code>forEach</code>、<code>filter</code>等数组方法那么友好。但是不得不说，它们能干的事情，<code>reduce</code>一个不落下，直呼“B神”。写这篇文章的目的就是想给大家好好的介绍一下 <code>reduce</code> 它有多“骚”，他就是“百变星君”。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="以前我没得选，现在我只想用 Array.prototype.reduce">[1]</span></a></sup></p><p><img src="reduce.jpg"></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>reduce</code>接收 2 个参数： 第一个参数是回调函数（必选），第二个参数是初始值<code>initialValue</code>（可选） 。</p><p>而第一个参数（回调函数），接收下面四个参数：</p><ul><li>Accumulator (acc) (累计器)</li><li>Current Value (cur) (当前值)</li><li>Current Index (idx) (当前索引)</li><li>Source Array (src) (源数组)</li></ul><p>我们平时在业务中多数使用到的是前两个参数，并且有以下两种情况。</p><h3 id="不带初始值"><a href="#不带初始值" class="headerlink" title="不带初始值"></a>不带初始值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>].reduce(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> acc + cur<br>&#125;)<br><span class="hljs-comment">// 1 + 2 + 3 + 4</span><br><span class="hljs-comment">// 10</span><br></code></pre></td></tr></table></figure><h3 id="带初始值"><a href="#带初始值" class="headerlink" title="带初始值"></a>带初始值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>].reduce(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> acc + cur<br>&#125;, <span class="hljs-number">10</span>)<br><span class="hljs-comment">// 10 + 1 + 2 + 3 + 4</span><br><span class="hljs-comment">// 20</span><br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>初始值<code>initialValue</code>可以是任意类型。如果没有提供<code>initialValue</code>，<code>reduce</code>会从索引 1 的地方开始执行<code>callback</code>方法，跳过第一个索引。如果提供<code>initialValue</code>，从索引 0 开始。</p>          </div><h2 id="重塑"><a href="#重塑" class="headerlink" title="重塑"></a>重塑</h2><div class="note note-primary">            <p>它的能力远不止于此，它就像神奇宝贝里的“百变怪”，想要变成什么就变成什么。</p>          </div><h3 id="reduce-gt-map"><a href="#reduce-gt-map" class="headerlink" title="reduce -&gt; map"></a>reduce -&gt; map</h3><p><code>map</code>方法接收一个回调函数，函数内接收三个参数，当前项、索引、原数组，返回一个新的数组，并且数组长度不变。知道了这些特征之后，我们用<code>reduce</code>重塑<code>map</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> testArr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-built_in">Array</span>.prototype.reduceMap = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">callback</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.reduce(<span class="hljs-function">(<span class="hljs-params">acc, cur, index, array</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> item = callback(cur, index, array)<br>    acc.push(item)<br>    <span class="hljs-keyword">return</span> acc<br>  &#125;, [])<br>&#125;<br>testArr.reduceMap(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> item + index<br>&#125;)<br><span class="hljs-comment">// [1, 3, 5, 7]</span><br></code></pre></td></tr></table></figure><p>在<code>Array</code>的<code>原型链</code>上添加<code>reduceMap</code>方法，接收一个回调函数<code>callback</code>作为参数（就是map传入的回调函数），内部通过<code>this</code>拿到当前需要操作的数组，这里<code>reduce</code>方法的第二个参数初始值很关键，需要设置成一个<code>[]</code>，这样便于后面把操作完的单项塞入<code>acc</code>。我们需要给<code>callback</code>方法传入三个值，当前项、索引、原数组，也就是原生<code>map</code>回调函数能拿到的值。返回<code>item</code>塞进<code>acc</code>，并且返回<code>acc</code>，作为下一个循环的<code>acc</code>（贪吃蛇原理）。最终<code>this.reduce</code>返回了新的数组，并且长度不变。</p><h3 id="reduce-gt-forEach"><a href="#reduce-gt-forEach" class="headerlink" title="reduce -&gt; forEach"></a>reduce -&gt; forEach</h3><p><code>forEach</code> 接收一个回调函数作为参数，函数内接收四个参数当前项、索引、原函数、当执行回调函数 <code>callback</code> 时，用作 <code>this</code> 的值，并且不返回值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> testArr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-built_in">Array</span>.prototype.reduceForEach = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">callback</span>) </span>&#123;<br>  <span class="hljs-built_in">this</span>.reduce(<span class="hljs-function">(<span class="hljs-params">acc, cur, index, array</span>) =&gt;</span> &#123;<br>    callback(cur, index, array)<br>  &#125;, [])<br>&#125;<br><br>testArr.reduceForEach(<span class="hljs-function">(<span class="hljs-params">item, index, array</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(item, index)<br>&#125;)<br><span class="hljs-comment">// 1234</span><br><span class="hljs-comment">// 0123</span><br></code></pre></td></tr></table></figure><p>只要看得懂 <code>reduce</code> -&gt; <code>map</code> ，转 <code>forEach</code> 只是改改结构的问题。</p><h3 id="reduce-gt-filter"><a href="#reduce-gt-filter" class="headerlink" title="reduce -&gt; filter"></a>reduce -&gt; filter</h3><p><code>filter</code> 同样接收一个回调函数，回调函数返回 <code>true</code> 则返回当前项，反之则不返回。回调函数接收的参数同 <code>forEach</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> testArr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-built_in">Array</span>.prototype.reduceFilter = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">callback</span>) </span>&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.reduce(<span class="hljs-function">(<span class="hljs-params">acc, cur, index, array</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (callback(cur, index, array)) &#123;<br>      acc.push(cur)<br>    &#125;<br>    <span class="hljs-keyword">return</span> acc<br>  &#125;, [])<br>&#125;<br>testArr.reduceFilter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) <span class="hljs-comment">// 过滤出偶数项。</span><br><span class="hljs-comment">// [2, 4]</span><br></code></pre></td></tr></table></figure><p><code>filter</code> 方法中 <code>callback</code> 返回的是 <code>Boolean</code> 类型，所以通过 <code>if</code> 判断是否要塞入累计器 <code>acc</code> ，并且返回 <code>acc</code> 给下一次对比。最终返回整个过滤后的数组。</p><h3 id="reduce-gt-find"><a href="#reduce-gt-find" class="headerlink" title="reduce -&gt; find"></a>reduce -&gt; find</h3><p><code>find</code> 方法中 <code>callback</code> 同样也是返回 <code>Boolean</code> 类型，返回你要找的第一个符合要求的项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> testArr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-keyword">const</span> testObj = [&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">2</span> &#125;, &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">3</span> &#125;, &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">4</span> &#125;]<br><span class="hljs-built_in">Array</span>.prototype.reduceFind = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">callback</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.reduce(<span class="hljs-function">(<span class="hljs-params">acc, cur, index, array</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (callback(cur, index, array)) &#123;<br>      <span class="hljs-keyword">if</span> (acc <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span> &amp;&amp; acc.length == <span class="hljs-number">0</span>) &#123;<br>      acc = cur<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// 循环到最后若 acc 还是数组，且长度为 0，代表没有找到想要的项，则 acc = undefined</span><br>    <span class="hljs-keyword">if</span> ((index == array.length - <span class="hljs-number">1</span>) &amp;&amp; acc <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span> &amp;&amp; acc.length == <span class="hljs-number">0</span>) &#123;<br>      acc = <span class="hljs-literal">undefined</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> acc<br>  &#125;, [])<br>&#125;<br>testArr.reduceFind(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) <span class="hljs-comment">// 2</span><br>testObj.reduceFind(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.a % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) <span class="hljs-comment">// &#123;a: 2&#125;</span><br>testObj.reduceFind(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.a % <span class="hljs-number">9</span> == <span class="hljs-number">0</span>) <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><p>你不知道操作的数组是对象数组还是普通数组，所以这里只能直接覆盖 <code>acc</code> 的值，找到第一个符合判断标准的值就不再进行赋值操作。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>同学们可能再业务中，对 <code>reduce</code> 使用频率并不高，那是因为你没有很好的去理解它。在很多业务场景下，你用了更麻烦、更冗余的代码完成了你的需求。接下带大家学习一些用 <code>reduce</code> 能解决的问题。</p><h3 id="将二维数组转为一维数组"><a href="#将二维数组转为一维数组" class="headerlink" title="将二维数组转为一维数组"></a>将二维数组转为一维数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> testArr = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>], [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>], [<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]]<br>testArr.reduce(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> acc.concat(cur)<br>&#125;, [])<br><span class="hljs-comment">// [1,2,3,4,5,6]</span><br></code></pre></td></tr></table></figure><h3 id="计算数组中每个元素出现的个数"><a href="#计算数组中每个元素出现的个数" class="headerlink" title="计算数组中每个元素出现的个数"></a>计算数组中每个元素出现的个数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> testArr = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-number">10</span>]<br>testArr.reduce(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!(cur <span class="hljs-keyword">in</span> acc)) &#123;<br>    acc[cur] = <span class="hljs-number">1</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    acc[cur] += <span class="hljs-number">1</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> acc<br>&#125;, &#123;&#125;)<br><br><span class="hljs-comment">// &#123;0: 1, 1: 2, 2: 2, 3: 3, 4: 1, 5: 1, 8: 1, 9: 1, 10: 1, 12: 1&#125;</span><br></code></pre></td></tr></table></figure><h3 id="按属性给数组分类"><a href="#按属性给数组分类" class="headerlink" title="按属性给数组分类"></a>按属性给数组分类</h3><p>什么叫按照属性给数组分类，其实就是给定一个依据，把符合条件的归并到一起。再拿账单举例，就是按各个消费类型归为一类。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> bills = [<br>  &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;shop&#x27;</span>, <span class="hljs-attr">momey</span>: <span class="hljs-number">223</span> &#125;,<br>  &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;study&#x27;</span>, <span class="hljs-attr">momey</span>: <span class="hljs-number">341</span> &#125;,<br>  &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;shop&#x27;</span>, <span class="hljs-attr">momey</span>: <span class="hljs-number">821</span> &#125;,<br>  &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;transfer&#x27;</span>, <span class="hljs-attr">momey</span>: <span class="hljs-number">821</span> &#125;,<br>  &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;study&#x27;</span>, <span class="hljs-attr">momey</span>: <span class="hljs-number">821</span> &#125;<br>];<br>bills.reduce(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 如果不存在这个键，则设置它赋值 [] 空数组</span><br>  <span class="hljs-keyword">if</span> (!acc[cur.type]) &#123;<br>    acc[cur.type] = [];<br>  &#125;<br>  acc[cur.type].push(cur)<br>  <span class="hljs-keyword">return</span> acc<br>&#125;, &#123;&#125;)<br></code></pre></td></tr></table></figure><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> testArr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]<br>testArr.reduce(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!(acc.includes(cur))) &#123;<br>    acc.push(cur)<br>  &#125;<br>  <span class="hljs-keyword">return</span> acc<br>&#125;, [])<br><span class="hljs-comment">// [1, 2, 3, 4, 5, 6, 7]</span><br></code></pre></td></tr></table></figure><p>上述代码逻辑，就是逐一对比，通过 <code>includes</code> 方法检查累计器里是否已经有当前项。</p><h3 id="求最大值或最小值"><a href="#求最大值或最小值" class="headerlink" title="求最大值或最小值"></a>求最大值或最小值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> testArr = [<br>  &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;,<br>  &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">21</span> &#125;,<br>  &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">22</span> &#125;<br>]<br>testArr.reduce(<span class="hljs-function">(<span class="hljs-params">acc, cur</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (!acc) &#123;<br>    acc = cur<br>    <span class="hljs-keyword">return</span> acc<br>  &#125;<br>  <span class="hljs-keyword">if</span> (acc.age &lt; cur.age) &#123;<br>    acc = cur<br>    <span class="hljs-keyword">return</span> acc<br>  &#125;<br>  <span class="hljs-keyword">return</span> acc<br>&#125;, <span class="hljs-number">0</span>)<br><span class="hljs-comment">// &#123;age: 22&#125;</span><br></code></pre></td></tr></table></figure><h3 id="提取数据"><a href="#提取数据" class="headerlink" title="提取数据"></a>提取数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> testArr = [<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;apple&#x27;</span>,<span class="hljs-attr">sales</span>:<span class="hljs-number">79</span>&#125;,<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;huawei&#x27;</span>,<span class="hljs-attr">sales</span>:<span class="hljs-number">89</span>&#125;,<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiaomi&#x27;</span>,<span class="hljs-attr">sales</span>:<span class="hljs-number">99</span>&#125;<br>]<br>testArr.reduce(<span class="hljs-function">(<span class="hljs-params">acc,cur</span>) =&gt;</span> &#123;<br>    acc.push(cur.sales);<br>    <span class="hljs-keyword">return</span> acc;<br>&#125;,[])<br><span class="hljs-comment">// [79, 89, 99]</span><br></code></pre></td></tr></table></figure><p>使用场景未完待续 :)</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>reduce</code> 的使用场景还有非常多，当你遇到数组复杂操作的时候，就是它大显身手的时候。深入研究它，对你今后的业务开发及面试都有很大的帮助。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://juejin.cn/post/6916087983808626701">以前我没得选，现在我只想用 Array.prototype.reduce</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>防抖和节流</title>
    <link href="/2021/01/06/debounce-and-throttle/"/>
    <url>/2021/01/06/debounce-and-throttle/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是防抖和节流？"><a href="#什么是防抖和节流？" class="headerlink" title="什么是防抖和节流？"></a>什么是防抖和节流？</h2><p>这里举个例子，有一个车站，它的任务就是发车，在没有<code>防抖</code>和<code>节流</code>之前，只要车站进一个乘客，车站就发一趟车，简而言之，该模式就是<span class="label label-warning">来一个乘客就发一趟车</span>。这种模式肯定是不行的，假如发车前车站要做很多复杂的准备，那这种模式肯定会使车站炸裂的。那么<code>防抖</code>和<code>节流</code>就两种模式就产生了。</p><p><code>防抖</code>： 给发车这个任务设置一个时间，假如是10分钟，当有一个乘客来车站后，车站开始10分钟计时，如果10分钟内没有乘客再次来车站，那么就发车；反之，如果10分钟内有乘客再次来车站，那么车站将重新10分钟计时，直到10分钟计时期间没有乘客再次来车站时，再发车。</p><p><code>节流</code>： 也给发车这个任务设置一个时间，假如是10分钟，当第一个乘客来到车站后，车站开始10分钟计时，10分钟一到，立马发车，这次发车任务就结束了。以后，当又有第一个乘客来到车站后，也是同样的发车规则。</p><div class="note note-info">            <p>总结下来就是，<code>防抖效果</code>:10分钟内。只要有新的触发产生：从0开始计时。<code>节流效果</code>:10分钟内。只要有新的触发产生：无效，除非之前的操作执行完<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="防抖与节流">[1]</span></a></sup>。</p>          </div><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>说了这些，先来看看如何使用？假设我们有一个这样的场景需求：</p><p>我们需要监控页面的鼠标移动事件，会频繁的触发 <code>mousemove</code> ，而 <code>mousemove</code> 里面有着一些<code>复杂的计算</code>，我们假定事件里面需要进行<code>10万次</code>循环插入数组操作来模拟<code>复杂计算</code>。那么就会导致一个严重的<code>性能问题</code>。反反复复的进行计算，而实际上 <code>mousemove</code> 实在是<code>太勤劳</code>了，我们当中不需要那么“<code>及时</code>”的触发，否则可能会导致占用其他操作时间，例如我们的<code>页面卡顿</code>。于是我们需要引入<code>防抖</code>和<code>节流</code>。</p><p>先来看下我们即将进行的模拟复杂操作（多余的解读：随机生成10万的数字，从大到小排列，最后拼接输出）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100000</span>; i++) &#123;<br>  arr.push(<span class="hljs-built_in">Math</span>.random())<br>&#125;<br>arr.sort(<span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> y - x)<br><span class="hljs-built_in">console</span>.log(arr.join())<br></code></pre></td></tr></table></figure><p>可以看到计算是比较费时的，接下来我们先上代码，<code>mousemove</code> 下的展示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params">&#123;</span></span><br><span class="hljs-function"><span class="hljs-params">    clientY,</span></span><br><span class="hljs-function"><span class="hljs-params">    clientX</span></span><br><span class="hljs-function"><span class="hljs-params">&#125;</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> arr = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100000</span>; i++) &#123;<br>        arr.push(<span class="hljs-built_in">Math</span>.random())<br>    &#125;<br>    arr.sort(<span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> y - x)<br>    <span class="hljs-built_in">console</span>.log(arr.join())<br>    <span class="hljs-built_in">document</span>.body.innerText = <span class="hljs-string">`x:<span class="hljs-subst">$&#123;clientY&#125;</span>,y:<span class="hljs-subst">$&#123;clientX&#125;</span>`</span><br>&#125;<br><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;mousemove&#x27;</span>, handle)<br></code></pre></td></tr></table></figure><p><code>解读</code>：<code>handle函数</code>用于处理 <code>mousemove</code> 的操作，将鼠标的坐标显示到页面上。可以发现现在页面已经有些卡顿了，我们接下来就借助<code>防抖</code>和<code>节流</code>来优化目前的页面体验。</p><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn, time</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> timer;<span class="hljs-comment">//记录定时器</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;<span class="hljs-comment">//返回一个新的函数</span><br>        <span class="hljs-built_in">clearTimeout</span>(timer)<span class="hljs-comment">//如果又被触发了，清除上次的定时器</span><br>        <span class="hljs-built_in">document</span>.body.innerText = <span class="hljs-string">&#x27;鼠标停下展示结果&#x27;</span><br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<span class="hljs-comment">//在下一次事件循环触发，并且记录定时器id，以用于需要清理的时候。</span><br>            fn(event)<br>        &#125;, time)<br>    &#125;<br>&#125;<br><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;mousemove&#x27;</span>, debounce(handle, <span class="hljs-number">100</span>))<span class="hljs-comment">//传入handle函数，100毫秒后触发</span><br></code></pre></td></tr></table></figure><p>页面上展示后可以发现：鼠标一直滑动的时候，页面没动静，但是一旦鼠标停下 100 毫秒以后开始显示内容。</p><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">fn, time</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">false</span>;<span class="hljs-comment">//设置标志位</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (flag) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//如果标志位有定时器id，则说明之前有过任务，撤销本次任务。</span><br>        flag = <span class="hljs-literal">true</span>;<br>        flag = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<span class="hljs-comment">//记录任务id</span><br>            fn(event)<br>            flag = <span class="hljs-literal">false</span>;<span class="hljs-comment">//任务执行完毕，标志位还原</span><br>        &#125;, time)<br>    &#125;<br>&#125;<br><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;mousemove&#x27;</span>, throttle(handle, <span class="hljs-number">100</span>))<span class="hljs-comment">//传入handle函数，100毫秒后触发</span><br></code></pre></td></tr></table></figure><p>页面上展示后可以发现：鼠标滑动的时候，页面也一直在计算，不过不管如何滑动，都会按照指定的时间频率来进行，不会大量触发。</p><p>当然实现防抖和节流未必只有我展示的方式，代码是灵活的，例如第二种throttle方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle2</span>(<span class="hljs-params">fn, time</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> begin = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<span class="hljs-comment">//记录时间</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>() - begin &lt; time) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//减去时间看看差了多少，不满足时间直接return</span><br>        fn(event)<br>        begin = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<span class="hljs-comment">//重置本次记录时间，以便于下次进行比对</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="两者结合"><a href="#两者结合" class="headerlink" title="两者结合"></a>两者结合</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">fn, time, fn2, time2</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">false</span>;<span class="hljs-comment">//节流标志</span><br>    <span class="hljs-keyword">let</span> timer;<span class="hljs-comment">//防抖定时器标志</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;<br>        <span class="hljs-built_in">clearTimeout</span>(timer)<span class="hljs-comment">//清理防抖定时器</span><br>        <span class="hljs-keyword">if</span> (flag) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        flag = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            fn(event)<span class="hljs-comment">//页面显示内容需要实时性比较强，不需要大量计算的ui更新放在这里进行</span><br>            flag = <span class="hljs-literal">false</span>;<br>            timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<span class="hljs-comment">//延时执行复杂运算，鼠标不动的时候就可以有时间进行复杂运算更新。</span><br>                fn2()<br>            &#125;, time2)<br>        &#125;, time)<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle</span>(<span class="hljs-params">&#123;</span></span><br><span class="hljs-function"><span class="hljs-params">    clientY,</span></span><br><span class="hljs-function"><span class="hljs-params">    clientX</span></span><br><span class="hljs-function"><span class="hljs-params">&#125;</span>) </span>&#123;<br>    <span class="hljs-built_in">document</span>.body.innerText = <span class="hljs-string">`x:<span class="hljs-subst">$&#123;clientY&#125;</span>,y:<span class="hljs-subst">$&#123;clientX&#125;</span>`</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handle2</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> arr = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100000</span>; i++) &#123;<br>        arr.push(<span class="hljs-built_in">Math</span>.random())<br>    &#125;<br>    arr.sort(<span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> y - x)<br>    <span class="hljs-built_in">console</span>.log(arr.join())<br><br>&#125;<br><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;mousemove&#x27;</span>, throttle(handle, <span class="hljs-number">10</span>, handle2,<span class="hljs-number">50</span>))<br></code></pre></td></tr></table></figure><p>以上代码便可很好的解决页面卡顿，鼠标移动同时，需要移动到某个地方进行一个大量计算。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里可以简单总结一下这个场景下防抖和节流的使用:</p><ul><li><code>防抖</code>：适合复杂运算的时候不要让它们过于频繁的执行，等页面“冷静”下来再去执行。</li><li><code>节流</code>：必须要间隔固定时间执行一次，ui界面等高优先级的事情让它去做。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://juejin.cn/post/6914186870687694855">防抖与节流</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Async await处理异常问题</title>
    <link href="/2021/01/03/async-await-use/"/>
    <url>/2021/01/03/async-await-use/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="note note-warning">            <p>使用过async和await的朋友都知道需要做异常处理<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="说一说如何解决async await处理异常问题">[1]</span></a></sup>，所以就会用到<code>try catch</code>，只要异步方法过多时，代码中就会出现很多这样的<code>try catch</code>，代码大概如下：</p>          </div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">getData</span>(<span class="hljs-params">type</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            type == <span class="hljs-string">&#x27;01&#x27;</span> ? resolve(<span class="hljs-string">&#x27;resolve&#x27;</span>) : reject(<span class="hljs-string">&#x27;reject&#x27;</span>);<br>        &#125;,<span class="hljs-number">3000</span>)<br>    &#125;)<br>&#125;,<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">asyncAwait</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.getData(<span class="hljs-string">&#x27;01&#x27;</span>);<br>        <span class="hljs-built_in">console</span>.log(res);<br>    &#125;<span class="hljs-keyword">catch</span>(err)&#123;<br>        <span class="hljs-built_in">console</span>.log(err);<br>    &#125;<br><br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.getData(<span class="hljs-string">&#x27;02&#x27;</span>);<br>        <span class="hljs-built_in">console</span>.log(res);<br>    &#125;<span class="hljs-keyword">catch</span>(err)&#123;<br>        <span class="hljs-built_in">console</span>.log(err);<br>    &#125;<br><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在复杂的业务中，这种充斥很多的<code>try catch</code>我实在受不了。势必会想办法解决一下这个问题。<br>首先需要明确的是<code>await</code>后面的<code>promise</code>只有是一个<code>resolve</code>状态，才能正确的拿到其结果。那么要解决这个问题，势必要让异步返回一个<code>resolve</code>状态，但是错误我们不能视而不见，结合<code>nodejs</code>中<code>错误优先</code>，我们可以将错误和结果<code>封装</code>成一个数组返回，那么就有了如下代码了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">getData</span>(<span class="hljs-params">type</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            type == <span class="hljs-string">&#x27;01&#x27;</span> ? resolve(<span class="hljs-string">&#x27;resolve&#x27;</span>) : reject(<span class="hljs-string">&#x27;reject&#x27;</span>);<br>        &#125;,<span class="hljs-number">3000</span>)<br>    &#125;)<br>&#125;,<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 高级的处理,接收一个promise，返回一个resolve状态的promise</span><br><span class="hljs-comment">    * </span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>promise </span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-title">dataHandler</span>(<span class="hljs-params">promise</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> promise.then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>[<span class="hljs-literal">undefined</span>,res]).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>[err,<span class="hljs-literal">undefined</span>])<br>&#125;,<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">asyncAwait</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> err,res;<br>    [err,res] = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.dataHandler(<span class="hljs-built_in">this</span>.getData(<span class="hljs-string">&#x27;01&#x27;</span>));<br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;1报错&#x27;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;业务处理1&#x27;</span>);<br>    &#125;<br><br>    [err,res] = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.dataHandler(<span class="hljs-built_in">this</span>.getData(<span class="hljs-string">&#x27;02&#x27;</span>));<br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;2报错&#x27;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;业务处理2&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>经过这样一转换，你可以优先判断有没有错误，然后再处理你的业务。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://juejin.cn/post/6912112597596635150">说一说如何解决async await处理异常问题</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>ES7</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020年度总结</title>
    <link href="/2020/12/30/summary-2020/"/>
    <url>/2020/12/30/summary-2020/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>时间如白驹过隙，2020就这样悄悄溜走了，些许感叹！第一次这么正式地写年度总结，还是挺紧张的，主要还是因为自己在这一年做的事情太少，还是好好回忆下，写点东西。</p>          </div><h2 id="干了些什么？"><a href="#干了些什么？" class="headerlink" title="干了些什么？"></a>干了些什么？</h2><div>            <input type="checkbox" disabled checked="checked">基于Vue2.0和Webpack4搭建脚手架          </div><div>            <input type="checkbox" disabled checked="checked">基于React Hooks && Antd UI搭建了博客前台          </div><div>            <input type="checkbox" disabled checked="checked">基于React && Node && Antd搭建了博客后台          </div><div>            <input type="checkbox" disabled checked="checked">基于Node && Express && Mongoose搭建了博客中台          </div><div>            <input type="checkbox" disabled checked="checked">写了26篇很水的博客          </div><div>            <input type="checkbox" disabled checked="checked">基于hexo && fluid主题搭建博客，并且博客迁移          </div><h2 id="明年计划"><a href="#明年计划" class="headerlink" title="明年计划"></a>明年计划</h2><ul><li>写50篇博客</li><li>学三个不熟的技术（Node,ReactJs,Vue3）</li><li>开发一些简单的npm包</li><li>学习权鉴，项目上线，加解密，网络安全知识</li></ul>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>2020</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello Fluid !</title>
    <link href="/2020/12/17/hello-fluid/"/>
    <url>/2020/12/17/hello-fluid/</url>
    
    <content type="html"><![CDATA[<h2 id="头部怎么写？"><a href="#头部怎么写？" class="headerlink" title="头部怎么写？"></a>头部怎么写？</h2><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: hello-fluid<br>author: Revan<br>date: 2020<span class="hljs-string">-10</span><span class="hljs-string">-17</span> 20:00:00<br>index_img: https://rmt.dogedoge.com/fetch/fluid/storage/hexo-injector/cover.png?w=480&amp;fmt=webp<br>category: 主题示例<br><span class="hljs-keyword">tags:</span><br>  - 示例<br>  - Fluid<br>excerpt: 想增加一些花里胡哨的功能又不想修改主题源代码？本文介绍 Hexo 官方支持的一种无侵入式的修改方式，适用于所有主题。<br></code></pre></td></tr></table></figure><h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><blockquote><p>欢迎体验 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a> ，这是一款 Material Design 风格的 Hexo 主题，以简约的设计帮助你专注于写作，本篇文章可预览主题的样式及功能。</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">&gt;欢迎体验 [Fluid](https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/fluid-dev/</span>hexo-theme-fluid) ，这是一款 Material Design 风格的 Hexo 主题，以简约的设计帮助你专注于写作，本篇文章可预览主题的样式及功能。<br></code></pre></td></tr></table></figure><!-- more --><h2 id="H2-标题"><a href="#H2-标题" class="headerlink" title="H2 标题"></a>H2 标题</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">## H2 标题<br></code></pre></td></tr></table></figure><h3 id="H3-标题"><a href="#H3-标题" class="headerlink" title="H3 标题"></a>H3 标题</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">### H3 标题<br></code></pre></td></tr></table></figure><h4 id="H4-标题"><a href="#H4-标题" class="headerlink" title="H4 标题"></a>H4 标题</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">#### H4 标题<br></code></pre></td></tr></table></figure><p><strong>粗体</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">*<span class="hljs-strong">*粗体*</span><span class="hljs-strong">*</span><br></code></pre></td></tr></table></figure><p><em>斜体</em></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-literal">_</span>斜体<span class="hljs-literal">_</span><br></code></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>行内代码：<code>$ hexo new post &quot;My New Post&quot;</code></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">行内代码：`$ hexo <span class="hljs-built_in">new</span> <span class="hljs-built_in">post</span> <span class="hljs-string">&quot;My New Post&quot;</span>`<br></code></pre></td></tr></table></figure><p>代码高亮使用的是 highlight.js，支持 185 种语言和 91 种高亮样式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> Pending = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;Pending&#x27;</span>); <span class="hljs-comment">// 进行中</span><br><span class="hljs-keyword">const</span> Fulfilled = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;Fulfilled&#x27;</span>); <span class="hljs-comment">// 已成功</span><br><span class="hljs-keyword">const</span> Rejected = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;Rejected&#x27;</span>); <span class="hljs-comment">// 已失败</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Promise</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">executor</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.status = Pending;<span class="hljs-comment">//存储 Promise 的状态</span><br>        <span class="hljs-keyword">const</span> resolve = <span class="hljs-function">() =&gt;</span>&#123;<br>            <span class="hljs-comment">// 只有当状态为 Pending 才会改变，来保证一旦状态改变就不会再变。</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.status === Pending)&#123;<br>                <span class="hljs-built_in">this</span>.status = Fulfilled;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">const</span> reject = <span class="hljs-function">() =&gt;</span>&#123;<br>            <span class="hljs-comment">// 只有当状态为 Pending 才会改变，来保证一旦状态改变就不会再变。</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.status === Pending)&#123;<br>                <span class="hljs-built_in">this</span>.status = Rejected;<br>            &#125;<br>        &#125;;<br>        executor(resolve,reject);<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>Header 1</th><th>Header 2</th><th>Header 3</th></tr></thead><tbody><tr><td>Key 1</td><td>Value 1</td><td>Comment 1</td></tr><tr><td>Key 2</td><td>Value 2</td><td>Comment 2</td></tr><tr><td>Key 3</td><td>Value 3</td><td>Comment 3</td></tr></tbody></table><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> Header 1 </span>|<span class="hljs-string"> Header 2 </span>|<span class="hljs-string"> Header 3 </span>|<br>|<span class="hljs-string"> --- </span>|<span class="hljs-string"> --- </span>|<span class="hljs-string"> --- </span>|<br>|<span class="hljs-string"> Key 1 </span>|<span class="hljs-string"> Value 1 </span>|<span class="hljs-string"> Comment 1 </span>|<br>|<span class="hljs-string"> Key 2 </span>|<span class="hljs-string"> Value 2 </span>|<span class="hljs-string"> Comment 2 </span>|<br>|<span class="hljs-string"> Key 3 </span>|<span class="hljs-string"> Value 3 </span>|<span class="hljs-string"> Comment 3 </span>|<br></code></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>Fluid 相较于其他主题的优势：</p><ol><li>设计遵循简洁至上，同时具有轻快的体验，和优雅的颜值；</li><li>提供大量定制化配置项，使每个用户使用该主题都能具有独特的样式；</li><li>响应式页面，适配手机、平板等设备；</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 设计遵循简洁至上，同时具有轻快的体验，和优雅的颜值；<br><span class="hljs-bullet">2.</span> 提供大量定制化配置项，使每个用户使用该主题都能具有独特的样式；<br><span class="hljs-bullet">3.</span> 响应式页面，适配手机、平板等设备；<br></code></pre></td></tr></table></figure><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>Fluid 功能特性：</p><ul><li>图片懒加载</li><li>自定义代码高亮方案</li><li>内置多语言</li><li>支持多款评论插件</li><li>支持使用数据文件存放配置</li><li>自定义静态资源 CDN</li><li>内置文章搜索</li><li>页脚备案信息</li><li>网页访问统计</li><li>支持 LaTeX 数学公式</li><li>支持 mermaid 流程图</li><li>音乐播放器</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>图片懒加载<br><span class="hljs-bullet">- </span>自定义代码高亮方案<br><span class="hljs-bullet">- </span>内置多语言<br><span class="hljs-bullet">- </span>支持多款评论插件<br><span class="hljs-bullet">- </span>支持使用数据文件存放配置<br><span class="hljs-bullet">- </span>自定义静态资源 CDN<br><span class="hljs-bullet">- </span>内置文章搜索<br><span class="hljs-bullet">- </span>页脚备案信息<br><span class="hljs-bullet">- </span>网页访问统计<br><span class="hljs-bullet">- </span>支持 LaTeX 数学公式<br><span class="hljs-bullet">- </span>支持 mermaid 流程图<br><span class="hljs-bullet">- </span>音乐播放器<br></code></pre></td></tr></table></figure><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://rmt.dogedoge.com/fetch/fluid/storage/post.png?w=1280&fmt=webp"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">![](https:<span class="hljs-regexp">//</span>rmt.dogedoge.com<span class="hljs-regexp">/fetch/</span>fluid<span class="hljs-regexp">/storage/</span>post.png?w=<span class="hljs-number">1280</span>&amp;fmt=webp)<br></code></pre></td></tr></table></figure><h2 id="内置-Tag-插件"><a href="#内置-Tag-插件" class="headerlink" title="内置 Tag 插件"></a>内置 Tag 插件</h2><p>内置了一些 Tag 插件，用于实现 Markdown 不容易生成的样式，具体使用方式请见 <a href="https://hexo.fluid-dev.com/docs/guide/#tag-%E6%8F%92%E4%BB%B6">用户指南</a>。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">内置了一些 Tag 插件，用于实现 Markdown 不容易生成的样式，具体使用方式请见 [用户指南](https://hexo.fluid-dev.com/docs/guide/#tag-<span class="hljs-variable">%E6</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%92</span><span class="hljs-variable">%E4</span><span class="hljs-variable">%BB</span><span class="hljs-variable">%B6</span>)。<br></code></pre></td></tr></table></figure><h3 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h3><div class="note note-info">            <p>这里可以写文字 或者 <code>markdown</code></p>          </div><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;% <span class="hljs-name">note</span> info %&#125;</span><br><span class="xml">这里可以写文字 或者 `markdown`</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name">endnote</span> %&#125;</span><br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>这里可以写文字 或者 <code>markdown</code></p>          </div><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;% <span class="hljs-name">note</span> warning %&#125;</span><br><span class="xml">这里可以写文字 或者 `markdown`</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name">endnote</span> %&#125;</span><br></code></pre></td></tr></table></figure><div class="note note-primary">            <p>这里可以写文字 或者 <code>markdown</code></p>          </div><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;% <span class="hljs-name">note</span> primary %&#125;</span><br><span class="xml">这里可以写文字 或者 `markdown`</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name">endnote</span> %&#125;</span><br></code></pre></td></tr></table></figure><h3 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h3><span class="label label-info">行内标签</span> <span class="label label-warning">行内标签</span> <span class="label label-primary">行内标签</span><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">&#123;% label info @行内标签 %&#125; &#123;% label <span class="hljs-keyword">warning</span> @行内标签 %&#125; &#123;% label primary @行内标签 %&#125;<br></code></pre></td></tr></table></figure><h3 id="勾选框"><a href="#勾选框" class="headerlink" title="勾选框"></a>勾选框</h3><div>            <input type="checkbox" disabled checked="checked">主要是解决一些 Renderer 不支持勾选          </div><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;% cb 主要是解决一些 Renderer 不支持勾选, <span class="hljs-literal">true</span> %&#125;<br></code></pre></td></tr></table></figure><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><a class="btn" href="javascript:;"  target="_blank">支持链接</a><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;% <span class="hljs-name">btn</span> javascript:;, 支持链接 %&#125;</span><br></code></pre></td></tr></table></figure><h3 id="组图"><a href="#组图" class="headerlink" title="组图"></a>组图</h3><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://rmt.dogedoge.com/fetch/fluid/storage/hello-fluid/cover.png?w=480&fmt=webp"></div><div class="group-image-wrap"><img src="https://rmt.dogedoge.com/fetch/fluid/storage/hello-fluid/cover.png?w=480&fmt=webp"></div><div class="group-image-wrap"><img src="https://rmt.dogedoge.com/fetch/fluid/storage/hello-fluid/cover.png?w=480&fmt=webp"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://rmt.dogedoge.com/fetch/fluid/storage/hello-fluid/cover.png?w=480&fmt=webp"></div><div class="group-image-wrap"><img src="https://rmt.dogedoge.com/fetch/fluid/storage/hello-fluid/cover.png?w=480&fmt=webp"></div></div></div><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">&#123;% gi <span class="hljs-number">5</span> <span class="hljs-number">3</span>-<span class="hljs-number">2</span> %&#125;<br>  ![](https:<span class="hljs-regexp">//</span>rmt.dogedoge.com<span class="hljs-regexp">/fetch/</span>fluid<span class="hljs-regexp">/storage/</span>hello-fluid/cover.png?w=<span class="hljs-number">480</span>&amp;fmt=webp)<br>  ![](https:<span class="hljs-regexp">//</span>rmt.dogedoge.com<span class="hljs-regexp">/fetch/</span>fluid<span class="hljs-regexp">/storage/</span>hello-fluid/cover.png?w=<span class="hljs-number">480</span>&amp;fmt=webp)<br>  ![](https:<span class="hljs-regexp">//</span>rmt.dogedoge.com<span class="hljs-regexp">/fetch/</span>fluid<span class="hljs-regexp">/storage/</span>hello-fluid/cover.png?w=<span class="hljs-number">480</span>&amp;fmt=webp)<br>  ![](https:<span class="hljs-regexp">//</span>rmt.dogedoge.com<span class="hljs-regexp">/fetch/</span>fluid<span class="hljs-regexp">/storage/</span>hello-fluid/cover.png?w=<span class="hljs-number">480</span>&amp;fmt=webp)<br>  ![](https:<span class="hljs-regexp">//</span>rmt.dogedoge.com<span class="hljs-regexp">/fetch/</span>fluid<span class="hljs-regexp">/storage/</span>hello-fluid/cover.png?w=<span class="hljs-number">480</span>&amp;fmt=webp)<br>&#123;% endgi %&#125;<br></code></pre></td></tr></table></figure><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>以下是脚注演示<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="脚注演示">[1]</span></a></sup>：</p><p>如果你有 Fluid 主题或 Hexo 博客相关的文章，可以通过 Pull Request 方式投稿<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="投稿具体详见https://github.com/fluid-dev/hexo-fluid-blog">[2]</span></a></sup>。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>脚注演示<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>投稿具体详见<a href="https://github.com/fluid-dev/hexo-fluid-blog">https://github.com/fluid-dev/hexo-fluid-blog</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>主题示例</category>
      
    </categories>
    
    
    <tags>
      
      <tag>示例</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Vue中轻松使用svg图标</title>
    <link href="/2020/12/15/svg-component-use/"/>
    <url>/2020/12/15/svg-component-use/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在项目中引入本地图片作为图标的时候，总需要查找文件路径，有时<code>../../</code>需要写很长，就显得很不专业也不方便，如果能像<code>element-ui</code>那样直接<code>&lt;el-icon name=&quot;icon-file-name&quot;&gt;&lt;/el-icon&gt;</code>就好了:D</p></blockquote><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><div align=center>    <img src="target.gif" /></div><div class="note note-info">            <p>首先能像element-ui一样简单以组件的方式引入图标，其次能向上图一样列出svg图库，鼠标点击就能够复制该图标使用的代码，如下：</p>          </div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;svg-icon :icon-<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;18&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><h2 id="svg雪碧图"><a href="#svg雪碧图" class="headerlink" title="svg雪碧图"></a>svg雪碧图</h2><p>网上搜寻了一圈，一个简单的解决方案是——<code>svg雪碧图</code>。它的<code>工作原理</code>是: <strong>利用svg的symbol元素，将每个icon包括在symbol中，通过use元素使用该symbol.</strong><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="懒人神器：svg-sprite-loader实现自己的Icon组件">[1]</span></a></sup></p><p>这里简单一点的解释就是，最终你的svg icon会变成下面这个样子的 <code>svg 雪碧图</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="hljs-attr">xmlns:xlink</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/xlink&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;__SVG_SPRITE_NODE__&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">symbol</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 1024 1024&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;icon名&quot;</span>&gt;</span>&#123;&#123;省略的icon path&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">symbol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">symbol</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 1024 1024&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;icon名&quot;</span>&gt;</span>&#123;&#123;省略的icon path&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">symbol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br></code></pre></td></tr></table></figure><p>你的每一个<code>icon</code>都对应着一个<code>symbol</code>元素。然后在你的<code>html</code>中，<code>引入</code>这样的svg, 随后通过<code>use</code>在任何你需要icon的地方指向symbol:</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">use</span> <span class="hljs-attr">xlink:href</span>=<span class="hljs-string">&quot;#symbolId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">use</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>这个过程中，我们可以把symbol理解为sketch中内置的图形，当你需要使用的时候，把这个形状”<code>拖拽</code>”到你的<code>画板</code>中就行了。而<code>use</code>就是这个过程中的”拖拽”行为。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><div>            <input type="checkbox" disabled checked="checked">下载svg图片，这里是在阿里图标库中下载的          </div><a class="btn" href="https://www.iconfont.cn/"  target="_blank">阿里图标库</a><div>            <input type="checkbox" disabled checked="checked">安装插件：svg-sprite-loader          </div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> <span class="hljs-comment">--save svg-sprite-loader</span><br></code></pre></td></tr></table></figure><div>            <input type="checkbox" disabled checked="checked">安装插件：v-clipboard          </div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> <span class="hljs-comment">--save v-clipboard</span><br></code></pre></td></tr></table></figure><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>先从阿里图标库中下载一些svg图片，存放路径为<code>/src/icons/svg</code>,然后在 <code>webpack.base.conf.js</code> 文件中添加 <code>rules</code> 配置<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="vue 使用svg图片 svg-sprite-loader">[2]</span></a></sup></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//webpack.base.conf.js</span><br>&#123;<br>    test: <span class="hljs-regexp">/\.svg$/</span>,<br>    loader: <span class="hljs-string">&quot;svg-sprite-loader&quot;</span>,<br>    include: [path.resolve(__dirname, <span class="hljs-string">&#x27;../src/icons/svg&#x27;</span>)],<span class="hljs-comment">//包括字体图标文件</span><br>    <span class="hljs-comment">// options: &#123;</span><br>        <span class="hljs-comment">//symbolId: &#x27;icon-[name]&#x27; //这个没有生效，生效的是默认的name</span><br>    <span class="hljs-comment">// &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后修改 <code>url-loader</code> 配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">//webpack.base.conf.js</span><br>&#123;<br>    test: <span class="hljs-regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,<br>    loader: <span class="hljs-string">&quot;url-loader&quot;</span>,<br>    exclude: [<br>        path.resolve(__dirname, <span class="hljs-string">&#x27;../src/icons/svg&#x27;</span>), <span class="hljs-comment">//排除字体图标文件</span><br>    ],<br>    options: &#123;<br>        limit: <span class="hljs-number">10000</span>,<br>        name: utils.assetsPath(<span class="hljs-string">&quot;img/[name].[hash:7].[ext]&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>这样配置的目的就是为了让<code>svg-sprite-loader</code>只处理我们想要处理的svg文件，这些文件存放于指定的文件夹下。</p>          </div><p>创建 vue 组件 svg-icon</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!-- @/components/SvgIcon --&gt;<br>&lt;template&gt;<br>    &lt;svg :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;svgClass&quot;</span> aria-hidden=<span class="hljs-string">&quot;true&quot;</span>&gt;<br>        &lt;use :xlink:href=<span class="hljs-string">&quot;iconName&quot;</span>&gt;&lt;/use&gt;<br>    &lt;/svg&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * svg 图标组件</span><br><span class="hljs-comment"> * iconClass=&quot;图标名称&quot;</span><br><span class="hljs-comment"> * className=&quot;风格名称&quot;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;svg-icon&#x27;</span>,<br>  props: &#123;<br>    iconClass: &#123; <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>, <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span> &#125;,<br>    className: &#123; <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span> &#125;<br>  &#125;,<br>  computed: &#123;<br>    iconName () &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">`#<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.iconClass&#125;</span>`</span><br>    &#125;,<br>    svgClass () &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.className) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;svg-icon &#x27;</span> + <span class="hljs-built_in">this</span>.className<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;svg-icon&#x27;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.svg-icon &#123;<br>  width: 20em;<br>  height: 20em;<br>  vertical-align: -<span class="hljs-number">0.</span>15em;<br>  fill: currentColor;<br>  overflow: hidden;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>在svg文件目录/src/icons里新建index.js文件,文件路径为<code>/src/icons/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//index.js</span><br><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> SvgIcon <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/SvgIcon&#x27;</span><br><span class="hljs-comment">/* require.context(&quot;./test&quot;, false, /.test.js$/);</span><br><span class="hljs-comment">    这行代码就会去 test 文件夹（不包含子目录） 下面的找所有文件名以 .test.js 结尾的文件能被 require 的文件。</span><br><span class="hljs-comment">    更直白的说就是 我们可以通过正则匹配引入相应的文件模块。</span><br><span class="hljs-comment">     require.context有三个参数：</span><br><span class="hljs-comment">     directory：说明需要检索的目录</span><br><span class="hljs-comment">     useSubdirectories：是否检索子目录</span><br><span class="hljs-comment">     regExp: 匹配文件的正则表达式 */</span><br><span class="hljs-comment">// 全局注册</span><br>Vue.component(<span class="hljs-string">&#x27;svg-icon&#x27;</span>, SvgIcon)<br><span class="hljs-keyword">const</span> requireAll = <span class="hljs-function"><span class="hljs-params">requireContext</span> =&gt;</span> requireContext.keys().map(requireContext)<br><span class="hljs-keyword">const</span> req = <span class="hljs-built_in">require</span>.context(<span class="hljs-string">&#x27;./svg&#x27;</span>, <span class="hljs-literal">false</span>, <span class="hljs-regexp">/\.svg$/</span>)<br>requireAll(req)<br></code></pre></td></tr></table></figure><p>在main.js中引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./src/icons/index.js&#x27;</span><br></code></pre></td></tr></table></figure><p>这样就能在vue中使用了 具体格式如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg-icon</span> <span class="hljs-attr">icon-class</span>=<span class="hljs-string">&quot;svg文件名&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="项目中svg图标快捷使用"><a href="#项目中svg图标快捷使用" class="headerlink" title="项目中svg图标快捷使用"></a>项目中svg图标快捷使用</h2><p>到此为止，已经能够实现svg图标当作组件使用了，接下来实现片头动画效果，即点击某个svg图标就得到该图标在项目中使用的代码，这就需要用到插件<code>v-clipboard</code>了</p><p>在main.js中引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用clipboard.js进行一键复制文本</span><br><span class="hljs-keyword">import</span> Clipboard <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;v-clipboard&#x27;</span>;<br>Vue.use(Clipboard)<br></code></pre></td></tr></table></figure><p>新建要展示svg图库的页面<code>SvgChoose.vue</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>    &lt;section <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;svg-area&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>            &lt;el-row :gutter=<span class="hljs-string">&quot;20&quot;</span>&gt;<br>                &lt;el-col<br>                    v-clipboard=<span class="hljs-string">&quot;`&lt;svg-icon :icon-class=&amp;quot;$&#123;index + 1&#125;&amp;quot;/&gt;`&quot;</span><br>                    v-clipboard:success=<span class="hljs-string">&quot;clipboardSuccessHandler&quot;</span><br>                    v-clipboard:error=<span class="hljs-string">&quot;clipboardErrorHandler&quot;</span><br>                    :span=<span class="hljs-string">&quot;2&quot;</span><br>                    v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;(item, index) in 20&quot;</span><br>                    :key=<span class="hljs-string">&quot;index&quot;</span><br>                    <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;single flex-ac flex-pc&quot;</span><br>                &gt;<br>                    &lt;svg-icon :icon-<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;index + 1 + &#x27;&#x27;&quot;</span> /&gt;<br>                &lt;/el-col&gt;<br>            &lt;/el-row&gt;<br>        &lt;/div&gt;<br>    &lt;/section&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;&#125;,<br>    methods: &#123;<br>        <span class="hljs-comment">//定义复制失败的回调</span><br>        <span class="hljs-function"><span class="hljs-title">clipboardSuccessHandler</span>(<span class="hljs-params">&#123; value, event &#125;</span>)</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;success&#x27;</span>, value);<br>            <span class="hljs-built_in">this</span>.$message.success(<span class="hljs-string">&#x27;代码复制成功，前往粘贴&#x27;</span>);<br>        &#125;,<br>        <span class="hljs-comment">//定义复制成功的回调方法</span><br>        <span class="hljs-function"><span class="hljs-title">clipboardErrorHandler</span>(<span class="hljs-params">&#123; value, event &#125;</span>)</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;error&#x27;</span>, value);<br>        &#125;,<br>    &#125;,<br>    components: &#123;&#125;,<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=<span class="hljs-string">&quot;less&quot;</span> scoped&gt;<br>.svg-area &#123;<br>    .el-row &#123;<br>        margin-bottom: 20px;<br>        &amp;:last-child &#123;<br>            margin-bottom: <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    .el-col &#123;<br>        border-radius: 4px;<br>    &#125;<br>    .bg-purple-dark &#123;<br>        background: #99a9bf;<br>    &#125;<br>    .bg-purple &#123;<br>        background: #d3dce6;<br>    &#125;<br>    .bg-purple-light &#123;<br>        background: #e5e9f2;<br>    &#125;<br>    .grid-content &#123;<br>        border-radius: 4px;<br>        min-height: 36px;<br>    &#125;<br>    .row-bg &#123;<br>        padding: 10px <span class="hljs-number">0</span>;<br>        background-color: #f9fafc;<br>    &#125;<br>    .single &#123;<br>        cursor: pointer;<br>        height: 40em;<br>        &amp;:hover &#123;<br>            background: #f0f0f0;<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>上述文件使用需要事先准备一些svg图片，命名从<code>1.svg</code>开始递增，项目中还需要引入element-ui达到整体布局和点击弹框。</p>          </div><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://segmentfault.com/a/1190000015367490">懒人神器：svg-sprite-loader实现自己的Icon组件</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://juejin.cn/post/6844903778244624391">vue 使用svg图片 svg-sprite-loader</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>svg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue中watch如何正确使用</title>
    <link href="/2020/11/26/vue-watcher-use/"/>
    <url>/2020/11/26/vue-watcher-use/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>之前写vue项目的时候,涉及到<code>watch</code>监听<code>props</code>中的数据时，总产生一个未知的bug,利用<code>console log</code>去排除问题，却找不出问题所在。举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 父组件（部分代码省略）</span><br>&lt;template&gt;<br>    &lt;section&gt;<br>        &lt;ListCom :listArr=<span class="hljs-string">&quot;list&quot;</span>&gt;&lt;/ListCom&gt;<br>    &lt;/section&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            list : []<br>        &#125;;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-built_in">this</span>.list.push(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;vanlus&#x27;</span>,<span class="hljs-attr">level</span>:<span class="hljs-string">&#x27;001&#x27;</span>&#125;)<br>        &#125;,<span class="hljs-number">3000</span>)<br>    &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 子组件</span><br>&lt;template&gt;<br>    &lt;section <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;template-area&quot;</span>&gt;<br>        &lt;ul&gt;<br>            &lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;(item,index) in listArr&quot;</span> :key=<span class="hljs-string">&quot;index&quot;</span>&gt;&#123;&#123;item.name&#125;&#125;&lt;/li&gt;<br>        &lt;/ul&gt;<br>    &lt;/section&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    props :&#123;<br>        listArr : &#123;<br>            type : <span class="hljs-built_in">Array</span><br>        &#125;<br>    &#125;,<br>    watch:&#123;<br>        listArr : &#123;<br>            <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">newVal,oldVal</span>)</span>&#123;<br>                <span class="hljs-keyword">if</span>(newVal != oldVal)&#123;<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;变化了&#x27;</span>);<br>                    <span class="hljs-built_in">console</span>.log(newVal);<br>                    <span class="hljs-built_in">console</span>.log(newVal[<span class="hljs-number">0</span>].name);<br>                &#125;<br>            &#125;,<br>            deep :<span class="hljs-literal">true</span>,<br>            immediate : <span class="hljs-literal">true</span><br>        &#125;<br>    &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>这时候，F12查看控制台，报错了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[Vue warn]: <span class="hljs-built_in">Error</span> <span class="hljs-keyword">in</span> callback <span class="hljs-keyword">for</span> immediate watcher <span class="hljs-string">&quot;listArr&quot;</span>: <span class="hljs-string">&quot;TypeError: Cannot read property &#x27;name&#x27; of undefined&quot;</span><br></code></pre></td></tr></table></figure><p>再去<code>console log</code> 看一下输出了什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 变化了</span><br><span class="hljs-comment">// [&#123;name:&#x27;vanlus&#x27;,level:&#x27;001&#x27;&#125;]</span><br></code></pre></td></tr></table></figure><p>这就很奇怪了，明明有值，为什么还报错。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><blockquote><p>在WebKit中,JavaScript中的console.log函数是异步的</p></blockquote><p>浏览器F12打开控制台,分别敲下面这两段代码,并且拉开显示全部结果，你就会发现问题了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-built_in">console</span>.log(arr)<br>arr.push(<span class="hljs-number">5</span>)<br><span class="hljs-built_in">console</span>.log(arr)<br></code></pre></td></tr></table></figure><p><img src="01.png" alt="01"><br>展开<br><img src="02.jpg" alt="02"></p><p>显示的不一样，但拉开发现结果是一样的，这是为什么呢？《JavaScript异步编程》书中是这么解释的：</p><blockquote><p>WebKit的console.log并没有立即拍摄对象快照，相反，它只存储了一个<code>指向对象的引用</code>，然后在代码返回事件队列时才去拍摄快照。而chrome的内核正是webkit；Node的console.log是另一回事，它是严格同步的，因此同样的代码输出却是正确的。<br>书中指出，JavaScript 环境提供的异步函数一般分为两大类：<code>I/O函数</code>和<code>计时函数</code>。console.log就是一个I/O函数。对于引用类型，console.log会先储存一个引用，因此在打印<code>引用类型</code>时<code>结果不一定准确</code>。</p></blockquote><p>所以 console.log 到底是同步还是异步<code>取决于运行环境</code>。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>对于<code>引用类型</code>的值，父组件中data里面有<code>初始值</code>，并且<code>值发生变化</code>再传输给子组件并使用该值时，建议这么判断。<br><img src="desc.jpg" alt="desc"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">watch:&#123;<br>    listArr : &#123;<br>        <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">newVal,oldVal</span>)</span>&#123;<br>            <span class="hljs-comment">// 可以在这里判断，判断准则看下面总结</span><br>            <span class="hljs-keyword">if</span>(newVal.length)&#123;<br>                <span class="hljs-built_in">console</span>.log(newVal[<span class="hljs-number">0</span>].name);<br>            &#125;<br>        &#125;,<br>        deep :<span class="hljs-literal">true</span>,<br>        immediate : <span class="hljs-literal">true</span><br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>父子组件传值过程大概描述如下图，<code>子组件</code>没有default值，<code>父组件</code>有一个初始化值（<code>引用类型</code>），而后又再次请求设置了一个新值。<br><img src="res.jpg" alt="res"></p><p>组件传值以及监听流程如下（<code>deep</code>和<code>immediate</code>都为<code>true</code>）：<br>1.第一次，监听的值发生改变，前后值分别是<code>undefined</code>和<code>[]</code>,能触发watch中的handler函数，并且<code>前后值确实不一样</code>，这时候监听的值等于<code>一个引用类型地址</code>，而不仅仅等于一个空数组：<code>[]</code>；<br>2.父组件中的值发生变化；<br>3.第二次，监听的值发生改变, 前后值分别是<code>[]</code>和<code>[&#39;小明&#39;,&#39;小红&#39;]</code>,能触发watch中的handler函数,但是由于两者是<code>同一个引用类型地址</code>，所以此时两者的值是相等的。</p><p>这也就解释了为什么最上面代码报错，因为发生在第一次，数据还没到位。但是却能打印出值，这是因为，console log异步给造成的一种错觉：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(newVal != oldVal)&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;变化了&#x27;</span>);<br>    <span class="hljs-built_in">console</span>.log(newVal);<br>    <span class="hljs-built_in">console</span>.log(newVal[<span class="hljs-number">0</span>].name);<br>&#125;<br></code></pre></td></tr></table></figure><p>未完待续 :D</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Echarts画图实践</title>
    <link href="/2020/11/13/echarts-operation/"/>
    <url>/2020/11/13/echarts-operation/</url>
    
    <content type="html"><![CDATA[<blockquote><p>ECharts，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上。最近一直在做大屏数据可视化，用到最多踩坑最多的就是ECharts了。因此记录一下期间利用ECharts画的各种图。</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>安装ECharts<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install echarts --save<br></code></pre></td></tr></table></figure></li><li>安装vue-count-to<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">npm install vue-count-to<br></code></pre></td></tr></table></figure>全局引入组件<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> countTo <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-count-to&#x27;</span>;<br>Vue.component(<span class="hljs-string">&#x27;countTo&#x27;</span>, countTo);<br></code></pre></td></tr></table></figure></li></ol><h2 id="滚动进度条"><a href="#滚动进度条" class="headerlink" title="滚动进度条"></a>滚动进度条</h2><div align=center>    <img src="percent.gif" /></div><p>需求：</p><ul><li>进度条有背景，内有边距轮廓</li><li>进度条颜色渐变</li><li>进度条和值定时滚动</li></ul><p>混合mixins.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> mixinMethods = &#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            timerList:[]<br>        &#125;;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-comment">// let randomTimer = Math.floor(Math.random() * 10) + 10;</span><br>        <span class="hljs-keyword">const</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-built_in">this</span>.timeKey = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br>        &#125;, <span class="hljs-number">5000</span>);<br>        <span class="hljs-built_in">this</span>.timerList.push(timer);<br>    &#125;,<br>    methods: &#123;<br>        <span class="hljs-comment">// 清空定时器</span><br>        <span class="hljs-function"><span class="hljs-title">clearTimer</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-built_in">this</span>.timerList.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;  <br>                <span class="hljs-built_in">clearInterval</span>(item);<br>            &#125;);<br>        &#125;,<br>    &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>组件Process.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>    &lt;section <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;process-area flex flex-ac&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;title&quot;</span>&gt;<br>            &lt;p <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;main&quot;</span>&gt;<br>                &lt;span&gt;&#123;&#123; title &#125;&#125;&lt;/span<br>                &gt;近视人数<br>            &lt;/p&gt;<br>            &lt;p <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;tag&quot;</span>&gt;&#123;&#123; desc &#125;&#125;&lt;/p&gt;<br>        &lt;/div&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;num-show&quot;</span>&gt;<br>            &lt;span :style=<span class="hljs-string">&quot;&#123; color: color &#125;&quot;</span>&gt;<br>                &lt;countTo<br>                    :style=<span class="hljs-string">&quot;&#123; color: color &#125;&quot;</span><br>                    :key=<span class="hljs-string">&quot;timeKey&quot;</span><br>                    :separator=<span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span><br>                    :endVal=<span class="hljs-string">&quot;num || 0&quot;</span><br>                    :duration=<span class="hljs-string">&quot;1500&quot;</span><br>                &gt;&lt;/countTo&gt;<br>            &lt;/span&gt;<br>        &lt;/div&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;view&quot;</span> ref=<span class="hljs-string">&quot;barView&quot;</span>&gt;&lt;/div&gt;<br>    &lt;/section&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-comment">// // 引入 ECharts 主模块</span><br><span class="hljs-keyword">let</span> echarts = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;echarts/lib/echarts&#x27;</span>);<br><span class="hljs-comment">// // 引入饼图</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;echarts/lib/chart/bar&#x27;</span>);<br><span class="hljs-keyword">import</span> &#123; mixinMethods &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../../mixins/mixins.js&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    mixins: [mixinMethods],<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            timeKey: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime(),<br>        &#125;;<br>    &#125;,<br>    props: &#123;<br>        title: &#123;<br>            type: <span class="hljs-built_in">String</span>,<br>        &#125;,<br>        desc: &#123;<br>            type: <span class="hljs-built_in">String</span>,<br>        &#125;,<br>        percent: &#123;<br>            type: <span class="hljs-built_in">Number</span>,<br>            <span class="hljs-keyword">default</span>: <span class="hljs-number">0</span>,<br>        &#125;,<br>        num: &#123;<br>            type: <span class="hljs-built_in">Number</span>,<br>            <span class="hljs-keyword">default</span>: <span class="hljs-number">0</span>,<br>        &#125;,<br>        color: &#123;<br>            type: <span class="hljs-built_in">String</span>,<br>            <span class="hljs-keyword">default</span>: <span class="hljs-string">&#x27;#FAA810&#x27;</span>,<br>        &#125;,<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;&#125;,<br>    <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.echartsBarInit();<br>        <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-built_in">this</span>.echartsBarInit();<br>        &#125;, <span class="hljs-number">5000</span>);<br>    &#125;,<br>    methods: &#123;<br>        <span class="hljs-function"><span class="hljs-title">echartsBarInit</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-keyword">let</span> chart = echarts.init(<span class="hljs-built_in">this</span>.$refs.barView); <span class="hljs-comment">// 初始化echarts实例</span><br>            chart.clear();<br>            chart.setOption(<br>                <span class="hljs-comment">// 通过setOption来生成柱状图</span><br>                &#123;<br>                    grid: &#123;<br>                        <span class="hljs-comment">// 直角坐标系内绘图网格</span><br>                        left: <span class="hljs-string">&#x27;20&#x27;</span>, <span class="hljs-comment">//grid 组件离容器左侧的距离,</span><br>                        <span class="hljs-comment">//left的值可以是80这样具体像素值，</span><br>                        <span class="hljs-comment">//也可以是&#x27;80%&#x27;这样相对于容器高度的百分比</span><br>                        top: <span class="hljs-string">&#x27;40&#x27;</span>,<br>                        right: <span class="hljs-string">&#x27;100&#x27;</span>,<br>                        bottom: <span class="hljs-string">&#x27;0&#x27;</span>,<br>                        containLabel: <span class="hljs-literal">true</span>, <span class="hljs-comment">//gid区域是否包含坐标轴的刻度标签。为true的时候，</span><br>                        <span class="hljs-comment">// left/right/top/bottom/width/height决定的是包括了坐标轴标签在内的</span><br>                        <span class="hljs-comment">//所有内容所形成的矩形的位置.常用于【防止标签溢出】的场景</span><br>                    &#125;,<br>                    xAxis: &#123;<br>                        <span class="hljs-comment">//直角坐标系grid中的x轴,</span><br>                        <span class="hljs-comment">//一般情况下单个grid组件最多只能放上下两个x轴,</span><br>                        <span class="hljs-comment">//多于两个x轴需要通过配置offset属性防止同个位置多个x轴的重叠。</span><br>                        type: <span class="hljs-string">&#x27;value&#x27;</span>, <span class="hljs-comment">//坐标轴类型,分别有：</span><br>                        <span class="hljs-comment">//&#x27;value&#x27;-数值轴；&#x27;category&#x27;-类目轴;</span><br>                        <span class="hljs-comment">//&#x27;time&#x27;-时间轴;&#x27;log&#x27;-对数轴</span><br>                        splitLine: &#123; <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span> &#125;, <span class="hljs-comment">//坐标轴在 grid 区域中的分隔线</span><br>                        axisLabel: &#123; <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span> &#125;, <span class="hljs-comment">//坐标轴刻度标签</span><br>                        axisTick: &#123; <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span> &#125;, <span class="hljs-comment">//坐标轴刻度</span><br>                        axisLine: &#123; <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span> &#125;, <span class="hljs-comment">//坐标轴轴线</span><br>                    &#125;,<br>                    yAxis: &#123;<br>                        type: <span class="hljs-string">&#x27;category&#x27;</span>,<br>                        axisTick: &#123; <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span> &#125;,<br>                        axisLine: &#123; <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span> &#125;,<br>                        axisLabel: &#123;<br>                            color: <span class="hljs-string">&#x27;#fff&#x27;</span>,<br>                            fontSize: <span class="hljs-number">14</span> * <span class="hljs-built_in">window</span>.REM_MULTIPLE,<br>                            <span class="hljs-comment">//设置字数限制</span><br>                            formatter: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>&#123;<br>                                <span class="hljs-keyword">if</span> (value.length &gt; <span class="hljs-number">5</span>) &#123;<br>                                    <span class="hljs-keyword">return</span> value.substring(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>) + <span class="hljs-string">&#x27;...&#x27;</span>;<br>                                &#125; <span class="hljs-keyword">else</span> &#123;<br>                                    <span class="hljs-keyword">return</span> value;<br>                                &#125;<br>                            &#125;,<br>                        &#125;,<br>                        data: [<span class="hljs-string">&#x27;&#x27;</span>], <span class="hljs-comment">//类目数据，在类目轴（type: &#x27;category&#x27;）中有效。</span><br>                        <span class="hljs-comment">//如果没有设置 type，但是设置了axis.data,则认为type 是 &#x27;category&#x27;。</span><br>                    &#125;,<br>                    series: [<br>                        <span class="hljs-comment">//系列列表。每个系列通过 type 决定自己的图表类型</span><br>                        &#123;<br>                            name: <span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-comment">//系列名称</span><br>                            type: <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-comment">//柱状、条形图</span><br>                            barWidth: <span class="hljs-number">12</span> * <span class="hljs-built_in">window</span>.REM_MULTIPLE, <span class="hljs-comment">//柱条的宽度,默认自适应</span><br>                            data: [<span class="hljs-built_in">this</span>.percent], <span class="hljs-comment">//系列中数据内容数组</span><br>                            <span class="hljs-comment">// label: &#123; //图形上的文本标签</span><br>                            <span class="hljs-comment">//     show: true,</span><br>                            <span class="hljs-comment">//     position: &#x27;right&#x27;,//标签的位置</span><br>                            <span class="hljs-comment">//     // offset: [0,-40],  //标签文字的偏移，此处表示向上偏移40</span><br>                            <span class="hljs-comment">//     formatter: &#x27;&#123;c&#125;&#x27;,//标签内容格式器 &#123;a&#125;-系列名,&#123;b&#125;-数据名,&#123;c&#125;-数据值</span><br>                            <span class="hljs-comment">//     color: &#x27;#67FFFF&#x27;,//标签字体颜色</span><br>                            <span class="hljs-comment">//     fontSize: 14  //标签字号</span><br>                            <span class="hljs-comment">// &#125;,</span><br>                            itemStyle: &#123;<br>                                <span class="hljs-comment">//图形样式</span><br>                                normal: &#123;<br>                                    <span class="hljs-comment">//normal 图形在默认状态下的样式;</span><br>                                    <span class="hljs-comment">//emphasis图形在高亮状态下的样式</span><br>                                    barBorderRadius: <span class="hljs-number">10</span>, <span class="hljs-comment">//柱条圆角半径,单位px.</span><br>                                    <span class="hljs-comment">//此处统一设置4个角的圆角大小;</span><br>                                    <span class="hljs-comment">//也可以分开设置[10,10,10,10]顺时针左上、右上、右下、左下</span><br>                                    color: <span class="hljs-keyword">new</span> echarts.graphic.LinearGradient(<br>                                        <span class="hljs-number">0</span>,<br>                                        <span class="hljs-number">0</span>,<br>                                        <span class="hljs-number">1</span>,<br>                                        <span class="hljs-number">0</span>,<br>                                        [<br>                                            &#123;<br>                                                offset: <span class="hljs-number">0</span>,<br>                                                color: <span class="hljs-string">&#x27;#FEF302&#x27;</span>, <span class="hljs-comment">//柱图渐变色起点颜色</span><br>                                            &#125;,<br>                                            &#123;<br>                                                offset: <span class="hljs-number">1</span>,<br>                                                color: <span class="hljs-built_in">this</span>.color, <span class="hljs-comment">//柱图渐变色终点颜色</span><br>                                            &#125;,<br>                                        ]<br>                                    ),<br>                                &#125;,<br>                            &#125;,<br>                            zlevel: <span class="hljs-number">1</span>, <span class="hljs-comment">//柱状图所有图形的 zlevel 值,</span><br>                            <span class="hljs-comment">//zlevel 大的 Canvas 会放在 zlevel 小的 Canvas 的上面</span><br>                        &#125;,<br>                        &#123;<br>                            name: <span class="hljs-string">&#x27;aa&#x27;</span>,<br>                            type: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>                            barGap: <span class="hljs-string">&#x27;-124%&#x27;</span>, <span class="hljs-comment">//不同系列的柱间距离，为百分比。</span><br>                            <span class="hljs-comment">// 在同一坐标系上，此属性会被多个 &#x27;bar&#x27; 系列共享。</span><br>                            <span class="hljs-comment">// 此属性应设置于此坐标系中最后一个 &#x27;bar&#x27; 系列上才会生效，</span><br>                            <span class="hljs-comment">//并且是对此坐标系中所有 &#x27;bar&#x27; 系列生效。</span><br>                            <span class="hljs-comment">// barCategoryGap:&#x27;50%&#x27;,</span><br>                            barWidth: <span class="hljs-number">18</span> * <span class="hljs-built_in">window</span>.REM_MULTIPLE,<br>                            animation: <span class="hljs-literal">false</span>,<br>                            data: [<span class="hljs-number">100</span>],<br>                            color: <span class="hljs-string">&#x27;#005982&#x27;</span>, <span class="hljs-comment">//柱条颜色</span><br>                            itemStyle: &#123;<br>                                <span class="hljs-comment">//图形样式</span><br>                                normal: &#123;<br>                                    <span class="hljs-comment">//normal 图形在默认状态下的样式;</span><br>                                    <span class="hljs-comment">//emphasis图形在高亮状态下的样式</span><br>                                    barBorderRadius: <span class="hljs-number">10</span>, <span class="hljs-comment">//柱条圆角半径,单位px.</span><br>                                    <span class="hljs-comment">//此处统一设置4个角的圆角大小;</span><br>                                    <span class="hljs-comment">//也可以分开设置[10,10,10,10]顺时针左上、右上、右下、左下</span><br>                                    color: <span class="hljs-keyword">new</span> echarts.graphic.LinearGradient(<br>                                        <span class="hljs-number">0</span>,<br>                                        <span class="hljs-number">0</span>,<br>                                        <span class="hljs-number">1</span>,<br>                                        <span class="hljs-number">0</span>,<br>                                        [<br>                                            &#123;<br>                                                offset: <span class="hljs-number">0</span>,<br>                                                color: <span class="hljs-string">&#x27;#F0F0F0&#x27;</span>, <span class="hljs-comment">//柱图渐变色起点颜色</span><br>                                            &#125;,<br>                                            &#123;<br>                                                offset: <span class="hljs-number">1</span>,<br>                                                color: <span class="hljs-string">&#x27;#F0F0F0&#x27;</span>, <span class="hljs-comment">//柱图渐变色终点颜色</span><br>                                            &#125;,<br>                                        ]<br>                                    ),<br>                                &#125;,<br>                            &#125;,<br>                            label: &#123;<br>                                <span class="hljs-comment">//图形上的文本标签</span><br>                                show: <span class="hljs-literal">true</span>,<br>                                position: <span class="hljs-string">&#x27;right&#x27;</span>, <span class="hljs-comment">//标签的位置</span><br>                                offset: [<span class="hljs-number">20</span>, <span class="hljs-number">0</span>], <span class="hljs-comment">//标签文字的偏移，此处表示向上偏移40</span><br>                                <span class="hljs-comment">// formatter: &#x27;&#123;c&#125;&#x27;,//标签内容格式器 &#123;a&#125;-系列名,&#123;b&#125;-数据名,&#123;c&#125;-数据值</span><br>                                formatter: <span class="hljs-function">(<span class="hljs-params">series</span>) =&gt;</span> &#123;<br>                                    <span class="hljs-keyword">let</span> dataList = [<span class="hljs-built_in">this</span>.percent + <span class="hljs-string">&#x27;%&#x27;</span>];<br>                                    <span class="hljs-keyword">return</span> dataList[series.dataIndex];<br>                                &#125;,<br>                                color: <span class="hljs-string">&#x27;#2E2E2E&#x27;</span>, <span class="hljs-comment">//标签字体颜色</span><br>                                fontSize: <span class="hljs-number">27</span> * <span class="hljs-built_in">window</span>.REM_MULTIPLE, <span class="hljs-comment">//标签字号</span><br>                            &#125;,<br>                        &#125;,<br>                    ],<br>                &#125;<br>            );<br>            <span class="hljs-comment">//根据窗口的大小变动图表 --- 重点</span><br>            <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>                chart.resize();<br>            &#125;);<br>        &#125;,<br>    &#125;,<br>    components: &#123;&#125;,<br>    <span class="hljs-function"><span class="hljs-title">destroyed</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.clearTimer();<br>    &#125;,<br>&#125;;<br>&lt;/script&gt;<br>&lt;style lang=<span class="hljs-string">&quot;less&quot;</span>&gt;<br>.process-area &#123;<br>    .el-progress-bar__inner &#123;<br>        background-color: unset;<br>        background-image: linear-gradient(to left, #fec107, #fef302);<br>    &#125;<br>    .el-progress__text &#123;<br>        font-size: 27px;<br>        font-weight: bold;<br>        color: #2e2e2e;<br>        line-height: 35px;<br>        margin-left: 10px;<br>    &#125;<br>    .el-progress-bar &#123;<br>        padding-right: 80px !important;<br>    &#125;<br>&#125;<br>&lt;/style&gt;<br>&lt;style lang=<span class="hljs-string">&quot;less&quot;</span> scoped&gt;<br>.process-area &#123;<br>    .view &#123;<br>        width: 600px;<br>        height: 60px;<br>    &#125;<br>    .el-progress-bar__inner &#123;<br>        background-color: unset;<br>        background-image: linear-gradient(to left, #fec107, #fef302);<br>    &#125;<br>    .el-progress__text &#123;<br>        font-size: 27px;<br>        font-weight: bold;<br>        color: #2e2e2e;<br>        line-height: 35px;<br>        margin-left: 10px;<br>    &#125;<br>    .el-progress-bar &#123;<br>        padding-right: 80px !important;<br>    &#125;<br>&#125;<br>&lt;/style&gt;<br>&lt;style lang=<span class="hljs-string">&quot;less&quot;</span> scoped&gt;<br>.process-area &#123;<br>    position: relative;<br>    margin-bottom: 35px;<br>    .num-show &#123;<br>        position: absolute;<br>        left: 230px;<br>        top: -5px;<br>        span &#123;<br>            font-size: 32px;<br>            font-weight: bold;<br>            color: #faa810;<br>            line-height: 41px;<br>        &#125;<br>    &#125;<br>    .title &#123;<br>        width: 170px;<br>        margin-right: 30px;<br>        .main &#123;<br>            font-size: 18px;<br>            color: #333333;<br>            margin-right: 49px;<br>            font-weight: <span class="hljs-number">600</span>;<br>            width: <span class="hljs-number">100</span>%;<br>            text-align: right;<br>            span &#123;<br>                font-size: 24px;<br>                font-weight: <span class="hljs-number">600</span>;<br>            &#125;<br>        &#125;<br>        .tag &#123;<br>            font-size: 15px;<br>            color: #999999;<br>            text-align: right;<br>            margin-top: 5px;<br>        &#125;<br>    &#125;<br>    .process &#123;<br>        width: 450px;<br>        div &#123;<br>            p &#123;<br>                font-size: 32px;<br>                color: #faa810;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>使用Index.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Process <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Process.vue&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    components: &#123;<br>        Process<br>    &#125;<br>&#125;<br>&lt;template&gt;<br>    &lt;div&gt;<br>        &lt;Process title=<span class="hljs-string">&quot;轻度&quot;</span> desc=<span class="hljs-string">&quot;近视50度-300度之间&quot;</span> :num=<span class="hljs-string">&quot;10000 :percent=&quot;</span><span class="hljs-number">30</span><span class="hljs-string">&quot;&gt;&lt;/Process&gt;</span><br><span class="hljs-string">        &lt;Process title=&quot;</span>中度<span class="hljs-string">&quot; desc=&quot;</span>近视<span class="hljs-number">300</span>度-<span class="hljs-number">600</span>度之间<span class="hljs-string">&quot; :num=&quot;</span><span class="hljs-number">8000</span><span class="hljs-string">&quot; :percent=&quot;</span><span class="hljs-number">25</span><span class="hljs-string">&quot; color=&quot;</span>#F48520<span class="hljs-string">&quot;&gt;&lt;/Process&gt;</span><br><span class="hljs-string">        &lt;Process title=&quot;</span>重度<span class="hljs-string">&quot; desc=&quot;</span>近视<span class="hljs-number">600</span>度之间<span class="hljs-string">&quot; :num=&quot;</span><span class="hljs-number">12000</span><span class="hljs-string">&quot; :percent=&quot;</span><span class="hljs-number">35</span><span class="hljs-string">&quot; color=&quot;</span>#E84530<span class="hljs-string">&quot;&gt;&lt;/Process&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">&lt;/template&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Echarts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始一步一步学习React生命周期</title>
    <link href="/2020/11/10/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6%E4%B9%A0React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/2020/11/10/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6%E4%B9%A0React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<p>在学习ReactJs Hooks的时候，对其中的几个副作用函数一直理不清，总觉得是由于Reactjs的基本知识还不够熟悉，特别是对于ReactJs的生命周期部分。因此本文主要是对ReactJs的生命周期进行一个学习记录，改文的代码，完全是从零开始，一步一步的手写测试。只有这样，通过比较和测试，才能更深一层次地对ReactJs的生命周期有所了解，写起代码才能得心应手，发现bug才能又快又准，优化性能才能一语中的。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每一套框架都有自己的生命周期，例如Vuejs(beforeCreated、created…)。当然，Reactjs也不例外。下面是reactjs的生命周期图，虽然有些生命周期已经被摒弃了，但是闲着也是闲着，就都学习了吧。</p><p><img src="https://user-gold-cdn.xitu.io/2018/8/12/16529f7518a0d615?imageView2/1/w/1304/h/734/q/85/format/webp/interlace/1" alt="ReactJs生命周期"></p><h2 id="constructor、render"><a href="#constructor、render" class="headerlink" title="constructor、render"></a>constructor、render</h2><p>利用Reactjs的class写法，先新建一个简单的点击计数的demo：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reviews</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Constructor CONTENT&#x27;</span>)<br>        <span class="hljs-built_in">super</span>(props)<br>        <span class="hljs-built_in">this</span>.state = &#123;<span class="hljs-attr">number</span>: <span class="hljs-number">0</span>&#125;;<br>    &#125;<br>    numAdd = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            number:<span class="hljs-built_in">this</span>.state.number+<span class="hljs-number">1</span><br>        &#125;)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Render CONTENT&#x27;</span>)<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;div&gt;当前数字是：&#123;<span class="hljs-built_in">this</span>.state.number&#125;&lt;/div&gt;<br>                &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.numAdd&#125;&gt;点我+<span class="hljs-number">1</span>&lt;/button&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们访问该组件，在控制台默认输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Constructor CONTENT</span><br><span class="hljs-comment">// Render CONTENT</span><br></code></pre></td></tr></table></figure><p>也就是说，先执行<code>constructor()</code>里的东西，再去执行<code>render()</code>函数：先初始化数据，然后再把数据渲染到DOM中。</p><p>所以目前的生命周期更新为：<strong>constructor()&gt;render()</strong></p><p>当我们此时点击三下按钮后，控制台会多输出三次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Render CONTENT</span><br><span class="hljs-comment">// Render CONTENT</span><br><span class="hljs-comment">// Render CONTENT</span><br></code></pre></td></tr></table></figure><p>这就表明，当<code>constructor()</code>中的数据发生变化时，会自动触发<code>render()</code>函数，所以上述操作会输出三次 ‘ Render CONTENT ‘ ，但是<code>constructor()</code>并不会再去执行。</p><p>接下来，我们将Reactjs自带的几个生命周期依次加入到demo中，通过查看控制台的输出来了解生命周期的执行过程。</p><h2 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount"></a>componentWillMount</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reviews</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Constructor CONTENT&#x27;</span>)<br>        <span class="hljs-built_in">super</span>(props)<br>        <span class="hljs-built_in">this</span>.state = &#123;<span class="hljs-attr">number</span>: <span class="hljs-number">0</span>&#125;;<br>    &#125;<br>    numAdd = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            number:<span class="hljs-built_in">this</span>.state.number+<span class="hljs-number">1</span><br>        &#125;)<br>    &#125;<br>    <span class="hljs-comment">// ********** 修改的地方 **********</span><br>    <span class="hljs-function"><span class="hljs-title">componentWillMount</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Component WILL MOUNT!&#x27;</span>)<br>&#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Render CONTENT&#x27;</span>)<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;div&gt;当前数字是：&#123;<span class="hljs-built_in">this</span>.state.number&#125;&lt;/div&gt;<br>                &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.numAdd&#125;&gt;点我+<span class="hljs-number">1</span>&lt;/button&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时候控制台输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Constructor CONTENT</span><br><span class="hljs-comment">// Component WILL MOUNT!</span><br><span class="hljs-comment">// Render CONTENT</span><br></code></pre></td></tr></table></figure><p>所以目前的生命周期更新为：<strong>constructor()&gt;componentWillMount()&gt;render()</strong></p><p>当我们点击计数按钮时，控制台依然只会输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Render CONTENT</span><br></code></pre></td></tr></table></figure><p>表明，组件内部的数据更新，并不会触发<code>componentWillMount()</code>执行。</p><h2 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reviews</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Constructor CONTENT&#x27;</span>)<br>        <span class="hljs-built_in">super</span>(props)<br>        <span class="hljs-built_in">this</span>.state = &#123;<span class="hljs-attr">number</span>: <span class="hljs-number">0</span>&#125;;<br>    &#125;<br>    numAdd = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            number:<span class="hljs-built_in">this</span>.state.number+<span class="hljs-number">1</span><br>        &#125;)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">componentWillMount</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Component WILL MOUNT!&#x27;</span>)<br>    &#125;<br>    <span class="hljs-comment">// ********** 修改的地方 **********</span><br>    <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Component DID MOUNT!&#x27;</span>)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Render CONTENT&#x27;</span>)<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;div&gt;当前数字是：&#123;<span class="hljs-built_in">this</span>.state.number&#125;&lt;/div&gt;<br>                &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.numAdd&#125;&gt;点我+<span class="hljs-number">1</span>&lt;/button&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时候控制台输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Constructor CONTENT</span><br><span class="hljs-comment">// Component WILL MOUNT!</span><br><span class="hljs-comment">// Render CONTENT</span><br><span class="hljs-comment">// Component DID MOUNT!</span><br></code></pre></td></tr></table></figure><p>所以目前的生命周期更新为：<strong>constructor()&gt;componentWillMount()&gt;render()&gt;componentDidMount()</strong><br>当我们点击计数按钮时，控制台依然只会输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Render CONTENT</span><br></code></pre></td></tr></table></figure><p>表明，组件内部的数据更新，并不会触发<code>componentDidMount()</code>执行。<br>通常我们一进入页面就需要发起ajax请求时，这个动作就会在该生命周期中执行，我们尝试在这个生命周期中修改组件数据，看看有什么变化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reviews</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Constructor CONTENT&#x27;</span>)<br>        <span class="hljs-built_in">super</span>(props)<br>        <span class="hljs-built_in">this</span>.state = &#123;<span class="hljs-attr">number</span>: <span class="hljs-number">0</span>&#125;;<br>    &#125;<br>    numAdd = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            number:<span class="hljs-built_in">this</span>.state.number+<span class="hljs-number">1</span><br>        &#125;)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">componentWillMount</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Component WILL MOUNT!&#x27;</span>)<br>    &#125;<br>    <span class="hljs-comment">// ********** 修改的地方 **********</span><br>    <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Component DID MOUNT!&#x27;</span>)<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            number:<span class="hljs-built_in">this</span>.state.number+<span class="hljs-number">100</span><br>        &#125;)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Render CONTENT&#x27;</span>)<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;div&gt;当前数字是：&#123;<span class="hljs-built_in">this</span>.state.number&#125;&lt;/div&gt;<br>                &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.numAdd&#125;&gt;点我+<span class="hljs-number">1</span>&lt;/button&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>componentDidMount()</code>中将本地数据<code>number</code>自增100，控制台会输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Constructor CONTENT</span><br><span class="hljs-comment">// Component WILL MOUNT!</span><br><span class="hljs-comment">// Render CONTENT</span><br><span class="hljs-comment">// Component DID MOUNT!</span><br><span class="hljs-comment">// Render CONTENT</span><br></code></pre></td></tr></table></figure><p>这就表明：<code>componentDidMount()</code>中只要涉及修改组件数据，就会再次出发<code>render()</code>函数。<br>到目前为止，可以总结一些结论：</p><ul><li>只要涉及数据更新，必然会触发render函数；</li><li>constructor、componentWillMount和componentDidMount在生命周期中只会执行一次。</li></ul><h2 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h2><blockquote><p>根据 shouldComponentUpdate() 的返回值，判断 React 组件的输出是否受当前 state 或 props 更改的影响。默认行为是 state 每次发生变化组件都会重新渲染。大部分情况下，你应该遵循默认行为。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reviews</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Constructor CONTENT&#x27;</span>)<br>        <span class="hljs-built_in">super</span>(props)<br>        <span class="hljs-built_in">this</span>.state = &#123;<span class="hljs-attr">number</span>: <span class="hljs-number">0</span>&#125;;<br>    &#125;<br>    numAdd = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            number:<span class="hljs-built_in">this</span>.state.number+<span class="hljs-number">1</span><br>        &#125;)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">componentWillMount</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Component WILL MOUNT!&#x27;</span>)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Component DID MOUNT!&#x27;</span>)<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            number:<span class="hljs-built_in">this</span>.state.number+<span class="hljs-number">100</span><br>        &#125;)<br>    &#125;<br>    <span class="hljs-comment">// ********** 修改的地方 **********</span><br>    <span class="hljs-function"><span class="hljs-title">shouldComponentUpdate</span>(<span class="hljs-params">preState, newState</span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Should Component update!&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Render CONTENT&#x27;</span>)<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;div&gt;当前数字是：&#123;<span class="hljs-built_in">this</span>.state.number&#125;&lt;/div&gt;<br>                &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.numAdd&#125;&gt;点我+<span class="hljs-number">1</span>&lt;/button&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时控制台输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Constructor CONTENT</span><br><span class="hljs-comment">// Component WILL MOUNT!</span><br><span class="hljs-comment">// Render CONTENT</span><br><span class="hljs-comment">// Component DID MOUNT!</span><br><span class="hljs-comment">// Should Component update!</span><br><span class="hljs-comment">// Render CONTENT</span><br></code></pre></td></tr></table></figure><p>当我们点击一次计数按钮时，此时控制台会输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Should Component update!</span><br><span class="hljs-comment">// Render CONTENT</span><br></code></pre></td></tr></table></figure><p>也就是说，只要涉及数据更新，必然会触发<code>render</code>函数，但是在触发render函数之前，会先触发<code>shouldComponentUpdate()</code>。所以目前的生命周期更新为：**constructor()&gt;componentWillMount()&gt;render()&gt;componentDidMount()&gt;shouldComponentUpdate()**。</p><p>当在shouldComponentUpdate里面修改如下代码，会有什么变化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reviews</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Constructor CONTENT&#x27;</span>)<br>        <span class="hljs-built_in">super</span>(props)<br>        <span class="hljs-built_in">this</span>.state = &#123;<span class="hljs-attr">number</span>: <span class="hljs-number">0</span>&#125;;<br>    &#125;<br>    numAdd = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            number:<span class="hljs-built_in">this</span>.state.number+<span class="hljs-number">1</span><br>        &#125;)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">componentWillMount</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Component WILL MOUNT!&#x27;</span>)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Component DID MOUNT!&#x27;</span>)<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            number:<span class="hljs-built_in">this</span>.state.number+<span class="hljs-number">100</span><br>        &#125;)<br>    &#125;<br>    <span class="hljs-comment">// ********** 修改的地方 **********</span><br>    <span class="hljs-function"><span class="hljs-title">shouldComponentUpdate</span>(<span class="hljs-params">preState, newState</span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Should Component update!&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Render CONTENT&#x27;</span>)<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;div&gt;当前数字是：&#123;<span class="hljs-built_in">this</span>.state.number&#125;&lt;/div&gt;<br>                &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.numAdd&#125;&gt;点我+<span class="hljs-number">1</span>&lt;/button&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时控制台输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Constructor CONTENT</span><br><span class="hljs-comment">// Component WILL MOUNT!</span><br><span class="hljs-comment">// Render CONTENT</span><br><span class="hljs-comment">// Component DID MOUNT!</span><br><span class="hljs-comment">// Should Component update!</span><br></code></pre></td></tr></table></figure><p>并没有再次出发<code>render</code>函数，这就表明，如果<code>shouldComponentUpdate</code>中返回的是<code>false</code>，则不会再次渲染DOM,所以页面上显示’当前数字是：0’，但组件内存中的<code>number</code>数据被修改了吗？由于<code>this.setState</code>函数是异步的，我们通过回调函数来输出一下此时的<code>number</code>是多少：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reviews</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Constructor CONTENT&#x27;</span>)<br>        <span class="hljs-built_in">super</span>(props)<br>        <span class="hljs-built_in">this</span>.state = &#123;<span class="hljs-attr">number</span>: <span class="hljs-number">0</span>&#125;;<br>    &#125;<br>    numAdd = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            number:<span class="hljs-built_in">this</span>.state.number+<span class="hljs-number">1</span><br>        &#125;)<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">componentWillMount</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Component WILL MOUNT!&#x27;</span>)<br>    &#125;<br>    <span class="hljs-comment">// ********** 修改的地方 **********</span><br>    <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Component DID MOUNT!&#x27;</span>)<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            number:<span class="hljs-built_in">this</span>.state.number+<span class="hljs-number">100</span><br>        &#125;,<span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.state.number)<br>        &#125;)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">shouldComponentUpdate</span>(<span class="hljs-params">preState, newState</span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Should Component update!&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Render CONTENT&#x27;</span>)<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;div&gt;当前数字是：&#123;<span class="hljs-built_in">this</span>.state.number&#125;&lt;/div&gt;<br>                &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.numAdd&#125;&gt;点我+<span class="hljs-number">1</span>&lt;/button&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时控制台输出结果为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Constructor CONTENT</span><br><span class="hljs-comment">// Component WILL MOUNT!</span><br><span class="hljs-comment">// Render CONTENT</span><br><span class="hljs-comment">// Component DID MOUNT!</span><br><span class="hljs-comment">// Should Component update!</span><br><span class="hljs-comment">// 100</span><br></code></pre></td></tr></table></figure><p>这就表明，当组件中对数据改变时，它确实会造成<code>state</code>中的数据改变，但是当<code>shouldComponentUpdate</code>返回的是<code>false</code>时，不会触发<code>render</code>函数，导致不会渲染新的数据到DOM中。</p><h2 id="componentWillUpdate"><a href="#componentWillUpdate" class="headerlink" title="componentWillUpdate"></a>componentWillUpdate</h2><p>按照上面的步骤加入componentWillUpdate：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reviews</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Constructor CONTENT&#x27;</span>)<br>        <span class="hljs-built_in">super</span>(props)<br>        <span class="hljs-built_in">this</span>.state = &#123;<span class="hljs-attr">number</span>: <span class="hljs-number">0</span>&#125;;<br>    &#125;<br>    numAdd = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            number:<span class="hljs-built_in">this</span>.state.number+<span class="hljs-number">1</span><br>        &#125;)<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">componentWillMount</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Component WILL MOUNT!&#x27;</span>)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Component DID MOUNT!&#x27;</span>)<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            number:<span class="hljs-built_in">this</span>.state.number+<span class="hljs-number">100</span><br>        &#125;,<span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.state.number)<br>        &#125;)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">shouldComponentUpdate</span>(<span class="hljs-params">preState, newState</span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Should Component update!&#x27;</span>)<br>        <span class="hljs-comment">// ********** 修改的地方 **********</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">// ********** 修改的地方 **********</span><br>    <span class="hljs-function"><span class="hljs-title">componentWillUpdate</span>(<span class="hljs-params">nextProps, nextState</span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Component WILL UPDATE!&#x27;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Render CONTENT&#x27;</span>)<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;div&gt;当前数字是：&#123;<span class="hljs-built_in">this</span>.state.number&#125;&lt;/div&gt;<br>                &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.numAdd&#125;&gt;点我+<span class="hljs-number">1</span>&lt;/button&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时候控制台输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Constructor CONTENT</span><br><span class="hljs-comment">// Component WILL MOUNT!</span><br><span class="hljs-comment">// Render CONTENT</span><br><span class="hljs-comment">// Component DID MOUNT!</span><br><span class="hljs-comment">// Should Component update!</span><br><span class="hljs-comment">// Component WILL UPDATE!</span><br><span class="hljs-comment">// Render CONTENT</span><br><span class="hljs-comment">// 100</span><br></code></pre></td></tr></table></figure><p>这里设置<code>shouldComponentUpdate</code>返回的是<code>true</code>，假如设置的是false，返回的结果是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Constructor CONTENT</span><br><span class="hljs-comment">// Component WILL MOUNT!</span><br><span class="hljs-comment">// Render CONTENT</span><br><span class="hljs-comment">// Component DID MOUNT!</span><br><span class="hljs-comment">// Should Component update!</span><br><span class="hljs-comment">// 100</span><br></code></pre></td></tr></table></figure><p>也就是说，跟再次渲染的<code>render</code>函数一样，<code>componentWillUpdate</code>受<code>shouldComponentUpdate</code>的限制，只有当<code>shouldComponentUpdate</code>返回为<code>true</code>时才会执行，反之，则不会执行。所以目前的生命周期更新为：**constructor()&gt;componentWillMount()&gt;render()&gt;componentDidMount()&gt;shouldComponentUpdate()&gt;componentWillUpdate()**。</p><h2 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate"></a>componentDidUpdate</h2><p>同样将componentDidUpdate添加到代码中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reviews</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Constructor CONTENT&#x27;</span>)<br>        <span class="hljs-built_in">super</span>(props)<br>        <span class="hljs-built_in">this</span>.state = &#123;<span class="hljs-attr">number</span>: <span class="hljs-number">0</span>&#125;;<br>    &#125;<br>    numAdd = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            number:<span class="hljs-built_in">this</span>.state.number+<span class="hljs-number">1</span><br>        &#125;)<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">componentWillMount</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Component WILL MOUNT!&#x27;</span>)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Component DID MOUNT!&#x27;</span>)<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            number:<span class="hljs-built_in">this</span>.state.number+<span class="hljs-number">100</span><br>        &#125;,<span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.state.number)<br>        &#125;)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">shouldComponentUpdate</span>(<span class="hljs-params">preState, newState</span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Should Component update!&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">componentWillUpdate</span>(<span class="hljs-params">nextProps, nextState</span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Component WILL UPDATE!&#x27;</span>);<br>    &#125;<br>    <span class="hljs-comment">// ********** 修改的地方 **********</span><br>    <span class="hljs-function"><span class="hljs-title">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState</span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Component DID UPDATE!&#x27;</span>)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Render CONTENT&#x27;</span>)<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;div&gt;当前数字是：&#123;<span class="hljs-built_in">this</span>.state.number&#125;&lt;/div&gt;<br>                &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.numAdd&#125;&gt;点我+<span class="hljs-number">1</span>&lt;/button&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时候控制台输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Constructor CONTENT</span><br><span class="hljs-comment">// Component WILL MOUNT!</span><br><span class="hljs-comment">// Render CONTENT</span><br><span class="hljs-comment">// Component DID MOUNT!</span><br><span class="hljs-comment">// Should Component update!</span><br><span class="hljs-comment">// Component WILL UPDATE!</span><br><span class="hljs-comment">// Render CONTENT</span><br><span class="hljs-comment">// Component DID UPDATE!</span><br><span class="hljs-comment">// 100</span><br></code></pre></td></tr></table></figure><p>所以目前的生命周期更新为：**constructor()&gt;componentWillMount()&gt;render()&gt;componentDidMount()&gt;shouldComponentUpdate()&gt;componentWillUpdate()&gt;componentDidUpdate()**。</p><h2 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h2><p>现在将componentWillUnmount也添加到代码中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reviews</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Constructor CONTENT&#x27;</span>)<br>        <span class="hljs-built_in">super</span>(props)<br>        <span class="hljs-built_in">this</span>.state = &#123;<span class="hljs-attr">number</span>: <span class="hljs-number">0</span>&#125;;<br>    &#125;<br>    numAdd = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            number:<span class="hljs-built_in">this</span>.state.number+<span class="hljs-number">1</span><br>        &#125;)<br>        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">componentWillMount</span>(<span class="hljs-params"></span>)</span> &#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Component WILL MOUNT!&#x27;</span>)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Component DID MOUNT!&#x27;</span>)<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            number:<span class="hljs-built_in">this</span>.state.number+<span class="hljs-number">100</span><br>        &#125;,<span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.state.number)<br>        &#125;)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">shouldComponentUpdate</span>(<span class="hljs-params">preState, newState</span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Should Component update!&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">componentWillUpdate</span>(<span class="hljs-params">nextProps, nextState</span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Component WILL UPDATE!&#x27;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">componentDidUpdate</span>(<span class="hljs-params">prevProps, prevState</span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Component DID UPDATE!&#x27;</span>)<br>    &#125;<br>    <span class="hljs-comment">// ********** 修改的地方 **********</span><br>    <span class="hljs-function"><span class="hljs-title">componentWillUnmount</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Component WILL UNMOUNT!&#x27;</span>)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Render CONTENT&#x27;</span>)<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &lt;div&gt;当前数字是：&#123;<span class="hljs-built_in">this</span>.state.number&#125;&lt;/div&gt;<br>                &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.numAdd&#125;&gt;点我+<span class="hljs-number">1</span>&lt;/button&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时控制台输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Constructor CONTENT</span><br><span class="hljs-comment">// Component WILL MOUNT!</span><br><span class="hljs-comment">// Render CONTENT</span><br><span class="hljs-comment">// Component DID MOUNT!</span><br><span class="hljs-comment">// Should Component update!</span><br><span class="hljs-comment">// Component WILL UPDATE!</span><br><span class="hljs-comment">// Render CONTENT</span><br><span class="hljs-comment">// Component DID UPDATE!</span><br><span class="hljs-comment">// 100</span><br></code></pre></td></tr></table></figure><p>没有发生什么变化，但是当离开该组件（进入其他页面）时，控制台会输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Component WILL UNMOUNT!</span><br></code></pre></td></tr></table></figure><p>这就表明该组件已销毁，所以目前的生命周期更新为：<strong>constructor()&gt;componentWillMount()&gt;render()&gt;componentDidMount()&gt;shouldComponentUpdate()&gt;componentWillUpdate()&gt;componentWillUnmount</strong>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上述一些生命周期只是reactJs全部生命周期的一部分，这里并没有涉及到props的情况，也就是组件间传值时值变化的情况，相关内容可查看<a href="https://zh-hans.reactjs.org/docs/state-and-lifecycle.html">官网</a>，对上述内容做一个总结：</p><ul><li>从组件的创建到渲染，必定会执行一次constructor()、componentWillMount()、render()和componentDidMount()，而且只执行一次；</li><li>当组件中的数据发生变化时，一定会触发shouldComponentUpdate()，shouldComponentUpdate()的返回值会影响接下来的几个生命周期函数和render()是否执行，若返回true（默认返回true）,则接下来的几个生命周期函数和render()会正常执行；反之，则不执行，也就是数据虽然更新了，但是并不会在界面更新显示；</li><li>在shouldComponentUpdate()的限制条件下，componentWillUpdate()和componentDidUpdate()可触发0次、或者多次，而render()函数至少会触发一次。</li></ul><p>学习好ReactJs的生命周期会对理清业务逻辑产生很好的帮助，同时这也是给学习React hooks打下夯实的基础。</p><p>未完待续:D</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于js中正则校验类配置和使用</title>
    <link href="/2020/11/04/%E5%85%B3%E4%BA%8Ejs%E4%B8%AD%E6%AD%A3%E5%88%99%E6%A0%A1%E9%AA%8C%E7%B1%BB%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/11/04/%E5%85%B3%E4%BA%8Ejs%E4%B8%AD%E6%AD%A3%E5%88%99%E6%A0%A1%E9%AA%8C%E7%B1%BB%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="校验类"><a href="#校验类" class="headerlink" title="校验类"></a>校验类</h2><h3 id="regexp-js"><a href="#regexp-js" class="headerlink" title="regexp.js"></a>regexp.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用方法 导入 import &#123;regexp&#125; from &#x27;<span class="hljs-doctag">@cu</span>/regexp&#x27;; //只导入验证类，自己做判断</span><br><span class="hljs-comment"> *              import Validator from &#x27;<span class="hljs-doctag">@cu</span>/regexp&#x27;; //导入配置类，使用配置方法进行验证</span><br><span class="hljs-comment"> * regexp直接做正则验证，返回验证结果</span><br><span class="hljs-comment"> * console.log(regexp.isIdcard(value)); //检验是否为合法身份证号</span><br><span class="hljs-comment"> * Validator 验证一系列值，逐个验证</span><br><span class="hljs-comment"> * 先配置 Validator 规则</span><br><span class="hljs-comment"> * Validator.add(&#x27;123&#x27;,[&#123;</span><br><span class="hljs-comment"> *      &#x27;strategy&#x27; : &#x27;maxLength:3&#x27;,</span><br><span class="hljs-comment"> *      &#x27;errorMsg&#x27; : &#x27;错误信息&#x27;</span><br><span class="hljs-comment"> * &#125;,&#123;</span><br><span class="hljs-comment"> *      &#x27;strategy&#x27; : &#x27;checkMobile&#x27;,</span><br><span class="hljs-comment"> *      &#x27;errorMsg&#x27; : &#x27;非法手机号&#x27;</span><br><span class="hljs-comment"> * &#125;]);</span><br><span class="hljs-comment"> * 其中第二个参数为数组，可传入多个验证对象 strategy 对应的验证规则为Validator类的方法 errorMsg对应验证失败后返回的消息</span><br><span class="hljs-comment"> * 配置完成后启动检验，如果不通过，会把不通过的错误消息返回，验证通过则不返回消息，</span><br><span class="hljs-comment"> * 配置规则使用的闭包变量，在配置后，如果因为其他原因没进行本次校验，可调用clearRules 清除已配置的规则 避免重复配置规则</span><br><span class="hljs-comment"> * console.log(Validator.start());</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> REGEX_MOBILE = <span class="hljs-regexp">/(1[0-9]&#123;10&#125;$)/</span>; <span class="hljs-comment">//手机号验证校验规则</span><br><span class="hljs-keyword">const</span> REGEX_CALL = <span class="hljs-regexp">/^0&#123;0,1&#125;(13[0-9]|15[7-9]|153|156|18[7-9])[0-9]&#123;8&#125;|(?:0(?:10|2[0-57-9]|[3-9]\d&#123;2&#125;)-)?\d&#123;7,8&#125;$/</span>; <span class="hljs-comment">//手机号座机号验证校验规则</span><br><span class="hljs-keyword">const</span> REGEX_IDCARD = <span class="hljs-regexp">/^[1-9][0-9]&#123;5&#125;(19|20)[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0|1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]&#123;3&#125;([0-9]|x|X)$/</span>; <span class="hljs-comment">//身份证号校验规则</span><br><span class="hljs-keyword">const</span> REGEX_MEDICALCARD = <span class="hljs-regexp">/^[0-9]&#123;10&#125;$/</span>; <span class="hljs-comment">//医保卡校验规则</span><br><span class="hljs-keyword">const</span> REGEX_SOCIALCARD = <span class="hljs-regexp">/^[A-Z][A-Z0-9]&#123;8&#125;$/</span>; <span class="hljs-comment">//社保卡校验规则</span><br><span class="hljs-keyword">const</span> REGEX_SELFPAYCARD = <span class="hljs-regexp">/[A-Z0-9]&#123;15&#125;$/</span>; <span class="hljs-comment">//自费卡校验规则</span><br><span class="hljs-keyword">const</span> REGEX_EMJOR = <span class="hljs-regexp">/[\uD83C|\uD83D|\uD83E][\uDC00-\uDFFF][\u200D|\uFE0F]|[\uD83C|\uD83D|\uD83E][\uDC00-\uDFFF]|[0-9|*|#]\uFE0F\u20E3|[0-9|#]\u20E3|[\u203C-\u3299]\uFE0F\u200D|[\u203C-\u3299]\uFE0F|[\u2122-\u2B55]|\u303D|[\A9|\AE]\u3030|\uA9|\uAE|\u3030/ig</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 校验正则类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Regexp</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检测是不是手机号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;检测字符串&#125;</span> <span class="hljs-variable">str</span></span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">isMobile</span>(<span class="hljs-params">str</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> REGEX_MOBILE.test(str);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检测是不是身份证号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;检测字符串&#125;</span> <span class="hljs-variable">str</span></span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">isIdcard</span>(<span class="hljs-params">str</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> REGEX_IDCARD.test(str);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检测是不是医保卡</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;检测字符串&#125;</span> <span class="hljs-variable">str</span></span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">isMedicalcard</span>(<span class="hljs-params">str</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> REGEX_MEDICALCARD.test(str);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检测是不是社保卡</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;检测字符串&#125;</span> <span class="hljs-variable">str</span></span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">isSocialcard</span>(<span class="hljs-params">str</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> REGEX_SOCIALCARD.test(str);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检测是不是自费卡</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;检测字符串&#125;</span> <span class="hljs-variable">str</span></span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">isSelfpaycard</span>(<span class="hljs-params">str</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> REGEX_SELFPAYCARD.test(str);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检查是否是emjor表情</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">str</span></span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">isEmjor</span>(<span class="hljs-params">str</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> REGEX_EMJOR.test(str);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检查是否是手机号座机号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">str</span></span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">isCall</span>(<span class="hljs-params">str</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> REGEX_CALL.test(str);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> regexp = <span class="hljs-keyword">new</span> Regexp();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Strategies 策略类，配置校验规则，返回错误提示语信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Strategies</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检测是否空值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;检测值&#125;</span> <span class="hljs-variable">value</span></span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;错误信息&#125;</span> <span class="hljs-variable">errorMsg</span></span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">checkNotEmpty</span>(<span class="hljs-params">value, errorMsg</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (value) &#123;<br>            <span class="hljs-keyword">if</span> (!value.length) &#123;<br>                <span class="hljs-keyword">return</span> errorMsg;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> errorMsg;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;检测值&#125;</span> <span class="hljs-variable">value</span></span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;限制最小长度&#125;</span> <span class="hljs-variable">length</span></span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;错误信息&#125;</span> <span class="hljs-variable">errorMsg</span></span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">checkMinLen</span>(<span class="hljs-params">value, length, errorMsg</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (value &amp;&amp; value.length &lt; length) &#123;<br>            <span class="hljs-keyword">return</span> errorMsg;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;检测值&#125;</span> <span class="hljs-variable">value</span></span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;限制最大长度&#125;</span> <span class="hljs-variable">length</span></span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;错误信息&#125;</span> <span class="hljs-variable">errorMsg</span></span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">checkMaxLen</span>(<span class="hljs-params">value, length, errorMsg</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (value &amp;&amp; value.length &gt; length) &#123;<br>            <span class="hljs-keyword">return</span> errorMsg;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检查手机号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;检测值&#125;</span> <span class="hljs-variable">value</span></span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;错误信息&#125;</span> <span class="hljs-variable">errorMsg</span></span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">checkMobile</span>(<span class="hljs-params">value, errorMsg</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!regexp.isMobile(value)) &#123;<br>            <span class="hljs-keyword">return</span> errorMsg;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检查手机号座机号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;检测值&#125;</span> <span class="hljs-variable">value</span></span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;错误信息&#125;</span> <span class="hljs-variable">errorMsg</span></span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">checkCall</span>(<span class="hljs-params">value, errorMsg</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!regexp.isCall(value)) &#123;<br>            <span class="hljs-keyword">return</span> errorMsg;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 护照</span><br>    <span class="hljs-function"><span class="hljs-title">isPassPortCard</span>(<span class="hljs-params">card</span>)</span> &#123;<br>        <span class="hljs-comment">// 护照</span><br>        <span class="hljs-comment">// 规则： 14/15开头 + 7位数字, G + 8位数字, P + 7位数字, S/D + 7或8位数字,等</span><br>        <span class="hljs-comment">// 样本： 141234567, G12345678, P1234567</span><br>        <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^([a-zA-z]|[0-9])&#123;5,17&#125;$/</span>;<br>        <span class="hljs-keyword">if</span> (reg.test(card) === <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;护照号码不合规&#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 军人证</span><br>    <span class="hljs-function"><span class="hljs-title">isOfficerCard</span>(<span class="hljs-params">card</span>)</span> &#123;<br>        <span class="hljs-comment">// 军官证</span><br>        <span class="hljs-comment">// 规则： 军/兵/士/文/职/广/（其他中文） + &quot;字第&quot; + 4到8位字母或数字 + &quot;号&quot;</span><br>        <span class="hljs-comment">// 样本： 军字第2001988号, 士字第P011816X号</span><br>        <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^[\u4E00-\u9FA5](字第)([0-9a-zA-Z]&#123;4,8&#125;)(号?)$/</span>;<br>        <span class="hljs-keyword">if</span> (reg.test(card) === <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;军官证号不合规&#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 户口本</span><br>    <span class="hljs-function"><span class="hljs-title">isAccountCard</span>(<span class="hljs-params">card</span>)</span> &#123;<br>        <span class="hljs-comment">// 户口本</span><br>        <span class="hljs-comment">// 规则： 15位数字, 18位数字, 17位数字 + X</span><br>        <span class="hljs-comment">// 样本： 441421999707223115</span><br>        <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span>;<br>        <span class="hljs-keyword">if</span> (reg.test(card) === <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;户口本号码不合规&#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检测身份证号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;检测值&#125;</span> <span class="hljs-variable">value</span></span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">checkIdcard</span>(<span class="hljs-params">val</span>)</span> &#123;<br>        <span class="hljs-comment">// 省级地址码校验</span><br>        <span class="hljs-keyword">var</span> checkProv = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> pattern = <span class="hljs-regexp">/^[1-9][0-9]/</span>;<br>            <span class="hljs-keyword">var</span> provs = &#123;<br>                <span class="hljs-number">11</span>: <span class="hljs-string">&#x27;北京&#x27;</span>,<br>                <span class="hljs-number">12</span>: <span class="hljs-string">&#x27;天津&#x27;</span>,<br>                <span class="hljs-number">13</span>: <span class="hljs-string">&#x27;河北&#x27;</span>,<br>                <span class="hljs-number">14</span>: <span class="hljs-string">&#x27;山西&#x27;</span>,<br>                <span class="hljs-number">15</span>: <span class="hljs-string">&#x27;内蒙古&#x27;</span>,<br>                <span class="hljs-number">21</span>: <span class="hljs-string">&#x27;辽宁&#x27;</span>,<br>                <span class="hljs-number">22</span>: <span class="hljs-string">&#x27;吉林&#x27;</span>,<br>                <span class="hljs-number">23</span>: <span class="hljs-string">&#x27;黑龙江 &#x27;</span>,<br>                <span class="hljs-number">31</span>: <span class="hljs-string">&#x27;上海&#x27;</span>,<br>                <span class="hljs-number">32</span>: <span class="hljs-string">&#x27;江苏&#x27;</span>,<br>                <span class="hljs-number">33</span>: <span class="hljs-string">&#x27;浙江&#x27;</span>,<br>                <span class="hljs-number">34</span>: <span class="hljs-string">&#x27;安徽&#x27;</span>,<br>                <span class="hljs-number">35</span>: <span class="hljs-string">&#x27;福建&#x27;</span>,<br>                <span class="hljs-number">36</span>: <span class="hljs-string">&#x27;江西&#x27;</span>,<br>                <span class="hljs-number">37</span>: <span class="hljs-string">&#x27;山东&#x27;</span>,<br>                <span class="hljs-number">41</span>: <span class="hljs-string">&#x27;河南&#x27;</span>,<br>                <span class="hljs-number">42</span>: <span class="hljs-string">&#x27;湖北 &#x27;</span>,<br>                <span class="hljs-number">43</span>: <span class="hljs-string">&#x27;湖南&#x27;</span>,<br>                <span class="hljs-number">44</span>: <span class="hljs-string">&#x27;广东&#x27;</span>,<br>                <span class="hljs-number">45</span>: <span class="hljs-string">&#x27;广西&#x27;</span>,<br>                <span class="hljs-number">46</span>: <span class="hljs-string">&#x27;海南&#x27;</span>,<br>                <span class="hljs-number">50</span>: <span class="hljs-string">&#x27;重庆&#x27;</span>,<br>                <span class="hljs-number">51</span>: <span class="hljs-string">&#x27;四川&#x27;</span>,<br>                <span class="hljs-number">52</span>: <span class="hljs-string">&#x27;贵州&#x27;</span>,<br>                <span class="hljs-number">53</span>: <span class="hljs-string">&#x27;云南&#x27;</span>,<br>                <span class="hljs-number">54</span>: <span class="hljs-string">&#x27;西藏 &#x27;</span>,<br>                <span class="hljs-number">61</span>: <span class="hljs-string">&#x27;陕西&#x27;</span>,<br>                <span class="hljs-number">62</span>: <span class="hljs-string">&#x27;甘肃&#x27;</span>,<br>                <span class="hljs-number">63</span>: <span class="hljs-string">&#x27;青海&#x27;</span>,<br>                <span class="hljs-number">64</span>: <span class="hljs-string">&#x27;宁夏&#x27;</span>,<br>                <span class="hljs-number">65</span>: <span class="hljs-string">&#x27;新疆&#x27;</span>,<br>                <span class="hljs-number">71</span>: <span class="hljs-string">&#x27;台湾&#x27;</span>,<br>                <span class="hljs-number">81</span>: <span class="hljs-string">&#x27;香港&#x27;</span>,<br>                <span class="hljs-number">82</span>: <span class="hljs-string">&#x27;澳门&#x27;</span><br>            &#125;;<br>            <span class="hljs-keyword">if</span> (pattern.test(val)) &#123;<br>                <span class="hljs-keyword">if</span> (provs[val]) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;;<br>        <span class="hljs-comment">// 出生日期码校验</span><br>        <span class="hljs-keyword">var</span> checkDate = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) </span>&#123;<br>            <span class="hljs-comment">// eslint-disable-next-line no-useless-escape</span><br>            <span class="hljs-keyword">var</span> pattern = <span class="hljs-regexp">/^(18|19|20)\d&#123;2&#125;((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)$/</span>;<br>            <span class="hljs-keyword">if</span> (pattern.test(val)) &#123;<br>                <span class="hljs-keyword">var</span> year = val.substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>                <span class="hljs-keyword">var</span> month = val.substring(<span class="hljs-number">4</span>, <span class="hljs-number">6</span>);<br>                <span class="hljs-keyword">var</span> date = val.substring(<span class="hljs-number">6</span>, <span class="hljs-number">8</span>);<br>                <span class="hljs-keyword">var</span> date2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(year + <span class="hljs-string">&#x27;-&#x27;</span> + month + <span class="hljs-string">&#x27;-&#x27;</span> + date);<br>                <span class="hljs-keyword">if</span> (date2 &amp;&amp; date2.getMonth() == (<span class="hljs-built_in">parseInt</span>(month) - <span class="hljs-number">1</span>)) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;;<br>        <span class="hljs-comment">// 校验码校验</span><br>        <span class="hljs-keyword">var</span> checkCode = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) </span>&#123;<br>            <span class="hljs-comment">// eslint-disable-next-line no-useless-escape</span><br>            <span class="hljs-keyword">var</span> p = <span class="hljs-regexp">/^[1-9]\d&#123;5&#125;(18|19|20)\d&#123;2&#125;((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$/</span>;<br>            <span class="hljs-keyword">var</span> factor = [<span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">var</span> parity = [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">var</span> code = val.substring(<span class="hljs-number">17</span>);<br>            <span class="hljs-keyword">if</span> (p.test(val)) &#123;<br>                <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">17</span>; i++) &#123;<br>                    sum += val[i] * factor[i];<br>                &#125;<br>                <span class="hljs-keyword">if</span> (parity[sum % <span class="hljs-number">11</span>] == code.toUpperCase()) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;;<br>        <span class="hljs-keyword">if</span> (checkCode(val)) &#123;<br>            <span class="hljs-keyword">var</span> date = val.substring(<span class="hljs-number">6</span>, <span class="hljs-number">14</span>);<br>            <span class="hljs-keyword">if</span> (checkDate(date)) &#123;<br>                <span class="hljs-keyword">if</span> (checkProv(val.substring(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>))) &#123;<br>                    <span class="hljs-comment">//pass</span><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;身份证号地区码不符&#x27;</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;身份证号日期码不符&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;身份证号校验码不符&#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检测医保卡</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;检测值&#125;</span> <span class="hljs-variable">value</span></span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;错误信息&#125;</span> <span class="hljs-variable">errorMsg</span></span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">checkMedicalcard</span>(<span class="hljs-params">value, errorMsg</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!regexp.isMedicalcard(value)) &#123;<br>            <span class="hljs-keyword">return</span> errorMsg;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检测社保卡</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;检测值&#125;</span> <span class="hljs-variable">value</span></span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;错误信息&#125;</span> <span class="hljs-variable">errorMsg</span></span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">checkSocialcard</span>(<span class="hljs-params">value, errorMsg</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!regexp.isSocialcard(value)) &#123;<br>            <span class="hljs-keyword">return</span> errorMsg;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检查自费卡</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;检测值&#125;</span> <span class="hljs-variable">value</span></span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;错误信息&#125;</span> <span class="hljs-variable">errorMsg</span></span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">checkSelfPaycard</span>(<span class="hljs-params">value, errorMsg</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!regexp.isSelfpaycard(value)) &#123;<br>            <span class="hljs-keyword">return</span> errorMsg;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> strategies = <span class="hljs-keyword">new</span> Strategies();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据校验规则进行校验</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Validator</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.validatorRules = []; <span class="hljs-comment">//校验规则</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加检验规则</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;配置校验&#125;</span> <span class="hljs-variable">value</span></span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">rules</span></span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">add</span>(<span class="hljs-params">value, rules</span>)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, rule;<br>             (rule = rules[i++]);) &#123;<br>            <span class="hljs-keyword">let</span> strategyAry = rule.strategy.split(<span class="hljs-string">&#x27;:&#x27;</span>);<br>            <span class="hljs-keyword">let</span> errorMsg = rule.errorMsg;<br>            <span class="hljs-built_in">this</span>.validatorRules.push(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-keyword">let</span> strategy = strategyAry.shift();<br>                strategyAry.unshift(value);<br>                strategyAry.push(errorMsg);<br>                <span class="hljs-keyword">return</span> strategies[strategy] &amp;&amp; strategies[strategy].apply(value, strategyAry);<br>            &#125;);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 启动校验</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">start</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, validatorFunc;<br>             (validatorFunc = <span class="hljs-built_in">this</span>.validatorRules[i++]);) &#123;<br>            <span class="hljs-keyword">let</span> errorMsg = validatorFunc();<br>            <span class="hljs-keyword">if</span> (errorMsg) &#123;<br>                <span class="hljs-comment">//本次检验失败，清空校验规则</span><br>                <span class="hljs-built_in">this</span>.clearRules();<br>                <span class="hljs-keyword">return</span> errorMsg;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 清空校验规则</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">clearRules</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.validatorRules = [];<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> validator = <span class="hljs-keyword">new</span> Validator();<br><span class="hljs-keyword">export</span> &#123;<br>    regexp,<br>    validator <span class="hljs-keyword">as</span> <span class="hljs-keyword">default</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="使用范例"><a href="#使用范例" class="headerlink" title="使用范例"></a>使用范例</h2><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> validator <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@cu/regexp.js&#x27;</span>;<br><span class="hljs-function"><span class="hljs-title">submitSignForm</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.submitInfo.jjlxfs) &#123;<br>        <span class="hljs-built_in">this</span>.$toast(<span class="hljs-string">&#x27;请输入紧急联系方式 Please enter the contact phone number&#x27;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        validator.add(<span class="hljs-built_in">this</span>.submitInfo.jjlxfs, [&#123;<br>            strategy: <span class="hljs-string">&#x27;checkCall&#x27;</span>,<br>            errorMsg: <span class="hljs-string">&#x27;请输入正确格式的手机号/座机号 Please enter the correct number&#x27;</span><br>        &#125;]);<br>        <span class="hljs-keyword">let</span> msg = validator.start();<br>        <span class="hljs-keyword">if</span> (msg) &#123;<br>            <span class="hljs-built_in">this</span>.$toast(msg);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集中式状态管理架构之vuex</title>
    <link href="/2020/10/29/%E9%9B%86%E4%B8%AD%E5%BC%8F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E6%9E%B6%E6%9E%84%E4%B9%8Bvuex/"/>
    <url>/2020/10/29/%E9%9B%86%E4%B8%AD%E5%BC%8F%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E6%9E%B6%E6%9E%84%E4%B9%8Bvuex/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。<br>如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex。一个简单的 store 模式就足够您所需了。但是，如果您需要构建一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。</p></blockquote><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>vuex中的state可以理解为vue中的data，就是存放静态数据的，官方的说明是状态管理，由于 Vuex 的状态存储是响应式的，从 store 实例中读取状态最简单的方法就是在计算属性中返回某个状态。</p><h3 id="src-store-index-js"><a href="#src-store-index-js" class="headerlink" title="/src/store/index.js"></a>/src/store/index.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br>Vue.use(vuex);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> vuex.Store(&#123;<br>    state:&#123;<br>        count:<span class="hljs-number">1</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="index-js"><a href="#index-js" class="headerlink" title="/index.js"></a>/index.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ******改动的地方******</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store/index.js&#x27;</span>;<br><span class="hljs-keyword">new</span> Vue(&#123;<br>    <span class="hljs-comment">// ******改动的地方******</span><br>    store,<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="src-pages-Home-vue"><a href="#src-pages-Home-vue" class="headerlink" title="/src/pages/Home.vue"></a>/src/pages/Home.vue</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>    &lt;section <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;home-area&quot;</span>&gt;<br>        &lt;h1&gt;首页&lt;/h1&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;module-list&quot;</span>&gt;<br>            &lt;ul&gt;<br>                &lt;li @click=<span class="hljs-string">&quot;goAnimalList(&#x27;dog&#x27;)&quot;</span>&gt;狗狗列表&lt;/li&gt;<br>                &lt;li @click=<span class="hljs-string">&quot;goAnimalList(&#x27;cat&#x27;)&quot;</span>&gt;猫咪列表&lt;/li&gt;<br>            &lt;/ul&gt;<br>        &lt;/div&gt;<br>    &lt;/section&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;,<br>    methods: &#123;<br>        <span class="hljs-function"><span class="hljs-title">goAnimalList</span>(<span class="hljs-params">params</span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(params == <span class="hljs-string">&#x27;dog&#x27;</span>)&#123;<br>                <span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&#x27;/dogList&#x27;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(params == <span class="hljs-string">&#x27;cat&#x27;</span>)&#123;<br>                <span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&#x27;/catList&#x27;</span>);<br>            &#125;<br>        &#125;,<br>    &#125;,<br>    components: &#123;&#125;,<br>    <span class="hljs-comment">// ******改动的地方******</span><br>    <span class="hljs-comment">// 在计算属性中返回某个状态</span><br>    computed: &#123;<br>        count () &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.state.count;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">// ******改动的地方******</span><br>        <span class="hljs-comment">// 使用计算属性中返回的状态</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.count);<br>    &#125;<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=<span class="hljs-string">&#x27;scss&#x27;</span> scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h2><p>vuex中的getter可以理解为vue中的computed,vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。</p><h3 id="src-store-index-js-1"><a href="#src-store-index-js-1" class="headerlink" title="/src/store/index.js"></a>/src/store/index.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br>Vue.use(vuex);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> vuex.Store(&#123;<br>    state:&#123;<br>        count:<span class="hljs-number">1</span><br>    &#125;,<br>    <span class="hljs-comment">// ******改动的地方******</span><br>    getters:&#123;<br>        countAdd100:<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> state.count + <span class="hljs-number">100</span>;<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="src-pages-Home-vue-1"><a href="#src-pages-Home-vue-1" class="headerlink" title="/src/pages/Home.vue"></a>/src/pages/Home.vue</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>    &lt;section <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;home-area&quot;</span>&gt;<br>        &lt;h1&gt;首页&lt;/h1&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;module-list&quot;</span>&gt;<br>            &lt;ul&gt;<br>                &lt;li @click=<span class="hljs-string">&quot;goAnimalList(&#x27;dog&#x27;)&quot;</span>&gt;狗狗列表&lt;/li&gt;<br>                &lt;li @click=<span class="hljs-string">&quot;goAnimalList(&#x27;cat&#x27;)&quot;</span>&gt;猫咪列表&lt;/li&gt;<br>            &lt;/ul&gt;<br>        &lt;/div&gt;<br>    &lt;/section&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;,<br>    methods: &#123;<br>        <span class="hljs-function"><span class="hljs-title">goAnimalList</span>(<span class="hljs-params">params</span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(params == <span class="hljs-string">&#x27;dog&#x27;</span>)&#123;<br>                <span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&#x27;/dogList&#x27;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(params == <span class="hljs-string">&#x27;cat&#x27;</span>)&#123;<br>                <span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&#x27;/catList&#x27;</span>);<br>            &#125;<br>        &#125;,<br>    &#125;,<br>    components: &#123;&#125;,<br>    computed: &#123;<br>        count () &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.state.count;<br>        &#125;,<br>        <span class="hljs-comment">// ******改动的地方******</span><br>        <span class="hljs-function"><span class="hljs-title">countAdd100</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.getters.countAdd100;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.count);<br>        <span class="hljs-comment">// ******改动的地方******</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.countAdd100);<br>    &#125;<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=<span class="hljs-string">&#x27;scss&#x27;</span> scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h2><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数。</p><h3 id="src-store-index-js-2"><a href="#src-store-index-js-2" class="headerlink" title="/src/store/index.js"></a>/src/store/index.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br>Vue.use(vuex);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> vuex.Store(&#123;<br>    state:&#123;<br>        count:<span class="hljs-number">1</span><br>    &#125;,<br>    getters:&#123;<br>        countAdd100:<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> state.count + <span class="hljs-number">100</span>;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-comment">// ******改动的地方******</span><br>    mutations:&#123;<br>        <span class="hljs-comment">// 提交载荷（Payload）</span><br>        <span class="hljs-function"><span class="hljs-title">increment</span>(<span class="hljs-params">state,n</span>)</span>&#123;<br>            state.count += n;<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="src-pages-Home-vue-2"><a href="#src-pages-Home-vue-2" class="headerlink" title="/src/pages/Home.vue"></a>/src/pages/Home.vue</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>    &lt;section <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;home-area&quot;</span>&gt;<br>        &lt;h1&gt;首页&lt;/h1&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;module-list&quot;</span>&gt;<br>            &lt;ul&gt;<br>                &lt;li @click=<span class="hljs-string">&quot;goAnimalList(&#x27;dog&#x27;)&quot;</span>&gt;狗狗列表&lt;/li&gt;<br>                &lt;li @click=<span class="hljs-string">&quot;goAnimalList(&#x27;cat&#x27;)&quot;</span>&gt;猫咪列表&lt;/li&gt;<br>            &lt;/ul&gt;<br>            <span class="hljs-comment">// ******改动的地方******</span><br>            &lt;button @click=<span class="hljs-string">&quot;$store.commit(&#x27;increment&#x27;,10)&quot;</span>&gt;点我+<span class="hljs-number">10</span>&lt;/button&gt;<br>            <span class="hljs-comment">// ******改动的地方******</span><br>            &#123;&#123; count &#125;&#125;<br>        &lt;/div&gt;<br>    &lt;/section&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;,<br>    methods: &#123;<br>        <span class="hljs-function"><span class="hljs-title">goAnimalList</span>(<span class="hljs-params">params</span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(params == <span class="hljs-string">&#x27;dog&#x27;</span>)&#123;<br>                <span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&#x27;/dogList&#x27;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(params == <span class="hljs-string">&#x27;cat&#x27;</span>)&#123;<br>                <span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&#x27;/catList&#x27;</span>);<br>            &#125;<br>        &#125;,<br>    &#125;,<br>    components: &#123;&#125;,<br>    computed: &#123;<br>        count () &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.state.count;<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">countAdd100</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.getters.countAdd100;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.count);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.countAdd100);<br>    &#125;<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=<span class="hljs-string">&#x27;scss&#x27;</span> scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>在大多数情况下，载荷应该是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读：</p><h3 id="src-store-index-js-3"><a href="#src-store-index-js-3" class="headerlink" title="/src/store/index.js"></a>/src/store/index.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br>Vue.use(vuex);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> vuex.Store(&#123;<br>    state:&#123;<br>        count:<span class="hljs-number">1</span><br>    &#125;,<br>    getters:&#123;<br>        countAdd100:<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> state.count + <span class="hljs-number">100</span>;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-comment">// ******改动的地方******</span><br>    <span class="hljs-comment">// mutations:&#123;</span><br>    <span class="hljs-comment">//     // 提交载荷（Payload）</span><br>    <span class="hljs-comment">//     increment(state,n)&#123;</span><br>    <span class="hljs-comment">//         state.count += n;</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">// &#125;,</span><br>    mutations:&#123;<br>        <span class="hljs-comment">// 提交载荷（Payload）</span><br>        <span class="hljs-function"><span class="hljs-title">increment</span>(<span class="hljs-params">state,payload</span>)</span>&#123;<br>            state.count += payload.amount;<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="src-pages-Home-vue-3"><a href="#src-pages-Home-vue-3" class="headerlink" title="/src/pages/Home.vue"></a>/src/pages/Home.vue</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>    &lt;section <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;home-area&quot;</span>&gt;<br>        &lt;h1&gt;首页&lt;/h1&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;module-list&quot;</span>&gt;<br>            &lt;ul&gt;<br>                &lt;li @click=<span class="hljs-string">&quot;goAnimalList(&#x27;dog&#x27;)&quot;</span>&gt;狗狗列表&lt;/li&gt;<br>                &lt;li @click=<span class="hljs-string">&quot;goAnimalList(&#x27;cat&#x27;)&quot;</span>&gt;猫咪列表&lt;/li&gt;<br>            &lt;/ul&gt;<br>            <span class="hljs-comment">// ******改动的地方******</span><br>            &lt;button @click=<span class="hljs-string">&quot;$store.commit(&#123;type: &#x27;increment&#x27;,amount: 100&#125;)&quot;</span>&gt;点我+<span class="hljs-number">100</span>&lt;/button&gt;<br>            &#123;&#123; count &#125;&#125;<br>        &lt;/div&gt;<br>    &lt;/section&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;,<br>    methods: &#123;<br>        <span class="hljs-function"><span class="hljs-title">goAnimalList</span>(<span class="hljs-params">params</span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(params == <span class="hljs-string">&#x27;dog&#x27;</span>)&#123;<br>                <span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&#x27;/dogList&#x27;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(params == <span class="hljs-string">&#x27;cat&#x27;</span>)&#123;<br>                <span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&#x27;/catList&#x27;</span>);<br>            &#125;<br>        &#125;,<br>    &#125;,<br>    components: &#123;&#125;,<br>    computed: &#123;<br>        count () &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.state.count;<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">countAdd100</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.getters.countAdd100;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.count);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.countAdd100);<br>    &#125;<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=<span class="hljs-string">&#x27;scss&#x27;</span> scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h2><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作，而mutation只能是同步操作。</li></ul><blockquote><p>Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个 mutation，或者通过 context.state 和 context.getters 来获取 state 和 getters。但 context 对象不是 store 实例本身。</p></blockquote><h3 id="src-store-index-js-4"><a href="#src-store-index-js-4" class="headerlink" title="/src/store/index.js"></a>/src/store/index.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br>Vue.use(vuex);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> vuex.Store(&#123;<br>    state:&#123;<br>        count:<span class="hljs-number">1</span><br>    &#125;,<br>    getters:&#123;<br>        countAdd100:<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> state.count + <span class="hljs-number">100</span>;<br>        &#125;<br>    &#125;,<br>    mutations:&#123;<br>        <span class="hljs-function"><span class="hljs-title">increment</span>(<span class="hljs-params">state,payload</span>)</span>&#123;<br>            state.count += payload.amount;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-comment">// ******改动的地方******</span><br>    actions:&#123;<br>        <span class="hljs-function"><span class="hljs-title">incrementAsync</span>(<span class="hljs-params">&#123;commit&#125;</span>)</span>&#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>                commit(&#123;<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;increment&#x27;</span>,<span class="hljs-attr">amount</span>: <span class="hljs-number">100</span>&#125;);<br>            &#125;,<span class="hljs-number">3000</span>);<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="src-pages-Home-vue-4"><a href="#src-pages-Home-vue-4" class="headerlink" title="/src/pages/Home.vue"></a>/src/pages/Home.vue</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>    &lt;section <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;home-area&quot;</span>&gt;<br>        &lt;h1&gt;首页&lt;/h1&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;module-list&quot;</span>&gt;<br>            &lt;ul&gt;<br>                &lt;li @click=<span class="hljs-string">&quot;goAnimalList(&#x27;dog&#x27;)&quot;</span>&gt;狗狗列表&lt;/li&gt;<br>                &lt;li @click=<span class="hljs-string">&quot;goAnimalList(&#x27;cat&#x27;)&quot;</span>&gt;猫咪列表&lt;/li&gt;<br>            &lt;/ul&gt;<br>            &lt;button @click=<span class="hljs-string">&quot;$store.commit(&#123;type: &#x27;increment&#x27;,amount: 100&#125;)&quot;</span>&gt;点我+<span class="hljs-number">100</span>&lt;/button&gt;<br>            &#123;&#123; count &#125;&#125;<br>            <span class="hljs-comment">// ******改动的地方******</span><br>            &lt;button @click=<span class="hljs-string">&quot;incrementAsync()&quot;</span>&gt;点我三秒后自增<span class="hljs-number">100</span>&lt;/button&gt;<br>        &lt;/div&gt;<br>    &lt;/section&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;,<br>    methods: &#123;<br>        <span class="hljs-function"><span class="hljs-title">goAnimalList</span>(<span class="hljs-params">params</span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(params == <span class="hljs-string">&#x27;dog&#x27;</span>)&#123;<br>                <span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&#x27;/dogList&#x27;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(params == <span class="hljs-string">&#x27;cat&#x27;</span>)&#123;<br>                <span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&#x27;/catList&#x27;</span>);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-comment">// ******改动的地方******</span><br>        <span class="hljs-function"><span class="hljs-title">incrementAsync</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-built_in">this</span>.$store.dispatch(<span class="hljs-string">&#x27;incrementAsync&#x27;</span>);<br>        &#125;<br>    &#125;,<br>    components: &#123;&#125;,<br>    computed: &#123;<br>        count () &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.state.count;<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">countAdd100</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.getters.countAdd100;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.count);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.countAdd100);<br>    &#125;<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=<span class="hljs-string">&#x27;scss&#x27;</span> scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>逻辑就是先dispatch Actions里的异步方法，异步里面commit Mutations的同步方法，最终改变state中的值。</p><h2 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h2><p>之前在要使用vuex中的state，是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">computed: &#123;<br>    count () &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.state.count;<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>但这种写法过于繁琐，于是可以简化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    computed:mapState([<br>        <span class="hljs-string">&#x27;count&#x27;</span>,<br>        <span class="hljs-string">&#x27;total&#x27;</span>,<br>    ]),<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的这段代码会转换为:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  computed: &#123;<br>    count () &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.state.count<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">total</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.$store.state.total<br>    &#125;,<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这么写简单了很多，但这样就会出现一个问题：如何将它与局部计算属性混合使用呢（ es6 的扩展运算符）？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    computed:&#123;<br>        <span class="hljs-comment">// 局部计算属性</span><br>        <span class="hljs-function"><span class="hljs-title">localComputed</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> none;<br>        &#125;,<br>        <span class="hljs-comment">// 注意是[]</span><br>        ...mapState([<br>            <span class="hljs-string">&#x27;count&#x27;</span>,<br>        ]),<br>        <span class="hljs-comment">// 赋值使用，注意是&#123;&#125;</span><br>        ...mapState(&#123;<br>            newTotal:<span class="hljs-string">&#x27;total&#x27;</span><br>        &#125;)<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="mapGetters"><a href="#mapGetters" class="headerlink" title="mapGetters"></a>mapGetters</h2><p>mapGetters和mapState用法很像：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mapState , mapGetters &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    computed:&#123;<br>        <span class="hljs-comment">// 局部计算属性</span><br>        <span class="hljs-function"><span class="hljs-title">localComputed</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> none;<br>        &#125;,<br>        <span class="hljs-comment">// 注意是[]</span><br>        ...mapState([<br>            <span class="hljs-string">&#x27;count&#x27;</span>,<br>        ]),<br>        <span class="hljs-comment">// 赋值使用，注意是&#123;&#125;</span><br>        ...mapState(&#123;<br>            newTotal:<span class="hljs-string">&#x27;total&#x27;</span><br>        &#125;),<br>        <span class="hljs-comment">// ******改动的地方******</span><br>        <span class="hljs-comment">// mapGetters</span><br>        ...mapGetters([<br>            <span class="hljs-string">&#x27;countAdd100&#x27;</span><br>        ])<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="mapMutations"><a href="#mapMutations" class="headerlink" title="mapMutations"></a>mapMutations</h2><p>你可以在组件中使用 this.$store.commit(‘xxx’) 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>    &lt;section <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;home-area&quot;</span>&gt;<br>        &lt;h1&gt;首页&lt;/h1&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;module-list&quot;</span>&gt;<br>            &lt;ul&gt;<br>                &lt;li @click=<span class="hljs-string">&quot;goAnimalList(&#x27;dog&#x27;)&quot;</span>&gt;狗狗列表&lt;/li&gt;<br>                &lt;li @click=<span class="hljs-string">&quot;goAnimalList(&#x27;cat&#x27;)&quot;</span>&gt;猫咪列表&lt;/li&gt;<br>            &lt;/ul&gt;<br>             <span class="hljs-comment">// ******改动的地方******</span><br>            &lt;!-- <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$store.commit(&#123;type: &#x27;increment&#x27;,amount: 100&#125;)&quot;</span>&gt;</span>点我+100<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span> --&gt;<br>            <span class="hljs-comment">// ******改动的地方******</span><br>            &lt;button @click=<span class="hljs-string">&quot;increment(&#123;amount: 1000&#125;)&quot;</span>&gt;点我+<span class="hljs-number">1000</span>&lt;/button&gt;<br>            &#123;&#123; count &#125;&#125;<br>            &lt;button @click=<span class="hljs-string">&quot;incrementAsync()&quot;</span>&gt;点我三秒后自增<span class="hljs-number">100</span>&lt;/button&gt;<br>        &lt;/div&gt;<br>    &lt;/section&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-comment">// ******改动的地方******</span><br><span class="hljs-keyword">import</span> &#123; mapState , mapGetters , mapMutations  &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;,<br>    methods: &#123;<br>        <span class="hljs-function"><span class="hljs-title">goAnimalList</span>(<span class="hljs-params">params</span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(params == <span class="hljs-string">&#x27;dog&#x27;</span>)&#123;<br>                <span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&#x27;/dogList&#x27;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(params == <span class="hljs-string">&#x27;cat&#x27;</span>)&#123;<br>                <span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&#x27;/catList&#x27;</span>);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-title">incrementAsync</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-built_in">this</span>.$store.dispatch(<span class="hljs-string">&#x27;incrementAsync&#x27;</span>);<br>        &#125;,<br>        <span class="hljs-comment">// ******改动的地方******</span><br>        ...mapMutations([<br>            <span class="hljs-comment">// 将 `this.increment()` 映射为 `this.$store.commit(&#x27;increment&#x27;)`</span><br>            <span class="hljs-comment">// `mapMutations` 也支持载荷：</span><br>            <span class="hljs-comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit(&#x27;incrementBy&#x27;, amount)`</span><br>            <span class="hljs-string">&#x27;increment&#x27;</span><br>        ])<br>    &#125;,<br>    components: &#123;&#125;,<br>    computed:&#123;<br>        <span class="hljs-comment">// 局部计算属性</span><br>        <span class="hljs-function"><span class="hljs-title">localComputed</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> none;<br>        &#125;,<br>        <span class="hljs-comment">// 注意是[]</span><br>        ...mapState([<br>            <span class="hljs-string">&#x27;count&#x27;</span>,<br>        ]),<br>        <span class="hljs-comment">// 赋值使用，注意是&#123;&#125;</span><br>        ...mapState(&#123;<br>            newTotal:<span class="hljs-string">&#x27;total&#x27;</span><br>        &#125;),<br>        <span class="hljs-comment">// mapGetters</span><br>        ...mapGetters([<br>            <span class="hljs-string">&#x27;countAdd100&#x27;</span><br>        ])<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(PUBLIC_PROJECTNAME);<br>        <span class="hljs-built_in">console</span>.log(PUBLIC_ENV);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.count);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.newTotal);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.countAdd100);<br>    &#125;<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=<span class="hljs-string">&#x27;scss&#x27;</span> scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="mapActions"><a href="#mapActions" class="headerlink" title="mapActions"></a>mapActions</h2><p>你在组件中使用 this.$store.dispatch(‘xxx’) 分发 action，或者使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用（需要先在根节点注入 store）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mapState , mapGetters , mapMutations , mapActions &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    methods: &#123;<br>        <span class="hljs-function"><span class="hljs-title">goAnimalList</span>(<span class="hljs-params">params</span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(params == <span class="hljs-string">&#x27;dog&#x27;</span>)&#123;<br>                <span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&#x27;/dogList&#x27;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(params == <span class="hljs-string">&#x27;cat&#x27;</span>)&#123;<br>                <span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&#x27;/catList&#x27;</span>);<br>            &#125;<br>        &#125;,<br>        <span class="hljs-comment">// ******改动的地方******</span><br>        <span class="hljs-comment">// incrementAsync()&#123;</span><br>        <span class="hljs-comment">//     this.$store.dispatch(&#x27;incrementAsync&#x27;);</span><br>        <span class="hljs-comment">// &#125;,</span><br>        ...mapMutations([<br>            <span class="hljs-comment">// 将 `this.increment()` 映射为 `this.$store.commit(&#x27;increment&#x27;)`</span><br>            <span class="hljs-comment">// `mapMutations` 也支持载荷：</span><br>            <span class="hljs-comment">// 将 `this.increment(amount)` 映射为 `this.$store.commit(&#x27;increment&#x27;, amount)`</span><br>            <span class="hljs-string">&#x27;increment&#x27;</span><br>        ]),<br>        <span class="hljs-comment">// ******改动的地方******</span><br>        ...mapActions([<br>            <span class="hljs-comment">// 将 `this.incrementAsync()` 映射为 `this.$store.dispatch(&#x27;incrementAsync&#x27;)`</span><br>            <span class="hljs-comment">// `mapActions` 也支持载荷：</span><br>            <span class="hljs-comment">// 将 `this.incrementAsync(amount)` 映射为 `this.$store.dispatch(&#x27;incrementAsync&#x27;, amount)`</span><br>            <span class="hljs-string">&#x27;incrementAsync&#x27;</span><br>        ])<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。<br>为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割。</p><h3 id="官方："><a href="#官方：" class="headerlink" title="官方："></a>官方：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> moduleA = &#123;<br>  state: &#123; ... &#125;,<br>  mutations: &#123; ... &#125;,<br>  actions: &#123; ... &#125;,<br>  getters: &#123; ... &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> moduleB = &#123;<br>  state: &#123; ... &#125;,<br>  mutations: &#123; ... &#125;,<br>  actions: &#123; ... &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>  modules: &#123;<br>    a: moduleA,<br>    b: moduleB<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="src-store-index-js-5"><a href="#src-store-index-js-5" class="headerlink" title="/src/store/index.js"></a>/src/store/index.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br><span class="hljs-keyword">import</span> catVuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./catModule/catVuex&#x27;</span>;<br>Vue.use(vuex);<br><span class="hljs-keyword">const</span> state = &#123;<br>    count:<span class="hljs-number">20</span>,<br>    total:<span class="hljs-number">40</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> getters = &#123;<br>    countAdd100:<span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> state.count + <span class="hljs-number">100</span>;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">const</span> mutations = &#123;<br>    <span class="hljs-function"><span class="hljs-title">increment</span>(<span class="hljs-params">state,payload</span>)</span>&#123;<br>        state.count += payload.amount;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">const</span> actions = &#123;<br>    <span class="hljs-function"><span class="hljs-title">incrementAsync</span>(<span class="hljs-params">&#123;commit&#125;</span>)</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            commit(&#123;<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;increment&#x27;</span>,<span class="hljs-attr">amount</span>: <span class="hljs-number">100</span>&#125;);<br>        &#125;,<span class="hljs-number">3000</span>);<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> vuex.Store(&#123;<br>    <span class="hljs-comment">// 公用</span><br>    state,<br>    getters,<br>    mutations,<br>    actions,<br>    <span class="hljs-comment">// 模块</span><br>    modules:&#123;<br>        catVuex,<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="src-store-catModule-catVuex-js"><a href="#src-store-catModule-catVuex-js" class="headerlink" title="/src/store/catModule/catVuex.js"></a>/src/store/catModule/catVuex.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> state = &#123;<br>    catModuleState : <span class="hljs-number">1</span><br>&#125;;<br><span class="hljs-keyword">const</span> getters = &#123;&#125;;<br><span class="hljs-keyword">const</span> actions = &#123;&#125;;<br><span class="hljs-keyword">const</span> mutations = &#123;&#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-comment">// 使其成为带命名空间的模块,它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名</span><br>    namespaced: <span class="hljs-literal">true</span>,<br>    state,<br>    getters,<br>    actions,<br>    mutations<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    computed:&#123;<br>        ...mapState(<span class="hljs-string">&#x27;catVuex&#x27;</span>,[<br>            <span class="hljs-string">&#x27;catModuleState&#x27;</span>,<br>        ])<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="mapGetters，mapMutations-和-mapActions使用方法类似于-mapstate"><a href="#mapGetters，mapMutations-和-mapActions使用方法类似于-mapstate" class="headerlink" title="mapGetters，mapMutations 和 mapActions使用方法类似于 mapstate:"></a>mapGetters，mapMutations 和 mapActions使用方法类似于 mapstate:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; mapState , mapGetters , mapMutations , mapActions &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    computed:&#123;<br>        <span class="hljs-comment">// mapGetters 放在computed中</span><br>        ...mapGetters(<span class="hljs-string">&#x27;catVuex&#x27;</span>,[<br>            <span class="hljs-string">&#x27;catModuleGetter&#x27;</span><br>        ]),<br>    &#125;,<br>    methods:&#123;<br>        <span class="hljs-comment">// mapMutations放在methods中</span><br>         ...mapMutations(<span class="hljs-string">&#x27;catVuex&#x27;</span>,[<br>            <span class="hljs-string">&#x27;catModuleMutation&#x27;</span><br>        ]),<br>        <span class="hljs-comment">// mapActions放在methods中</span><br>        ...mapActions(<span class="hljs-string">&#x27;catVuex&#x27;</span>,[<br>            <span class="hljs-string">&#x27;catModuleAction&#x27;</span><br>        ])<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于js中正则校验类配置和使用</title>
    <link href="/2020/10/28/%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <url>/2020/10/28/%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="1-router-link"><a href="#1-router-link" class="headerlink" title="1.router-link"></a>1.router-link</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 不带参数</span><br> <br>&lt;router-link :to=<span class="hljs-string">&quot;&#123;name:&#x27;home&#x27;&#125;&quot;</span>&gt; &lt;/router-link&gt;<br>&lt;router-link :to=<span class="hljs-string">&quot;&#123;path:&#x27;/home&#x27;&#125;&quot;</span>&gt; &lt;/router-link&gt;<br><span class="hljs-comment">//name,path都行, 建议用name  </span><br><span class="hljs-comment">// 注意：router-link中链接如果是&#x27;/&#x27;开始就是从根路由开始，如果开始不带&#x27;/&#x27;，则从当前路由开始。</span><br> <br> <br> <br><span class="hljs-comment">// 2.带参数</span><br> <br>&lt;router-link :to=<span class="hljs-string">&quot;&#123;name:&#x27;home&#x27;, params: &#123;id:1&#125;&#125;&quot;</span>&gt;  <br> <br><span class="hljs-comment">// params传参数 (类似post)</span><br><span class="hljs-comment">// 路由配置 path: &quot;/home/:id&quot; 或者 path: &quot;/home:id&quot; </span><br><span class="hljs-comment">// 不配置path ,第一次可请求,刷新页面id会消失</span><br><span class="hljs-comment">// 配置path,刷新页面id会保留</span><br> <br><span class="hljs-comment">// html 取参  $route.params.id</span><br><span class="hljs-comment">// script 取参  this.$route.params.id</span><br> <br> <br>&lt;router-link :to=<span class="hljs-string">&quot;&#123;name:&#x27;home&#x27;, query: &#123;id:1&#125;&#125;&quot;</span>&gt; <br> <br><span class="hljs-comment">// query传参数 (类似get,url后面会显示参数)</span><br><span class="hljs-comment">// 路由可不配置</span><br> <br><span class="hljs-comment">// html 取参  $route.query.id</span><br><span class="hljs-comment">// script 取参  this.$route.query.id</span><br></code></pre></td></tr></table></figure><h2 id="2-this-router-push-函数里面调用"><a href="#2-this-router-push-函数里面调用" class="headerlink" title="2.this.$router.push() (函数里面调用)"></a>2.this.$router.push() (函数里面调用)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.  不带参数</span><br> <br><span class="hljs-built_in">this</span>.$router.push(<span class="hljs-string">&#x27;/home&#x27;</span>)<br><span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;home&#x27;</span>&#125;)<br><span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>&#125;)<br> <br> <br> <br><span class="hljs-comment">// 2. query传参 </span><br> <br><span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;home&#x27;</span>,<span class="hljs-attr">query</span>: &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;1&#x27;</span>&#125;&#125;)<br><span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<span class="hljs-attr">query</span>: &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;1&#x27;</span>&#125;&#125;)<br> <br><span class="hljs-comment">// html 取参  $route.query.id</span><br><span class="hljs-comment">// script 取参  this.$route.query.id</span><br> <br> <br> <br><span class="hljs-comment">// 3. params传参</span><br> <br><span class="hljs-built_in">this</span>.$router.push(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;home&#x27;</span>,<span class="hljs-attr">params</span>: &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;1&#x27;</span>&#125;&#125;)  <span class="hljs-comment">// 只能用 name</span><br> <br><span class="hljs-comment">// 路由配置 path: &quot;/home/:id&quot; 或者 path: &quot;/home:id&quot; ,</span><br><span class="hljs-comment">// 不配置path ,第一次可请求,刷新页面id会消失</span><br><span class="hljs-comment">// 配置path,刷新页面id会保留</span><br> <br><span class="hljs-comment">// html 取参  $route.params.id</span><br><span class="hljs-comment">// script 取参  this.$route.params.id</span><br> <br> <br> <br><span class="hljs-comment">// 4. query和params区别</span><br><span class="hljs-comment">// query类似 get, 跳转之后页面 url后面会拼接参数,类似?id=1, 非重要性的可以这样传, 密码之类还是用params刷新页面id还在</span><br> <br><span class="hljs-comment">// params类似 post, 跳转之后页面 url后面不会拼接参数 , 但是刷新页面id 会消失</span><br></code></pre></td></tr></table></figure><h2 id="3-this-router-replace-用法同上-push"><a href="#3-this-router-replace-用法同上-push" class="headerlink" title="3.this.$router.replace() (用法同上,push)"></a>3.this.$router.replace() (用法同上,push)</h2><h2 id="4-this-router-go-n"><a href="#4-this-router-go-n" class="headerlink" title="4.this.$router.go(n)"></a>4.this.$router.go(n)</h2><p>向前或者向后跳转n个页面，n可为正整数或负整数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.$router.go(n) <br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>ps : 区别<br>this.$router.push<br>跳转到指定url路径，并想history栈中添加一个记录，点击后退会返回到上一个页面<br>this.$router.replace<br>跳转到指定url路径，但是history栈中不会有记录，点击返回会跳转到上上个页面 (就是直接替换了当前页面)<br>this.$router.go(n)<br>向前或者向后跳转n个页面，n可为正整数或负整数</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端碰到的兼容性问题（不定时更新）</title>
    <link href="/2020/10/26/%E5%89%8D%E7%AB%AF%E7%A2%B0%E5%88%B0%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <url>/2020/10/26/%E5%89%8D%E7%AB%AF%E7%A2%B0%E5%88%B0%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>前端碰到的兼容性问题总结</p><h2 id="IOS-new-Date-参数参数带时分秒不兼容问题"><a href="#IOS-new-Date-参数参数带时分秒不兼容问题" class="headerlink" title="IOS new Date()参数参数带时分秒不兼容问题"></a>IOS new Date()参数参数带时分秒不兼容问题</h2><p>问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> date =<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br></code></pre></td></tr></table></figure><p>上面这段代码是获取当前日期，这段代码在Firefox、Chrome、Safari浏览器中都可以运行。但是如果我想根据字符串获取日期，问题就来了。看下面代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> date =<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&quot;2020-05-31 08:00:00&quot;</span>);<br></code></pre></td></tr></table></figure><p>这段代码是获得字符中指定的日期，它Firefox、Chrome中就能运行，但是放在Safari就会报错，错误是NaN，意思是Not a Number。就是因为这个错，苹果手机不能正常运行开发的这个界面。</p><p>但是如果不带时分秒就可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> date =<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&quot;2020-05-31&quot;</span>);<br></code></pre></td></tr></table></figure><p>解决方案：<br>在网上找了一下，将代码这样写就好了，年月日尽量以斜杠隔开，如果非要以横杠隔开，就不能带时分秒：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> date =<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&quot;2020/05/31 08:00:00&quot;</span>);<br></code></pre></td></tr></table></figure><p>或者对时间数据处理一下，也可以：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">startTime = startDiffTime.replace(<span class="hljs-regexp">/\-/g</span>, <span class="hljs-string">&quot;/&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="H5移动端form表单输入键盘和滚动问题的兼容性处理"><a href="#H5移动端form表单输入键盘和滚动问题的兼容性处理" class="headerlink" title="H5移动端form表单输入键盘和滚动问题的兼容性处理"></a>H5移动端form表单输入键盘和滚动问题的兼容性处理</h2><p>问题描述：</p><ul><li>安卓获得焦点时键盘遮挡输入</li><li>ios失去焦点后底部空白，页面无法归位</li></ul><p>解决方案：<br>通过点击事件强制操作dom</p><p>directives.js(这里是封装在vue指令里面的)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 需要引入tools判断是安卓还是IOS</span><br><span class="hljs-keyword">import</span> tools <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@utils/tools&#x27;</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">用法：在标签中 v-指令名（驼峰变： -小写）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * directives</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-variable">Vue</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">directives</span>(<span class="hljs-params">Vue</span>) </span>&#123;<br>    <span class="hljs-comment">//form表单输入键盘和滚动问题的兼容性处理</span><br>    Vue.directive(<span class="hljs-string">&#x27;compatible&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">el, binding</span>) =&gt;</span> &#123;<br>        el.onfocus = <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-comment">//安卓获得焦点时键盘遮挡输入</span><br>            <span class="hljs-comment">// if (tools.isAndroid()) &#123;</span><br>            <span class="hljs-comment">//     window.scrollBy(0, -150);</span><br>            <span class="hljs-comment">// &#125;</span><br>            <span class="hljs-keyword">if</span> (tools.isAndroid()) &#123;<br>                <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">document</span>.activeElement.tagName==<span class="hljs-string">&#x27;INPUT&#x27;</span> || <span class="hljs-built_in">document</span>.activeElement.tagName==<span class="hljs-string">&#x27;TEXTAREA&#x27;</span>) &#123;<br>                        <span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                            <span class="hljs-built_in">document</span>.activeElement.scrollIntoViewIfNeeded();<br>                        &#125;,<span class="hljs-number">0</span>);<br>                    &#125;<br>                &#125;);<br>            &#125;<br>        &#125;;<br>        el.onblur = <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-comment">//IOS 6s键盘收回时强制置顶</span><br>            <span class="hljs-keyword">if</span> (!tools.isAndroid()) &#123;<br>                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-comment">//失焦后强制让页面归位</span><br>                    <span class="hljs-comment">//修复填完第一个输入框后立即点击第二个输入框后页面提前归位的bug</span><br>                    <span class="hljs-keyword">const</span> scrollHeight = <span class="hljs-built_in">document</span>.documentElement.scrollTop || <span class="hljs-built_in">document</span>.body.scrollTop || <span class="hljs-number">0</span>;<br>                    <span class="hljs-built_in">window</span>.scrollTo(<span class="hljs-number">0</span>, <span class="hljs-built_in">Math</span>.max(scrollHeight - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>));<br>                &#125;, <span class="hljs-number">100</span>);<br>            &#125;<br>        &#125;;<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> directives;<br></code></pre></td></tr></table></figure><p>utils/tools.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Utils</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * isAndroid 判断是否是安卓</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@returns <span class="hljs-type">&#123;boolean&#125;</span></span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@private</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">isAndroid</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">let</span> u = navigator.userAgent;<br>        <span class="hljs-keyword">let</span> isAndroid = u.indexOf(<span class="hljs-string">&#x27;Android&#x27;</span>) &gt; -<span class="hljs-number">1</span> || u.indexOf(<span class="hljs-string">&#x27;Linux&#x27;</span>) &gt; -<span class="hljs-number">1</span>; <span class="hljs-comment">//android终端或者uc浏览器</span><br>        <span class="hljs-keyword">return</span> isAndroid === <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断是否是ios</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-title">isIos</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">let</span> u = navigator.userAgent;<br>        <span class="hljs-keyword">let</span> isiOS = !!u.match(<span class="hljs-regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>); <span class="hljs-comment">//ios终端</span><br>        <span class="hljs-keyword">return</span> isiOS === <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Utils()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>兼容</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈ES6 Promise 和 ES7 Async/await的使用</title>
    <link href="/2020/10/22/%E6%B5%85%E8%B0%88ES6%20Promise%20%E5%92%8C%20ES7%20Async%20await%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/10/22/%E6%B5%85%E8%B0%88ES6%20Promise%20%E5%92%8C%20ES7%20Async%20await%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>众所周知，Javascript是单线程的，所谓”单线程”，就是指一次只能完成一件任务。如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应（假死），往往就是因为某一段Javascript代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。为了解决这个问题，Javascript语言将任务的执行模式分成两种：同步（Synchronous）和异步（Asynchronous）。当我们处理异步时，有三种常用的方法可以选择：回调，Promise和Async/await，接下来简述一下三者的使用区别和优缺点。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知，Javascript是<code>单线程</code>的，所谓”单线程”，就是指一次只能完成一件任务。如果有<code>多个任务</code>，就<code>必须排队</code>，前面一个任务完成，再执行后面一个任务，以此类推。这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会<code>拖延整个程序的执行</code>。常见的浏览器无响应（假死），往往就是因为某一段Javascript代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。为了解决这个问题，Javascript语言将任务的<code>执行模式</code>分成两种：<code>同步</code>（Synchronous）和<code>异步</code>（Asynchronous）。当我们处理异步时，有三种常用的方法可以选择：异步回调，Promise和Async/await，接下来简述一下三者的使用区别和优缺点。</p><h2 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h2><p>回调是一个函数被作为一个<code>参数</code>传递到另一个函数里，在那个函数执行完后再执行，也就是B函数被作为参数传递到A函数里，在A函数执行完后再执行B，用代码表示就是如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">A</span>(<span class="hljs-params">callback</span>)</span>&#123;<br>　　callback();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">B</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>A(B)<br></code></pre></td></tr></table></figure><blockquote><p>这也未免太简单了，是的，但现实往往就是简单的东西，项目中不会用到，太可怜了。而难的东西却一定是在简单东西基础上构建的。</p></blockquote><p>那回调和异步有关系吗？回调一定是<code>异步</code>的吗，看上面<code>A(B)</code>的例子就知道，明明还是<code>同步</code>，所以<code>回调并不一定就是异步，他俩并没有直接的关系</code>。<br>下面举一个真实的例子：<br>有三个函数，分别是task1，task2和task3，这三个都是同步任务，并且task2必须等到task1完成后才能执行，task3执行顺序不做要求，那么常规我们会写如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">task1</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task1&#x27;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">task2</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task2&#x27;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">task3</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task3&#x27;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testAsync</span>(<span class="hljs-params"></span>)</span>&#123;<br>    task1();<br>    task2();<br>    task3();<br>&#125;<br><br>testAsync();<br><span class="hljs-comment">// task1</span><br><span class="hljs-comment">// task2</span><br><span class="hljs-comment">// task3</span><br></code></pre></td></tr></table></figure><p>这样写并没有做<code>回调</code>，但效果已经达到了，task2确实在task1之后执行的。那接下来使用回调：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">task1</span>(<span class="hljs-params">task</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task1&#x27;</span>);<br>    task();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">task2</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task2&#x27;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">task3</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task3&#x27;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testAsync</span>(<span class="hljs-params"></span>)</span>&#123;<br>    task1(task2);<br>    task3();<br>&#125;<br><br>testAsync();<br><span class="hljs-comment">// task1</span><br><span class="hljs-comment">// task2</span><br><span class="hljs-comment">// task3</span><br></code></pre></td></tr></table></figure><p>输出结果一样，没有影响到task3的执行顺序，这就表明，该回调是<code>同步回调</code>。那什么是<code>异步回调</code>呢？</p><p>因为js是单线程的，但是有很多情况的执行步骤（ajax请求远程数据，IO等）是<code>非常耗时</code>的，如果一直单线程的<code>堵塞</code>下去会导致程序的等待时间过长页面失去响应，影响用户体验了。</p><p>如何去解决这个问题呢，我们可以这么想。<code>耗时</code>的我们都扔给<code>异步</code>去做，做好了再通知下我们做完了，我们拿到数据继续往下走。</p><p>接下来利用<code>setTimeout</code>来模拟一个异步回调，场景就是：task1是一个要耗时很长的一个请求，task2需要用到task1请求回来的数据，而task3却跟这两个任务没有任何关系，想达到的效果就是，task1执行完之后task2再执行，但是task3可以绕过task1和task2先执行。修改代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">task1</span>(<span class="hljs-params">task</span>)</span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task1&#x27;</span>);<br>        task();<br>    &#125;, <span class="hljs-number">3000</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">task2</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task2&#x27;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">task3</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task3&#x27;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testAsync</span>(<span class="hljs-params"></span>)</span>&#123;<br>    task1(task2);<br>    task3();<br>&#125;<br><span class="hljs-comment">// task3 然后等待3秒</span><br><span class="hljs-comment">// task1</span><br><span class="hljs-comment">// task2</span><br></code></pre></td></tr></table></figure><p>上面的代码从上往下依次执行，由于task1里面<code>setTimeout是一个异步方法</code>，浏览器会<code>单开一个线程</code>去执行，所以<code>先会去执行下面的task3同步任务</code>，具体原理可参考<a href="http://blog.alanwu.site/2020/03/06/eventLoop/">JavaScript事件循环机制</a>。</p><blockquote><p>继续回到异步回调上来，在执行完任务执行时间超长的task1后，紧接着执行task2，那假如task2也是一个耗时很长的任务并且需要在其执行完之后拿到其执行完的结果呢，那是不是要往task2里面再加一个回调呢？那造成的结果可能就是传说中的<code>地狱回调</code>了，想想就害怕，所以<code>Promise</code>它带着解决方案来了！！！</p></blockquote><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>Promise的思想是， <code>每一个异步任务返回一个Promise对象</code>，该对象有一个then方法，允许指定回调函数。 Promises的出现大大改善了异步变成的困境，避免出现回调地狱，嵌套层级得到改善。他有如下API:</p><ul><li>Promise.resolve()</li><li>Promise.reject()</li><li>Promise.prototype.then()</li><li>Promise.prototype.catch()</li><li>Promise.all()  // 所有的完成</li><li>Promise.race() // 竞速，完成一个即可</li></ul><p>传送门阮一峰大神的<a href="http://es6.ruanyifeng.com/#docs/promise">ECMAScript 6入门</a></p><p>为了使代码简介，promise的rejected状态的相关reject()和catch()方法省略：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">task1</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task1执行了&#x27;</span>);<br>            resolve(<span class="hljs-string">&#x27;task1&#x27;</span>);<br>        &#125;, <span class="hljs-number">3000</span>);<br>    &#125;)<br>&#125;,<br><span class="hljs-function"><span class="hljs-title">task2</span>(<span class="hljs-params">result</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task2执行了&#x27;</span>);<br>            resolve(<span class="hljs-string">&#x27;task2收到了task1的返回值了，他的值是&#x27;</span>+result);<br>        &#125;, <span class="hljs-number">3000</span>);<br>    &#125;)<br>&#125;,<br><span class="hljs-function"><span class="hljs-title">task3</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task3&#x27;</span>);<br>&#125;,<br><span class="hljs-function"><span class="hljs-title">testAsync</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.task1().then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.task2(res);<br>    &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(res)<br>    &#125;);<br>    <span class="hljs-built_in">this</span>.task3();<br>&#125;<br><span class="hljs-comment">// task3 等待3秒</span><br><span class="hljs-comment">// task1执行了 等待三秒</span><br><span class="hljs-comment">// task2执行了</span><br><span class="hljs-comment">// task2收到了task1的返回值了，他的值是task1</span><br></code></pre></td></tr></table></figure><blockquote><p>由此Promise对象还是很好用的，对于异步的流程的控制得到了大大改善，通过.then()的方法可进行链式调用。 可是 .then() .catch() 的使用也导致代码非常难看，嵌套也很深，所以async/await就出来了！！！</p></blockquote><h2 id="Async-await"><a href="#Async-await" class="headerlink" title="Async/await"></a>Async/await</h2><p>Async/await 是Javascript编写异步程序的新方法。以往的异步方法无外乎回调函数和Promise。但是Async/await建立于Promise之上。直接上代码吧！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">task1</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task1执行了&#x27;</span>);<br>            resolve(<span class="hljs-string">&#x27;task1&#x27;</span>);<br>        &#125;, <span class="hljs-number">3000</span>);<br>    &#125;)<br>&#125;,<br><span class="hljs-function"><span class="hljs-title">task2</span>(<span class="hljs-params">result</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task2执行了&#x27;</span>);<br>            resolve(<span class="hljs-string">&#x27;task2收到了task1的返回值了，他的值是&#x27;</span>+result);<br>        &#125;, <span class="hljs-number">3000</span>);<br>    &#125;)<br>&#125;,<br><span class="hljs-function"><span class="hljs-title">task3</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task3&#x27;</span>);<br>&#125;,<br><span class="hljs-comment">// 修改的地方</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">testAsync</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> res1 = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.task1();<br>    <span class="hljs-keyword">const</span> res2 = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.task2(res1);<br>    <span class="hljs-built_in">console</span>.log(res2);<br>    <span class="hljs-built_in">this</span>.task3();<br>&#125;<br><span class="hljs-comment">// 等待三秒</span><br><span class="hljs-comment">// task1执行了 等待三秒</span><br><span class="hljs-comment">// task2执行了</span><br><span class="hljs-comment">// task2收到了task1的返回值了，他的值是task1</span><br><span class="hljs-comment">// task3</span><br></code></pre></td></tr></table></figure><p>上文中的<code>promise </code>实现方法是通过<code>then的链式调用</code>，但是采用<code>async</code>会更加简洁明了，但是结果发生变化了：<code>用同步的书写方式实现了异步的代码</code>。</p><blockquote><p>Async/await使得异步代码变的不再明显也是一点弊端咯，不过根据实际情况选择最合适的异步编程才是最好的选择。<code>async 是 Generator 函数的语法糖</code>。所以想更深入的理解其中内部原理的赶紧去看看 Generator 函数吧。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Async/await是近些年来JavaScript最具革命性的新特性之一。他让读者意识到使用Promise存在的一些问题，并提供了自身来代替Promise的方案。<br>当然，对这个新特性也有一定的担心，体现在：<br>他使得异步代码变的不再明显，我们好不容易已经学会并习惯了使用回调函数或者.then来处理异步，新的特性当然需要时间成本去学习和体会。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>ES7</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈ES6 Promise 和 ES7 Async/await的使用</title>
    <link href="/2020/10/19/await%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/10/19/await%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知，Javascript是<code>单线程</code>的，所谓”单线程”，就是指一次只能完成一件任务。如果有<code>多个任务</code>，就<code>必须排队</code>，前面一个任务完成，再执行后面一个任务，以此类推。这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会<code>拖延整个程序的执行</code>。常见的浏览器无响应（假死），往往就是因为某一段Javascript代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。为了解决这个问题，Javascript语言将任务的<code>执行模式</code>分成两种：<code>同步</code>（Synchronous）和<code>异步</code>（Asynchronous）。当我们处理异步时，有三种常用的方法可以选择：异步回调，Promise和Async/await，接下来简述一下三者的使用区别和优缺点。</p><h2 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h2><p>回调是一个函数被作为一个<code>参数</code>传递到另一个函数里，在那个函数执行完后再执行，也就是B函数被作为参数传递到A函数里，在A函数执行完后再执行B，用代码表示就是如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">A</span>(<span class="hljs-params">callback</span>)</span>&#123;<br>　　callback();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">B</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>A(B)<br></code></pre></td></tr></table></figure><blockquote><p>这也未免太简单了，是的，但现实往往就是简单的东西，项目中不会用到，太可怜了。而难的东西却一定是在简单东西基础上构建的。</p></blockquote><p>那回调和异步有关系吗？回调一定是<code>异步</code>的吗，看上面<code>A(B)</code>的例子就知道，明明还是<code>同步</code>，所以<code>回调并不一定就是异步，他俩并没有直接的关系</code>。<br>下面举一个真实的例子：<br>有三个函数，分别是task1，task2和task3，这三个都是同步任务，并且task2必须等到task1完成后才能执行，task3执行顺序不做要求，那么常规我们会写如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">task1</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task1&#x27;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">task2</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task2&#x27;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">task3</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task3&#x27;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testAsync</span>(<span class="hljs-params"></span>)</span>&#123;<br>    task1();<br>    task2();<br>    task3();<br>&#125;<br><br>testAsync();<br><span class="hljs-comment">// task1</span><br><span class="hljs-comment">// task2</span><br><span class="hljs-comment">// task3</span><br></code></pre></td></tr></table></figure><p>这样写并没有做<code>回调</code>，但效果已经达到了，task2确实在task1之后执行的。那接下来使用回调：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">task1</span>(<span class="hljs-params">task</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task1&#x27;</span>);<br>    task();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">task2</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task2&#x27;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">task3</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task3&#x27;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testAsync</span>(<span class="hljs-params"></span>)</span>&#123;<br>    task1(task2);<br>    task3();<br>&#125;<br><br>testAsync();<br><span class="hljs-comment">// task1</span><br><span class="hljs-comment">// task2</span><br><span class="hljs-comment">// task3</span><br></code></pre></td></tr></table></figure><p>输出结果一样，没有影响到task3的执行顺序，这就表明，该回调是<code>同步回调</code>。那什么是<code>异步回调</code>呢？</p><p>因为js是单线程的，但是有很多情况的执行步骤（ajax请求远程数据，IO等）是<code>非常耗时</code>的，如果一直单线程的<code>堵塞</code>下去会导致程序的等待时间过长页面失去响应，影响用户体验了。</p><p>如何去解决这个问题呢，我们可以这么想。<code>耗时</code>的我们都扔给<code>异步</code>去做，做好了再通知下我们做完了，我们拿到数据继续往下走。</p><p>接下来利用<code>setTimeout</code>来模拟一个异步回调，场景就是：task1是一个要耗时很长的一个请求，task2需要用到task1请求回来的数据，而task3却跟这两个任务没有任何关系，想达到的效果就是，task1执行完之后task2再执行，但是task3可以绕过task1和task2先执行。修改代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">task1</span>(<span class="hljs-params">task</span>)</span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task1&#x27;</span>);<br>        task();<br>    &#125;, <span class="hljs-number">3000</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">task2</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task2&#x27;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">task3</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task3&#x27;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testAsync</span>(<span class="hljs-params"></span>)</span>&#123;<br>    task1(task2);<br>    task3();<br>&#125;<br><span class="hljs-comment">// task3 然后等待3秒</span><br><span class="hljs-comment">// task1</span><br><span class="hljs-comment">// task2</span><br></code></pre></td></tr></table></figure><p>上面的代码从上往下依次执行，由于task1里面<code>setTimeout是一个异步方法</code>，浏览器会<code>单开一个线程</code>去执行，所以<code>先会去执行下面的task3同步任务</code>，具体原理可参考<a href="http://blog.alanwu.site/2020/03/06/eventLoop/">JavaScript事件循环机制</a>。</p><blockquote><p>继续回到异步回调上来，在执行完任务执行时间超长的task1后，紧接着执行task2，那假如task2也是一个耗时很长的任务并且需要在其执行完之后拿到其执行完的结果呢，那是不是要往task2里面再加一个回调呢？那造成的结果可能就是传说中的<code>地狱回调</code>了，想想就害怕，所以<code>Promise</code>它带着解决方案来了！！！</p></blockquote><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>Promise的思想是， <code>每一个异步任务返回一个Promise对象</code>，该对象有一个then方法，允许指定回调函数。 Promises的出现大大改善了异步变成的困境，避免出现回调地狱，嵌套层级得到改善。他有如下API:</p><ul><li>Promise.resolve()</li><li>Promise.reject()</li><li>Promise.prototype.then()</li><li>Promise.prototype.catch()</li><li>Promise.all()  // 所有的完成</li><li>Promise.race() // 竞速，完成一个即可</li></ul><p>传送门阮一峰大神的<a href="http://es6.ruanyifeng.com/#docs/promise">ECMAScript 6入门</a></p><p>为了使代码简介，promise的rejected状态的相关reject()和catch()方法省略：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">task1</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task1执行了&#x27;</span>);<br>            resolve(<span class="hljs-string">&#x27;task1&#x27;</span>);<br>        &#125;, <span class="hljs-number">3000</span>);<br>    &#125;)<br>&#125;,<br><span class="hljs-function"><span class="hljs-title">task2</span>(<span class="hljs-params">result</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task2执行了&#x27;</span>);<br>            resolve(<span class="hljs-string">&#x27;task2收到了task1的返回值了，他的值是&#x27;</span>+result);<br>        &#125;, <span class="hljs-number">3000</span>);<br>    &#125;)<br>&#125;,<br><span class="hljs-function"><span class="hljs-title">task3</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task3&#x27;</span>);<br>&#125;,<br><span class="hljs-function"><span class="hljs-title">testAsync</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.task1().then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.task2(res);<br>    &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(res)<br>    &#125;);<br>    <span class="hljs-built_in">this</span>.task3();<br>&#125;<br><span class="hljs-comment">// task3 等待3秒</span><br><span class="hljs-comment">// task1执行了 等待三秒</span><br><span class="hljs-comment">// task2执行了</span><br><span class="hljs-comment">// task2收到了task1的返回值了，他的值是task1</span><br></code></pre></td></tr></table></figure><blockquote><p>由此Promise对象还是很好用的，对于异步的流程的控制得到了大大改善，通过.then()的方法可进行链式调用。 可是 .then() .catch() 的使用也导致代码非常难看，嵌套也很深，所以async/await就出来了！！！</p></blockquote><h2 id="Async-await"><a href="#Async-await" class="headerlink" title="Async/await"></a>Async/await</h2><p>Async/await 是Javascript编写异步程序的新方法。以往的异步方法无外乎回调函数和Promise。但是Async/await建立于Promise之上。直接上代码吧！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">task1</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task1执行了&#x27;</span>);<br>            resolve(<span class="hljs-string">&#x27;task1&#x27;</span>);<br>        &#125;, <span class="hljs-number">3000</span>);<br>    &#125;)<br>&#125;,<br><span class="hljs-function"><span class="hljs-title">task2</span>(<span class="hljs-params">result</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task2执行了&#x27;</span>);<br>            resolve(<span class="hljs-string">&#x27;task2收到了task1的返回值了，他的值是&#x27;</span>+result);<br>        &#125;, <span class="hljs-number">3000</span>);<br>    &#125;)<br>&#125;,<br><span class="hljs-function"><span class="hljs-title">task3</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;task3&#x27;</span>);<br>&#125;,<br><span class="hljs-comment">// 修改的地方</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">testAsync</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> res1 = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.task1();<br>    <span class="hljs-keyword">const</span> res2 = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.task2(res1);<br>    <span class="hljs-built_in">console</span>.log(res2);<br>    <span class="hljs-built_in">this</span>.task3();<br>&#125;<br><span class="hljs-comment">// 等待三秒</span><br><span class="hljs-comment">// task1执行了 等待三秒</span><br><span class="hljs-comment">// task2执行了</span><br><span class="hljs-comment">// task2收到了task1的返回值了，他的值是task1</span><br><span class="hljs-comment">// task3</span><br></code></pre></td></tr></table></figure><p>上文中的<code>promise </code>实现方法是通过<code>then的链式调用</code>，但是采用<code>async</code>会更加简洁明了，但是结果发生变化了：<code>用同步的书写方式实现了异步的代码</code>。</p><blockquote><p>Async/await使得异步代码变的不再明显也是一点弊端咯，不过根据实际情况选择最合适的异步编程才是最好的选择。<code>async 是 Generator 函数的语法糖</code>。所以想更深入的理解其中内部原理的赶紧去看看 Generator 函数吧。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Async/await是近些年来JavaScript最具革命性的新特性之一。他让读者意识到使用Promise存在的一些问题，并提供了自身来代替Promise的方案。<br>当然，对这个新特性也有一定的担心，体现在：<br>他使得异步代码变的不再明显，我们好不容易已经学会并习惯了使用回调函数或者.then来处理异步，新的特性当然需要时间成本去学习和体会。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端面试必问的JS基础知识——面向对象</title>
    <link href="/2020/10/17/hello/"/>
    <url>/2020/10/17/hello/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前面试过几家公司，虽然算不上大厂，但是对js基础知识还是挺重视的。其中面试官就问了有关面向对象的几个问题，例如，1.谈谈你对面向对象的认识？2.面向对象有三大特性，是哪些，并着重介绍一下。我发现平时工作之余，太过于注重物业逻辑和框架，导致<code>面向对象</code>就几个字都成了最熟悉的陌生人，感觉有点印象，但又不确定，生怕说错了还给面试官留下不好的印象，所以写一个简短的博客，方便自己每次看到能勾起这段面试尴尬的回忆，和警示自己，重视基础！</p><p>了解过面向对象的同学应该都知道，面向对象三个基本特征是：<code>封装</code>、<code>继承</code>、<code>多态</code>，但是对于这三个词具体可能不太了解。对于前端来讲接触最多的可能就是封装与继承，对于多态来说可能就不是那么了解了。</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><blockquote><p>将对象运行所需的资源封装在程序对象中——基本上，是方法和数据。对象是“公布其接口”。其他附加到这些接口上的对象不需要关心对象实现的方法即可使用这个对象。这个概念就是“不要告诉我你是怎么做的，只要做就可以了。”对象可以看作是一个自我包含的原子。对象接口包括了公共的方法和初始化数据。</p></blockquote><p>说白了，封装就是新建一个容器，容器中定义一些属性和方法，供对象使用。</p><ul><li>类：封装对象的属性和行为</li><li>方法：封装具体逻辑功能</li><li>访问封装：访问修饰封装无非就是对其访问权限进行封装</li></ul><p>注：下面的代码都是基于ES6类的语法糖class来演示的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employees</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">let</span> &#123;name,age&#125; = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-keyword">return</span> &#123;name,age&#125;;<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">seyHi</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Hi&quot;</span>);   <br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> lisi = <span class="hljs-keyword">new</span> Employees(<span class="hljs-string">&quot;Aaron&quot;</span>,<span class="hljs-number">18</span>);<br>lisi.seyHi();   <span class="hljs-comment">// 报错 lisi.seyHi is not a function</span><br>lisi.getInfo();  <span class="hljs-comment">// &#123;name: &quot;Aaron&quot;, age: 18&#125;</span><br>Employees.seyHi();  <span class="hljs-comment">// Hi</span><br></code></pre></td></tr></table></figure><p>在Employees中抽出的<code>公共属性</code>有name,age,<code>公共方法</code>有getInfo,seyHi，然而getInfo与seyHi所不同的是seyHi使用了<code>static修饰符</code>，改变其为<code>静态方法</code>，seyHi<code>只属于</code>Employees这个类。然而getInfo方法则是<code>属于实例</code>的。这里使用了<code>static</code>对seyHi方法对其进行了<code>访问权限</code>的封装。再举一个Promise的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// .then()是公共方法，属于实例</span><br><span class="hljs-built_in">Promise</span>.then()  <span class="hljs-comment">//  报错 Promise.then is not a function</span><br><span class="hljs-keyword">let</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;)<br>p1.then();  <span class="hljs-comment">//  Promise &#123;&lt;pending&gt;&#125;</span><br><br><span class="hljs-comment">// .all()是静态方法，只属于Promise类</span><br><span class="hljs-built_in">Promise</span>.all([<span class="hljs-number">1</span>]);   <span class="hljs-comment">//  Promise &#123;&lt;resolved&gt;: Array(1)&#125;</span><br></code></pre></td></tr></table></figure><p>从上面的代码中可以看出<code>Promise</code>也使用了<code>static</code>对其方法的访问权限进行了封装。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><blockquote><p>继承可以使得子类具有父类的各种的公有属性和公有方法。而不需要再次编写相同的代码。</p></blockquote><p>子类<code>继承</code>父类后，<code>子类具有父类属性和方法</code>，然而也同样具备自己所独有的属性和方法，也就是说，子类的功能要比父类多或相同，不会比父类少。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employees</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name)<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">seyHi</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Hi&quot;</span>);   <br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Java</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Employees</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span>&#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">work</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;做后台工作&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> java = <span class="hljs-keyword">new</span> Java(<span class="hljs-string">&quot;Aaron&quot;</span>);<br>java.getName();  <span class="hljs-comment">// Aaron</span><br>java.work();   <span class="hljs-comment">// 做后台工作</span><br><span class="hljs-comment">// java.seyHi();    //  报错 java.seyHi is not a function</span><br></code></pre></td></tr></table></figure><p>从上面的例子可以看出继承<code>不会继承</code>父类的<code>静态方法</code>，<code>只会继承父类的公有属性与方法</code>。这一点需要注意。子类继承之后既拥有了getName方法，同样也拥有自己的worker方法。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><blockquote><p>按字面的意思就是“多种状态”，允许将子类类型的指针赋值给父类类型的指针。</p></blockquote><p>说白了多态就是相同的事物，一个接口，多种实现，同时在最初的程序设定时，有可能会根据程序需求的不同，而不确定哪个函数实现，<code>通过多态不需要修改源代码</code>，就可以实现一个接口多种解决方案。多态的表现形式<code>重写</code>与<code>重载</code>。</p><blockquote><p> <code>重写</code>:子类可继承父类中的方法，而不需要重新编写相同的方法。但有时子类并不想原封不动地继承父类的方法，而是想作一定的修改，这就需要采用方法的重写。方法重写又称方法覆盖。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employees</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">seyHello</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Hello&quot;</span>)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Java</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Employees</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name</span>)</span>&#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">seyHello</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Hello,我的名字是<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>,我是做Java工作的。`</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> employees = <span class="hljs-keyword">new</span> Employees(<span class="hljs-string">&quot;Aaron&quot;</span>);<br><span class="hljs-keyword">const</span> java = <span class="hljs-keyword">new</span> Java(<span class="hljs-string">&quot;Leo&quot;</span>);<br>employees.seyHello();   <span class="hljs-comment">//  Hello</span><br>java.seyHello();    <span class="hljs-comment">//  Hello,我的名字是Leo,我是做Java工作的。</span><br>employees.getName();    <span class="hljs-comment">//  Aaron</span><br>java.getName(); <span class="hljs-comment">//  Leo</span><br></code></pre></td></tr></table></figure><p>通过上面的代码可以看出Java<code>继承</code>了Employees,然而子类与父类中都存在seyHello方法，为了满足不同的需求子类继承父类之后<code>重写</code>了seyHello方法。所以在<code>调用的时候会得到不同的结果</code>。既然子类继承了父类，子类也同样拥有父类的getName方法。</p><blockquote><p><code>重载</code>就是函数或者方法有相同的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法。</p></blockquote><p>因为JavaScript是<code>没有重载的概念</code>的所以要自己编写逻辑完成重载。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employees</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">arg</span>)</span>&#123;<br>        <span class="hljs-keyword">let</span> obj = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">switch</span>(<span class="hljs-keyword">typeof</span> arg)<br>        &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;string&quot;</span>:<br>                  obj = <span class="hljs-keyword">new</span> StringEmployees(arg);<br>                  <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;object&quot;</span>:<br>                  obj = <span class="hljs-keyword">new</span> ObjEmployees(ObjEmployees);<br>                  <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;number&quot;</span>:<br>                obj = <span class="hljs-keyword">new</span> NumberEmployees(ObjEmployees);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjEmployees</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">arg</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;ObjEmployees&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringEmployees</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">arg</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;StringEmployees&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NumberEmployees</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">arg</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;NumberEmployees&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">new</span> Employees(&#123;&#125;)   <span class="hljs-comment">// ObjEmployees</span><br><span class="hljs-keyword">new</span> Employees(<span class="hljs-string">&quot;123456&quot;</span>) <span class="hljs-comment">//  StringEmployees</span><br><span class="hljs-keyword">new</span> Employees(<span class="hljs-number">987654</span>)   <span class="hljs-comment">//  NumberEmployees</span><br></code></pre></td></tr></table></figure><p>在上面的代码中定义了<code>Employees</code>,<code>ObjEmployees</code>,<code>StringEmployees</code>,<code>NumberEmployees</code>类,在实例化Employees的时候在constructor里面进行了<code>判断</code>，根据<code>参数</code>的不同<code>返回不同的对应的类</code>。这样完成了一个简单的类重载。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在编程的是多多运用这个写思想对其编程时很有用的，能够使你的代码达到高复用以及可维护。</p><ul><li>封装可以隐藏实现细节，使得代码模块化；</li><li>继承可以扩展已存在的代码模块（类），它们的目的都是为了——代码重用。</li><li>多态就是相同的事物，调用其相同的方法，参数也相同时，但表现的行为却不同。多态分为两种，一种是<code>行为多态</code>与<code>对象的多态</code>。</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript数组循环的几种写法</title>
    <link href="/2020/10/13/JavaScript%E6%95%B0%E7%BB%84%E5%BE%AA%E7%8E%AF%E7%9A%84%E5%87%A0%E7%A7%8D%E5%86%99%E6%B3%95/"/>
    <url>/2020/10/13/JavaScript%E6%95%B0%E7%BB%84%E5%BE%AA%E7%8E%AF%E7%9A%84%E5%87%A0%E7%A7%8D%E5%86%99%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>好用的Javascript循环数组方法可以帮助您编写更加声明性、流畅的风格代码。而不是积累起来for循环和嵌套来处理列表和集合中的数据，您可以利用这些方法更好地将逻辑组织成功能的构建块，然后将它们链接起来以创建更可读和更易于理解的实现。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>对原数组数据进行处理，返回一个符合需求的新的数组，并且不修改原数组数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> studentList = [<br>    &#123;<br>        id : <span class="hljs-string">&#x27;01&#x27;</span>,<br>        name : <span class="hljs-string">&#x27;vanlus&#x27;</span>,<br>        age : <span class="hljs-number">18</span><br>    &#125;,<br>    &#123;<br>        id : <span class="hljs-string">&#x27;02&#x27;</span>,<br>        name : <span class="hljs-string">&#x27;James&#x27;</span>,<br>        age : <span class="hljs-number">22</span><br>    &#125;,<br>    &#123;<br>        id : <span class="hljs-string">&#x27;03&#x27;</span>,<br>        name : <span class="hljs-string">&#x27;Kobe&#x27;</span>,<br>        age : <span class="hljs-number">35</span><br>    &#125;,<br>]<br><br><span class="hljs-comment">// 需要获取数组里面的age字段+2组成一个新的数组</span><br><span class="hljs-comment">// [ 20, 24, 37 ]</span><br></code></pre></td></tr></table></figure><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>使用率最高，也是最基本的一种遍历方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> ageList = [];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;studentList.length; i++)&#123;<br>    ageList.push(studentList[i].age + <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="forEach循环"><a href="#forEach循环" class="headerlink" title="forEach循环"></a>forEach循环</h2><p>forEach中传入要执行的回调函数，函数有三个参数。第一个参数为数组元素(必选)，第二个参数为数组元素索引值(可选)，第三个参数为数组本身(可选)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> ageList = [];<br>studentList.forEach(<span class="hljs-function">(<span class="hljs-params">item,index,arr</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(item);<br>    <span class="hljs-built_in">console</span>.log(index);<br>    <span class="hljs-built_in">console</span>.log(arr);<br>    ageList.push(item.age + <span class="hljs-number">2</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for in循环"></a>for in循环</h2><p>for…in循环可用于循环对象和数组,推荐用于循环<code>对象</code>,可以用来遍历JSON</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> ageList = [];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> index <span class="hljs-keyword">in</span> studentList)&#123;<br>    ageList.push(studentList[index].age + <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="for-of循环"><a href="#for-of循环" class="headerlink" title="for of循环"></a>for of循环</h2><p>可循环数组和对象，推荐用于遍历<code>数组</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> ageList = [];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> studentList)&#123;<br>    ageList.push(item.age + <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>for…of提供了三个新方法：</p><ul><li>key()是对键名的遍历；</li><li>value()是对键值的遍历；</li><li>entries()是对键值对的遍历；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> ageList = [];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> index <span class="hljs-keyword">of</span> studentList.keys())&#123;<br>    <span class="hljs-built_in">console</span>.log(index);  <span class="hljs-comment">// 0,1,2</span><br>    ageList.push(studentList[index].age + <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> ageList = [];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> [index,value] <span class="hljs-keyword">of</span> studentList.entries())&#123;<br>    <span class="hljs-built_in">console</span>.log(index); <span class="hljs-comment">// 0,1,2</span><br>    ageList.push(value.age + <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="map循环"><a href="#map循环" class="headerlink" title="map循环"></a>map循环</h2><p>map() 会<code>返回一个新数组</code>，数组中的元素为原始数组元素调用函数处理后的值。<br>map() 方法按照原始数组元素顺序依次处理元素。<br>map <code>不修改</code>调用它<code>原数组</code>的本身。<br>map()中传入要执行的回调函数，函数有三个参数。第一个参数为数组元素(必选)，第二个参数为数组元素索引值(可选)，第三个参数为数组本身(可选)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> ageList = studentList.map(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> item.age + <span class="hljs-number">2</span>;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p>array.reduce(function callback(accumulator, currentValue, currentIndex, array){<br>}[, initialValue])</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> ageList = studentList.reduce(<span class="hljs-function">(<span class="hljs-params">arr,item</span>)=&gt;</span>&#123;<br>    arr.push(item.age + <span class="hljs-number">2</span>); <span class="hljs-comment">// 这里不能直接return,arr.push返回的是数组新的长度</span><br>    <span class="hljs-keyword">return</span> arr;<br>&#125;,[])<br></code></pre></td></tr></table></figure><h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h2><p>从一个类似数组或可迭代对象创建一个新的，<code>浅拷贝</code>的数组实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> ageList = <span class="hljs-built_in">Array</span>.from(studentList,<span class="hljs-function">(<span class="hljs-params">item</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> item.age + <span class="hljs-number">2</span>;<br>&#125;)<br></code></pre></td></tr></table></figure><p><a href="http://caibaojian.com/for-loop.html">参考文章：http://caibaojian.com/for-loop.html</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript中关于数组的问题</title>
    <link href="/2020/09/29/JavaScript%E4%B8%AD%E5%85%B3%E4%BA%8E%E6%95%B0%E7%BB%84%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2020/09/29/JavaScript%E4%B8%AD%E5%85%B3%E4%BA%8E%E6%95%B0%E7%BB%84%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>前端工作中，关于js数组的操作也占据了很大的一部分，特别是关于数组的操作上。下面我就以前端中常用的操作，说说js中数组有哪些方法开始说起。也有很多人会迷惑，哪些是改变原数组，哪些不会改变呢？希望对己对人有帮助:D</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JavaScript中创建数组有两种方式，第一种是构造函数的方式，第二种是字面量的方式。</p><p>构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<br><span class="hljs-keyword">var</span> arr2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">var</span> arr3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><p>使用数组字面量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr4 = [];<br><span class="hljs-keyword">var</span> arr5 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br></code></pre></td></tr></table></figure><p>两者的区别</p><p>使用new关键字的方法会在内存中开辟一些空间，用来记录与存储该变量，也就是这是一个实例化过程。在Javascript里分配大量的new变量地址是一项很慢的操作。Array()是一个对象，[]是一个数据原型。使用new Array()系统每次都会新生成一个对象，浏览器每生成一个对象都会耗费资源去构造他的属性和方法。</p><p>其实这和字符串的创建差不多，new String(‘str’)，一种是直接创建了一个字符串，一个是调用字符串的构造函数创建字符串对象然后再创建这个字符串，中间多了一个创建对象的过程。所以为了效率起见，推荐使用字面量的方式创建。接下来介绍各个数组方法。</p><h2 id="push-和pop"><a href="#push-和pop" class="headerlink" title="push()和pop()"></a>push()和pop()</h2><p>push(): 把元素逐个添加到数组末尾，可接收任意数量的参数并返回修改后数组的长度。</p><p>pop()：数组末尾移除最后一项，减少数组的 length 值，然后返回移除的项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>];<br><span class="hljs-keyword">var</span> count = arr.push(<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>);<br><span class="hljs-built_in">console</span>.log(count); <span class="hljs-comment">// 5</span><br><span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</span><br><span class="hljs-keyword">var</span> item = arr.pop();<br><span class="hljs-built_in">console</span>.log(item); <span class="hljs-comment">// e</span><br><span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c, &quot;d&quot;]</span><br></code></pre></td></tr></table></figure><h2 id="shift-和-unshift"><a href="#shift-和-unshift" class="headerlink" title="shift() 和 unshift()"></a>shift() 和 unshift()</h2><p>shift()：删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined 。</p><p>unshift():将参数添加到原数组开头，并返回数组的长度 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>];<br><span class="hljs-keyword">var</span> count = arr.unshift(<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>);<br><span class="hljs-built_in">console</span>.log(count); <span class="hljs-comment">// 5</span><br><span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">//[&quot;d&quot;, &quot;e&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class="hljs-keyword">var</span> item = arr.shift();<br><span class="hljs-built_in">console</span>.log(item); <span class="hljs-comment">// d</span><br><span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">// [&quot;e&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br></code></pre></td></tr></table></figure><h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><p>sort()：按升序排列数组项，即最小的值位于最前面，最大的值排在最后面。</p><p>但是注意的是，在排序时，sort()方法会调用数组项的 toString()方法，然后比较得到的字符串来确定如何排序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>];<br><span class="hljs-built_in">console</span>.log(arr1.sort()); <span class="hljs-comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span><br>arr2 = [<span class="hljs-number">18</span>, <span class="hljs-number">29</span>, <span class="hljs-number">50</span>, <span class="hljs-number">4</span>];<br><span class="hljs-built_in">console</span>.log(arr2.sort()); <span class="hljs-comment">// [18, 29, 4, 50]</span><br><span class="hljs-built_in">console</span>.log(arr2); <span class="hljs-comment">// [18, 29, 4, 50]</span><br></code></pre></td></tr></table></figure><p>sort()方法可以接收一个比较函数作为参数，若参数比较返回-1则是升序排序，返回1则是升序排序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compare</span>(<span class="hljs-params">value1, value2</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (value1 &lt; value2) &#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value1 &gt; value2) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br>arr2 = [<span class="hljs-number">18</span>, <span class="hljs-number">29</span>, <span class="hljs-number">4</span>, <span class="hljs-number">50</span>];<br><span class="hljs-built_in">console</span>.log(arr2.sort(compare)); <span class="hljs-comment">// [4, 18, 29, 50]</span><br></code></pre></td></tr></table></figure><p>如果是降序的话，只需要交换返回值就好</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compare</span>(<span class="hljs-params">value1, value2</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (value1 &lt; value2) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value1 &gt; value2) &#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br>arr2 = [<span class="hljs-number">18</span>, <span class="hljs-number">29</span>, <span class="hljs-number">50</span>, <span class="hljs-number">4</span>];<br><span class="hljs-built_in">console</span>.log(arr2.sort(compare)); <span class="hljs-comment">// [50, 29, 18, 4]</span><br></code></pre></td></tr></table></figure><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h2><p>reverse()：反转数组项的顺序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">18</span>, <span class="hljs-number">29</span>, <span class="hljs-number">50</span>, <span class="hljs-number">4</span>];<br><span class="hljs-built_in">console</span>.log(arr.reverse()); <span class="hljs-comment">//[4, 50, 29, 18]</span><br><span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">//[4, 50, 29, 18]</span><br></code></pre></td></tr></table></figure><h2 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h2><p>默认用逗号为分隔符，参数是分隔符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]; <br><span class="hljs-built_in">console</span>.log(arr.join()); <span class="hljs-comment">// 1,2,3 </span><br><span class="hljs-built_in">console</span>.log(arr.join(<span class="hljs-string">&quot;+&quot;</span>)); <span class="hljs-comment">// 1+2+3 </span><br><span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">// [1, 2, 3]</span><br></code></pre></td></tr></table></figure><h2 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h2><p>concat() ：将参数添加到原数组中。该方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。若没有给concat()方法传递参数，默认情况下复制当前数组并返回，不会改变原数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br><span class="hljs-keyword">var</span> arrCopy = arr.concat(<span class="hljs-number">5</span>,[<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]);<br><span class="hljs-built_in">console</span>.log(arrCopy); <span class="hljs-comment">//[1, 2, 3, 4, 5, 6, 7, 8]</span><br><span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">// [1, 2, 3, 4]</span><br></code></pre></td></tr></table></figure><h2 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h2><p>slice()：返回从原数组中指定开始下标到结束下标之间的项组成的新数组。slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下， slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。如果有两个参数，该方法返回起始和结束位置之间的项，但不包括结束位置的项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">11</span>];<br><span class="hljs-keyword">var</span> arrCopy = arr.slice(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">var</span> arrCopy2 = arr.slice(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>);<br><span class="hljs-keyword">var</span> arrCopy3 = arr.slice(<span class="hljs-number">1</span>,-<span class="hljs-number">2</span>);<br><span class="hljs-keyword">var</span> arrCopy4 = arr.slice(-<span class="hljs-number">4</span>,-<span class="hljs-number">1</span>);<br><span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">//[1, 3, 5, 7, 9, 11](原数组没变)</span><br><span class="hljs-built_in">console</span>.log(arrCopy); <span class="hljs-comment">//[3, 5, 7, 9, 11]</span><br><span class="hljs-built_in">console</span>.log(arrCopy2); <span class="hljs-comment">//[3, 5, 7]</span><br><span class="hljs-built_in">console</span>.log(arrCopy3); <span class="hljs-comment">//[3, 5, 7]</span><br><span class="hljs-built_in">console</span>.log(arrCopy4); <span class="hljs-comment">//[5, 7, 9]</span><br></code></pre></td></tr></table></figure><ul><li>arrCopy只设置了一个参数，也就是起始下标为1，所以返回的数组为下标1（包括下标1）开始到数组最后。</li><li>arrCopy2设置了两个参数，返回起始下标（包括1）开始到终止下标（不包括4）的子数组。</li><li>arrCopy3设置了两个参数，终止下标为负数，当出现负数时，将负数加上数组长度的值（6）来替换该位置的数，因此就是从1开始到4（不包括）的子数组。</li><li>arrCopy4两个参数都是负数，所以都加上数组长度6转换成正数，因此相当于slice(2,5)。</li></ul><h2 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h2><p>splice()：数组中最强大的方法，可以实现多种操作。</p><ul><li>添加：向数组中添加项，参数：起始位置、 0（要删除的项数）和要插入的项。例如，splice(2,0,1,1)会从当前数组的位置 2 开始插入1和1。</li><li>删除：删除数组中的项，参数：要删除的第一项的位置和要删除的项数。例如， splice(0,2)会删除数组中的前两项。</li><li>修改：向数组中添加项，且同时支持删除数组中的项，参数：起始位置、要删除的项数和要插入的项。例如，splice (2,1,1,1)会删除当前数组位置 2 的项，然后再从位置 2 开始插入1和1。</li><li>splice()方法返回一个数组，该数组中包含从原始数组中删除的项，如果没有删除任何项，则返回一个空数组。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>];<br><span class="hljs-keyword">var</span> arrCut1 = arr.splice(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">//[ &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27; ]</span><br><span class="hljs-built_in">console</span>.log(arrCut1);<span class="hljs-comment">//[ &#x27;a&#x27;, &#x27;b&#x27; ]</span><br><br><span class="hljs-keyword">var</span> arrCut2 = arr.splice(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br><span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">//[ &#x27;c&#x27;, &#x27;d&#x27;, 1, 1, &#x27;e&#x27;, &#x27;f&#x27; ]</span><br><span class="hljs-built_in">console</span>.log(arrCut2); <span class="hljs-comment">//[]</span><br><br><span class="hljs-keyword">var</span> arrCut3 = arr.splice(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(arr); <span class="hljs-comment">//[ &#x27;c&#x27;, 2, 2, 1, 1, &#x27;e&#x27;, &#x27;f&#x27; ]</span><br><span class="hljs-built_in">console</span>.log(arrCut3); <span class="hljs-comment">//[ &#x27;d&#x27; ]</span><br></code></pre></td></tr></table></figure><h2 id="indexOf-和-lastIndexOf"><a href="#indexOf-和-lastIndexOf" class="headerlink" title="indexOf()和 lastIndexOf()"></a>indexOf()和 lastIndexOf()</h2><p>indexOf()：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的开头（位置 0）开始向后查找。</p><p>lastIndexOf：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中， 从数组的末尾开始向前查找。</p><p>若没有查找到则返回-1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-built_in">console</span>.log(arr.indexOf(<span class="hljs-string">&#x27;c&#x27;</span>)); <span class="hljs-comment">//2</span><br><span class="hljs-built_in">console</span>.log(arr.lastIndexOf(<span class="hljs-string">&#x27;c&#x27;</span>)); <span class="hljs-comment">//2</span><br><span class="hljs-built_in">console</span>.log(arr.indexOf(<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-number">4</span>)); <span class="hljs-comment">//4</span><br><span class="hljs-built_in">console</span>.log(arr.lastIndexOf(<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-number">4</span>)); <span class="hljs-comment">//4</span><br><span class="hljs-built_in">console</span>.log(arr.indexOf(<span class="hljs-string">&quot;aa&quot;</span>)); <span class="hljs-comment">//-1</span><br></code></pre></td></tr></table></figure><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h2><p>forEach()：对数组进行遍历循环，对数组中的每一项运行给定函数。这个方法没有返回值。参数都是function类型，默认有参数，参数分别为：遍历的数组内容；对应的数组索引，数组本身。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x, index, a</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(x + <span class="hljs-string">&#x27;,&#x27;</span> + index + <span class="hljs-string">&#x27;,&#x27;</span> + (a === arr));<br>&#125;);<br><span class="hljs-comment">// 输出为：</span><br><span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-literal">true</span><br><span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-literal">true</span><br><span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-literal">true</span><br><span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-literal">true</span><br><span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>关于forEach是否可以改变原数组的问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//这样操作发现是改变不了的</span><br><span class="hljs-keyword">let</span> oldArr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>] ;<br>oldArr.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>    item = <span class="hljs-number">1</span><br>&#125;)<br><span class="hljs-built_in">console</span>.log(oldArr);<span class="hljs-comment">//[1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//这样操作发现是可以改变的</span><br><span class="hljs-keyword">let</span> oldArr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>] ;<br>oldArr.forEach(<span class="hljs-function">(<span class="hljs-params">item,index</span>) =&gt;</span> &#123;<br>    oldArr[index] = <span class="hljs-number">0</span>;<br>&#125;)<br><span class="hljs-built_in">console</span>.log(oldArr); <span class="hljs-comment">//[ 0, 0, 0, 0, 0 ]</span><br></code></pre></td></tr></table></figure><p>其实每次forEach的循环的item，只是forEach给我们在另一个地方复制创建新元素，和原来的元素并无关系。到头来其实是JavaScript的基本数据类型与引用数据类型的区别。对于基本数据类型：Number, String, Boolean, Null, Undefined, Symbol，它们在<code>栈内存中直接存储变量与值</code>。Object对象的真正的数据是保存在<code>堆内存，栈内只保存了对象的变量以及对应的堆的地址</code>，所以操作Object其实就是直接操作了原数组对象本身。</p><p>forEach 的基本原理也是for循环，所以使用arr[index]的形式赋值改变，其实就是操作堆地址，是可以改变的。</p><h2 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h2><p>map()：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">var</span> arr1 = arr.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> item+<span class="hljs-number">1</span>;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(arr1); <span class="hljs-comment">//[ 2, 3, 4, 5, 6 ]</span><br></code></pre></td></tr></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h2><p>filter()：对数组中的每一项运行给定函数，返回满足过滤条件组成的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><span class="hljs-keyword">var</span> arr1 = arr.filter(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">2</span><br>&#125;);<br><span class="hljs-built_in">console</span>.log(arr1);<span class="hljs-comment">//[ 3, 4, 5, 6 ]</span><br></code></pre></td></tr></table></figure><h2 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h2><p>every()：判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br><span class="hljs-keyword">var</span> arr2 = arr.every(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> x &lt; <span class="hljs-number">7</span>;<br>&#125;); <br><span class="hljs-built_in">console</span>.log(arr2); <span class="hljs-comment">//true</span><br><span class="hljs-keyword">var</span> arr3 = arr.every(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> x &lt; <span class="hljs-number">5</span>;<br>&#125;); <br><span class="hljs-built_in">console</span>.log(arr3); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h2 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h2><p>some()：判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br><span class="hljs-keyword">var</span> arr2 = arr.some(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> x &lt; <span class="hljs-number">6</span>;<br>&#125;); <br><span class="hljs-built_in">console</span>.log(arr2); <span class="hljs-comment">//true</span><br><span class="hljs-keyword">var</span> arr3 = arr.some(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> x &lt; <span class="hljs-number">0</span>;<br>&#125;); <br><span class="hljs-built_in">console</span>.log(arr3); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><h2 id="reduce-和-reduceRight"><a href="#reduce-和-reduceRight" class="headerlink" title="reduce()和 reduceRight()"></a>reduce()和 reduceRight()</h2><p>这两个方法都会实现迭代数组的所有项，然后构建一个最终返回的值。</p><p>reduce()方法从数组的第一项开始，依次遍历到最后。而 reduceRight()则从数组的最后一项开始，依次向前遍历到第一项。</p><p>方法接收两个参数：一个在每一项上调用的函数和基础的初始值。</p><p>reduce()和 reduceRight()的函数接收 4 个参数：前一个值（pre）、当前值（cur）、项的索引（index）和数组对象（array）。这个函数返回的任何值都会作为第一个参数自动传给下一项。第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项，第二个参数就是数组的第二项。</p><p>下面代码用reduce()实现数组求和，数组一开始加了一个初始值10。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> values = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-keyword">var</span> sum = values.reduceRight(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">prev, cur, index, array</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> prev + cur;<br>&#125;,<span class="hljs-number">5</span>);<br><span class="hljs-built_in">console</span>.log(sum); <span class="hljs-comment">//20</span><br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>以上的数组方法不论在面试中还是在项目中都非常管用，特别是后端的数据处理的时候会经常用到。现在总结一下哪些方法是改变原数组的，哪些是没有的。值得注意的是forEach的特殊点，文中已做说明。</p><p>1.改变原数组：</p><ul><li>push() pop()</li><li>shift() unshift()</li><li>sort() reverse()</li><li>splice()</li></ul><p>2.原数组不变：</p><ul><li>concat() join()</li><li>slice() map()</li><li>indexOf() lastIndexOf()</li><li>filter() every()</li><li>some() reduce()</li><li>reduceRight()</li></ul><p>参考：<a href="http://blog.alanwu.site/2020/03/18/jsArrayAPI/">http://blog.alanwu.site/2020/03/18/jsArrayAPI/</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typescript基础学习</title>
    <link href="/2020/09/27/Typescript%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <url>/2020/09/27/Typescript%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>TypeScript 可以使用 JavaScript 中的所有代码和编码概念，TypeScript 是为了使 JavaScript 的开发变得更加容易而创建的。例如，TypeScript 使用类型和接口等概念来描述正在使用的数据，这使开发人员能够快速检测错误并调试应用程序。</p><blockquote><p>TypeScript 正在成为开发大型编码项目的有力工具。因为其面向对象编程语言的结构保持了代码的清洁、一致和简单的调试。因此在应对大型开发项目时，使用 TypeScript 更加合适。如果有一个相对较小的编码项目，似乎没有必要使用 TypeScript，只需使用灵活的 JavaScript 即可。</p></blockquote><h2 id="TypeScript-具有以下特点"><a href="#TypeScript-具有以下特点" class="headerlink" title="TypeScript 具有以下特点"></a>TypeScript 具有以下特点</h2><ul><li>TypeScript 是 Microsoft 推出的开源语言，使用 Apache 授权协议</li><li>TypeScript 增加了静态类型、类、模块、接口和类型注解</li><li>TypeScript 可用于开发大型的应用</li><li>TypeScript 易学易于理解</li></ul><h2 id="TypeScript-具有以下优点"><a href="#TypeScript-具有以下优点" class="headerlink" title="TypeScript 具有以下优点"></a>TypeScript 具有以下优点</h2><ul><li>1.静态输入。静态类型化是一种功能，可以在开发人员编写脚本时检测错误。查找并修复错误是当今开发团队的迫切需求。有了这项功能，就会允许开发人员编写更健壮的代码并对其进行维护，以便使得代码质量更好、更清晰。</li><li>2.大型的开发项目。有时为了改进开发项目，需要对代码库进行小的增量更改。这些小小的变化可能会产生严重的、意想不到的后果，因此有必要撤销这些变化。使用TypeScript工具来进行重构更变的容易、快捷。</li><li>3.更好的协作。当发开大型项目时，会有许多开发人员，此时乱码和错误的机也会增加。类型安全是一种在编码期间检测错误的功能，而不是在编译项目时检测错误。这为开发团队创建了一个更高效的编码和调试过程。</li><li>4.更强的生产力。干净的 ECMAScript 6 代码，自动完成和动态输入等因素有助于提高开发人员的工作效率。这些功能也有助于编译器创建优化的代码。</li></ul><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>如果在程序中能灵活的使用枚举(<code>enum</code>),会让程序有更好的可读性。<br>枚举类型使用：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-built_in">enum</span> Grade &#123;<br>    PRIMARY,<br>    MIDDLE,<br>    HIGH<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getGrade</span>(<span class="hljs-params">grade:<span class="hljs-built_in">any</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(grade == Grade.PRIMARY)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;小学&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(grade == Grade.MIDDLE)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;中学&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;大学&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> result = getGrade(Grade.PRIMARY);<br><span class="hljs-built_in">console</span>.log(result);<br></code></pre></td></tr></table></figure><p>也可以这样传值或者调值：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-built_in">console</span>.log(getGrade(<span class="hljs-number">0</span>),Grade.MIDDLE, Grade[<span class="hljs-number">2</span>]);<br><span class="hljs-comment">// 小学 1 HIGH</span><br></code></pre></td></tr></table></figure><p>这看起来很神奇，这是因为枚举类型是有对应的数字值的，<code>默认</code>是从 0 开始的。那这时候不想默认从 0 开始，而是想从 1 开始。可以这样写。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-built_in">enum</span> Grade &#123;<br>    PRIMARY = <span class="hljs-number">1</span>,<br>    MIDDLE,<br>    HIGH<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="函数中的泛型"><a href="#函数中的泛型" class="headerlink" title="函数中的泛型"></a>函数中的泛型</h3><p>写一个函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addParmas</span>(<span class="hljs-params">one : <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span>,two : <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;one&#125;</span><span class="hljs-subst">$&#123;two&#125;</span>`</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(addParmas(<span class="hljs-string">&#x27;love&#x27;</span>,<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><p>上面这么做的确没问题，现在有一个需求：<br>传入的参数，要么全是string类型，要么全是number类型<br>泛型:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addParmas</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">one:T,two:T</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;one&#125;</span><span class="hljs-subst">$&#123;two&#125;</span>`</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log(addParmas&lt;<span class="hljs-built_in">number</span>&gt;(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><p>函数参数是数组使用泛型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addParmas</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">list:T[]</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br><span class="hljs-built_in">console</span>.log(addParmas&lt;<span class="hljs-built_in">number</span>&gt;([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]));<br></code></pre></td></tr></table></figure><p>函数参数自定义泛型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addParmas</span>&lt;<span class="hljs-title">T</span>,<span class="hljs-title">P</span>&gt;(<span class="hljs-params">one:T,two:T,three:P</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;one&#125;</span><span class="hljs-subst">$&#123;two&#125;</span><span class="hljs-subst">$&#123;three&#125;</span>`</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(addParmas&lt;<span class="hljs-built_in">number</span>,<span class="hljs-built_in">string</span>&gt;(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;3&#x27;</span>));<br></code></pre></td></tr></table></figure><h3 id="类中的泛型"><a href="#类中的泛型" class="headerlink" title="类中的泛型"></a>类中的泛型</h3><p>写一个学生类Student,实例化一个对象</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> studentId : <span class="hljs-built_in">string</span></span>)</span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-title">getStudent</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.studentId<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;001&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(p.getStudent());<br></code></pre></td></tr></table></figure><p>新建一个类，参数是一个数组，数组里面可以是number或者string</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentList</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> list : (<span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>) []</span>)</span>&#123;&#125;<br>    getSingleStudent(index:<span class="hljs-built_in">number</span>): (<span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.list[index];<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> studentList = <span class="hljs-keyword">new</span> StudentList([<span class="hljs-string">&#x27;vanlus&#x27;</span>,<span class="hljs-string">&#x27;jokerwan&#x27;</span>,<span class="hljs-number">222</span>]);<br><span class="hljs-built_in">console</span>.log(studentList.getSingleStudent(<span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><p>使用泛型来重写上面的类</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentList</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> list : T []</span>)</span>&#123;&#125;<br>    getSingleStudent(index:<span class="hljs-built_in">number</span>): T &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.list[index];<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> studentList = <span class="hljs-keyword">new</span> StudentList&lt;<span class="hljs-built_in">string</span>&gt;([<span class="hljs-string">&#x27;vanlus&#x27;</span>,<span class="hljs-string">&#x27;jokerwan&#x27;</span>,<span class="hljs-string">&#x27;hehe&#x27;</span>]);<br><span class="hljs-built_in">console</span>.log(studentList.getSingleStudent(<span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><p>泛型约束,extends</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentList</span>&lt;<span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> (<span class="hljs-title">number</span> | <span class="hljs-title">string</span>)&gt;</span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> list : T []</span>)</span>&#123;&#125;<br>    getSingleStudent(index:<span class="hljs-built_in">number</span>): T &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.list[index];<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> studentList = <span class="hljs-keyword">new</span> StudentList&lt;<span class="hljs-built_in">string</span>&gt;([<span class="hljs-string">&#x27;vanlus&#x27;</span>,<span class="hljs-string">&#x27;jokerwan&#x27;</span>,<span class="hljs-string">&#x27;hehe&#x27;</span>]);<br><span class="hljs-built_in">console</span>.log(studentList.getSingleStudent(<span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><p>泛型中的继承接口：<br>需要我们传入的数组结构是对象，且有name字段，并且返回name值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">interface</span> Student&#123;<br>    name : <span class="hljs-built_in">string</span><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentList</span>&lt;<span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Student</span>&gt;</span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> list : T []</span>)</span>&#123;&#125;<br>    getSingleStudent(index:<span class="hljs-built_in">number</span>): <span class="hljs-built_in">string</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.list[index].name;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> studentList = <span class="hljs-keyword">new</span> StudentList([<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;vanlus&#x27;</span>&#125;,<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jokerwan&#x27;</span>&#125;,<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;hehe&#x27;</span>&#125;<br>]);<br><span class="hljs-built_in">console</span>.log(studentList.getSingleStudent(<span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><p>未完待续 ：D</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typescript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vscode工具解放双手提高开发效率</title>
    <link href="/2020/09/25/Vscode%E5%B7%A5%E5%85%B7%E8%A7%A3%E6%94%BE%E5%8F%8C%E6%89%8B%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87/"/>
    <url>/2020/09/25/Vscode%E5%B7%A5%E5%85%B7%E8%A7%A3%E6%94%BE%E5%8F%8C%E6%89%8B%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87/</url>
    
    <content type="html"><![CDATA[<p>在开发过程中，如何又好又快地开发已经成为一个热点话题。在vscode中各式各样插件工具已经逐渐被开发和应用，本文旨分享一些现有的好用的开发插件或者方法。</p><h2 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h2><p>vscode - 设置 - 用户代码片段 - 新代码片段 - 输入代码段文件名 - 拷贝下面代码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;Print to console&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;prefix&quot;</span>: <span class="hljs-string">&quot;vue&quot;</span>,<br>        <span class="hljs-attr">&quot;body&quot;</span>: [<br>            <span class="hljs-string">&quot;&lt;template&gt;&quot;</span>,<br>            <span class="hljs-string">&quot;\t&lt;section class=\&quot;template-area\&quot;&gt;&lt;/section&gt;&quot;</span>,<br>            <span class="hljs-string">&quot;&lt;/template&gt;\n&quot;</span>,<br>            <span class="hljs-string">&quot;&lt;script&gt;&quot;</span>,<br>            <span class="hljs-string">&quot;export default &#123;&quot;</span>,<br>            <span class="hljs-string">&quot;\tdata() &#123;&quot;</span>,<br>            <span class="hljs-string">&quot;\t\treturn &#123;&#125;;&quot;</span>,<br><span class="hljs-string">&quot;\t&#125;,&quot;</span>,<br><span class="hljs-string">&quot;\tcreated()&#123;&#125;,&quot;</span>,<br>            <span class="hljs-string">&quot;\tmethods: &#123;&#125;,&quot;</span>,<br>            <span class="hljs-string">&quot;\tcomponents: &#123;&#125;&quot;</span>,<br>            <span class="hljs-string">&quot;&#125;;&quot;</span>,<br>            <span class="hljs-string">&quot;&lt;/script&gt;\n&quot;</span>,<br><span class="hljs-string">&quot;&lt;style lang=\&quot;less\&quot; scoped&gt;&quot;</span>,<br><span class="hljs-string">&quot;.template-area&#123;&quot;</span>,<br><span class="hljs-string">&quot;\tbackground-color: #fff;&quot;</span>,<br><span class="hljs-string">&quot;\theight: 100%;&quot;</span>,<br><span class="hljs-string">&quot;\toverflow: auto;&quot;</span>,<br><span class="hljs-string">&quot;&#125;&quot;</span>,<br>            <span class="hljs-string">&quot;&lt;/style&gt;&quot;</span>,<br><span class="hljs-string">&quot;$2&quot;</span><br>        ],<br>        <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Vue code snippet&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样以后新建一个vue文件后，只需要输入vue，回车，就能得到vue模板最基础的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>    &lt;section <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;template-area&quot;</span>&gt;&lt;/section&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span>&#123;&#125;,<br>    methods: &#123;&#125;,<br>    components: &#123;&#125;<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=<span class="hljs-string">&quot;less&quot;</span> scoped&gt;<br>.template-area&#123;<br>    background-color: #fff;<br>    height: <span class="hljs-number">100</span>%;<br>    overflow: auto;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h2 id="AutoScssStruct4Vue插件"><a href="#AutoScssStruct4Vue插件" class="headerlink" title="AutoScssStruct4Vue插件"></a>AutoScssStruct4Vue插件</h2><p>有个小伙伴提到写新页面的时候，<code>template</code>大概布局写完后，对着 <code>template</code>结构写<code>scss</code>是件比较耗时耗力的事情，如果能作出一个自动依据<code>template</code>结构生成<code>scss</code>文件的<code>vscode插件</code>就好了,AutoScssStruct4Vue插件就这么产生了，在<code>vscode</code>扩展市场直接安装即可。<br>当写完template代码后，右击，选择AutoScssStruct就可以生成你想要的css了，而且可以重复右击编译，实现更新的效果，会兼容之前写好的css代码。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>    &lt;section <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;template-area&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;header&quot;</span>&gt;&lt;/div&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;content&quot;</span>&gt;<br>                &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;main-title&quot;</span>&gt;&lt;/div&gt;<br>            &lt;/div&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;&lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/section&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span>&#123;&#125;,<br>    methods: &#123;&#125;,<br>    components: &#123;&#125;<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=<span class="hljs-string">&quot;less&quot;</span> scoped&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>右击AutoScssStruct后：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>    &lt;section <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;template-area&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;header&quot;</span>&gt;&lt;/div&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;content&quot;</span>&gt;<br>                &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;main-title&quot;</span>&gt;&lt;/div&gt;<br>            &lt;/div&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;&lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/section&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span>&#123;&#125;,<br>    methods: &#123;&#125;,<br>    components: &#123;&#125;<br>&#125;;<br>&lt;/script&gt;<br><br>&lt;style lang=<span class="hljs-string">&quot;less&quot;</span> scoped&gt;<br>.template-area &#123;<br>    .container &#123;<br>        .header &#123;<br>        &#125;<br>        .content &#123;<br>            .main-title &#123;<br>            &#125;<br>        &#125;<br>        .footer &#123;<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue.js 组件之间的传值</title>
    <link href="/2020/09/17/Vue.js%20%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BC%A0%E5%80%BC/"/>
    <url>/2020/09/17/Vue.js%20%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BC%A0%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>vue中组件之间的传值传值情况主要有以下三种：</p><ul><li>父组件向子组件传值</li><li>子组件向父组件传值</li><li>兄弟组件之间相互传值或者是两个没有关系的组件之间的传值</li></ul><p>在开始介绍之前我们先建立3个vue文件，文件名分别为:Parent.vue , Child1.vue , Child2.vue。</p><h2 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h2><p>这种情况是三种传值方案中最简单的, 通过在子组件中使用 props就可以实现。</p><h3 id="子组件Child1-vue"><a href="#子组件Child1-vue" class="headerlink" title="子组件Child1.vue"></a>子组件Child1.vue</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>    &lt;button &gt; &#123;&#123;btnName&#125;&#125;&lt;/button&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;Child1&#x27;</span>,<br>  props: [<span class="hljs-string">&#x27;btnName&#x27;</span>]<br>&#125;<br>&lt;/script&gt;<br>&lt;style&gt;<br>    button&#123;<br>        padding:5px 10px;<br>        margin:2px;<br>        background-color:#fff;<br>        border-radius: 5px; <br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="父组件Parent-vue"><a href="#父组件Parent-vue" class="headerlink" title="父组件Parent.vue"></a>父组件Parent.vue</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;child-<span class="hljs-number">1</span> :btnName=<span class="hljs-string">&quot;btnName&quot;</span>/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class="hljs-keyword">import</span> Child1 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Child1&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;Parent&#x27;</span>,<br>  components: &#123;<br>    <span class="hljs-string">&#x27;child-1&#x27;</span>: Child1<br>  &#125;,<br>  data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      btnName: <span class="hljs-string">&#x27; 我是一个button&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>关键点就是需要在子组件中 使用 props 关键字 来接收父组件传过来的值。</p><h2 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h2><p>在子组件向父组件传值时需要使用 vue 中的 $on 和 $emit ，使用$emit 可以触发 $on 中监听的事件，现在我们来实现一个可以传入电话号码的功能</p><h3 id="子组件Child2-vue"><a href="#子组件Child2-vue" class="headerlink" title="子组件Child2.vue"></a>子组件Child2.vue</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>    &lt;button @click=<span class="hljs-string">&quot;clickHandle&quot;</span>&gt; &#123;&#123;btnName&#125;&#125;&lt;/button&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;Child1&#x27;</span>,<br>  props: [<span class="hljs-string">&#x27;btnName&#x27;</span>],<br>  methods: &#123;<br>    clickHandle () &#123;<br>      <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;count&#x27;</span>,<span class="hljs-string">&#x27;120&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>在父组件中有个 telNum字段用于显示电话号码。<br>首先我们需要在Parent.vue的data中定义telNum变量，默认值为’110’，然后将count加入到template中便于显示, 此时parent.vue的template的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  &lt;div&gt;<br>      &lt;p&gt;传过来的电话号码是: &#123;&#123;telNum&#125;&#125;&lt;/p&gt;<br>      &lt;child-<span class="hljs-number">1</span> :btnName=<span class="hljs-string">&quot;btnName&quot;</span>/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class="hljs-keyword">import</span> Child1 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Child1&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;Parent&#x27;</span>,<br>  components: &#123;<br>    <span class="hljs-string">&#x27;child-1&#x27;</span>: Child1<br>  &#125;,<br>  data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      btnName: <span class="hljs-string">&#x27; 我是一个button&#x27;</span>,<br>      telNum: <span class="hljs-string">&#x27;110&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>接下来我们需要在父组件中增加一个可以改变telNum值的事件,同时在 中加上监听事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  &lt;div&gt;<br>      &lt;p&gt;传过来的电话号码是: &#123;&#123;telNum&#125;&#125;&lt;/p&gt;<br>      &lt;child-<span class="hljs-number">1</span> :btnName=<span class="hljs-string">&quot;btnName&quot;</span> @count=<span class="hljs-string">&quot;changeCount&quot;</span>/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br><span class="hljs-keyword">import</span> Child1 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Child1&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  name: <span class="hljs-string">&#x27;Parent&#x27;</span>,<br>  components: &#123;<br>    <span class="hljs-string">&#x27;child-1&#x27;</span>: Child1<br>  &#125;,<br>  data () &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      btnName: <span class="hljs-string">&#x27; 我是一个button&#x27;</span>,<br>      telNum: <span class="hljs-string">&#x27;110&#x27;</span><br>    &#125;<br>  &#125;,<br>  methods:&#123;<br>      <span class="hljs-function"><span class="hljs-title">changeCount</span>(<span class="hljs-params">value</span>)</span>&#123;<br>          <span class="hljs-built_in">this</span>.telNum = value;<br>      &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>现在通过点击button即可实现改变count的值</p><h2 id="兄弟组件之间的传值"><a href="#兄弟组件之间的传值" class="headerlink" title="兄弟组件之间的传值"></a>兄弟组件之间的传值</h2><p>兄弟组件之间传值有两种方式：</p><ul><li>将需要改变的值放到父组件中，子组件通过props来获取父组件的值(不推荐)</li><li>通过eventbus 来实现兄弟组件之间的传值，其原理还是通过$on和$emit来时实现的，区别是现在全局建立一个空的vue对象，然后将事件绑定到该空对象上，最后通过该空对象来触发$on监听的事件(不推荐)</li><li>vuex</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue.use()分析与使用</title>
    <link href="/2020/09/14/vue.use()%E5%88%86%E6%9E%90%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/09/14/vue.use()%E5%88%86%E6%9E%90%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>在使用Vue.js的时候，我们经常会用到vue.use()，比如我们在引入第三方UI库vant时候，会使用到Vue.use(Loading)，或者 Router 和 Vuex 也需要用到，那vue.use()到底是什么？官网给出的解释是: 通过全局方法 Vue.use() 使用插件；接下来分析 一下Vue.use() 的源码和尝试注册一个全局Loading,Toast和Dialog组合方法。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>官方对 Vue.use() 方法的说明：</p><ul><li>通过全局方法 <code>Vue.use()</code> 使用插件；</li><li> <code>Vue.use()</code> 会自动阻止多次注册相同插件；</li><li>它需要在你调用  <code>Vue.use()</code>  启动应用之前完成；</li><li> <code>Vue.use()</code>  方法至少传入一个参数，该参数类型必须是 Object 或 Function，如果是 Object 那么这个 Object 需要定义一个 install 方法，如果是 Function 那么这个函数就被当做 install 方法。在 <code>Vue.use()</code> 执行时 install 会默认执行，当 install 执行时第一个参数就是 Vue，其他参数是 <code>Vue.use()</code> 执行时传入的其他参数。</li></ul><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>src/core/global-api/use.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; toArray &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../util/index&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">initUse</span> (<span class="hljs-params">Vue: GlobalAPI</span>) </span>&#123;<br>  Vue.use = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">plugin: <span class="hljs-built_in">Function</span> | <span class="hljs-built_in">Object</span></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> installedPlugins = (<span class="hljs-built_in">this</span>._installedPlugins || (<span class="hljs-built_in">this</span>._installedPlugins = []))<br>    <span class="hljs-keyword">if</span> (installedPlugins.indexOf(plugin) &gt; -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span><br>    &#125;<br>    <span class="hljs-keyword">const</span> args = toArray(<span class="hljs-built_in">arguments</span>, <span class="hljs-number">1</span>)<br>    args.unshift(<span class="hljs-built_in">this</span>)<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> plugin.install === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>      plugin.install.apply(plugin, args)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> plugin === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>      plugin.apply(<span class="hljs-literal">null</span>, args)<br>    &#125;<br>    installedPlugins.push(plugin)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>src/shared/util.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toArray</span> (<span class="hljs-params">list: any, start?: number</span>): <span class="hljs-title">Array</span>&lt;<span class="hljs-title">any</span>&gt; </span>&#123;<br>  start = start || <span class="hljs-number">0</span><br>  <span class="hljs-keyword">let</span> i = list.length - start<br>  <span class="hljs-keyword">const</span> ret: <span class="hljs-built_in">Array</span>&lt;any&gt; = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(i)<br>  <span class="hljs-keyword">while</span> (i--) &#123;<br>    ret[i] = list[i + start]<br>  &#125;<br>  <span class="hljs-keyword">return</span> ret<br>&#125;<br></code></pre></td></tr></table></figure><p>分析</p><p><code>Vue.use = function (plugin: Function | Object)&#123;&#125; </code><br>在全局api Vue 上定义了 use 方法，接收一个 plugin 参数可以是 Function 也可以是 Object，这就和前面官方规定的 Vue.use() 第一个参数要求的类型对应上了。</p><p><code>if (installedPlugins.indexOf(plugin) &gt; -1) &#123;&#125;</code><br>用来判断该插件是不是已经注册过，防止重复注册。</p><p><code>const args = toArray(arguments, 1)</code><br>arguments是 Vue.use() 方法的参数列表是一个类数组，后面的 1 先理解成一个常量，toArray 方法的作用就是把第一个 Array 参数从下标为1截取到最后。也就拿到了 Vue.use() 方法除去第一个之外的其他参数，这些参数准备在调用 instll 方法的时候传入。</p><p><code>if (typeof plugin.install === &#39;function&#39;) &#123; &#125; else if (typeof plugin === &#39;function&#39;) &#123;&#125;</code><br>这里的if语句是判断 Vue.use() 传入的第一个参数是 Object 还是 Function。</p><p><code>plugin.install.apply(plugin, args) plugin.apply(null, args)</code><br>判断完之后执行那个对应的 install 方法，用 apply 改变 this 指向，并把 toArray 得到的剩余参数传入。</p><p><code>installedPlugins.push(plugin)</code><br>最后记录该组件已经注册过了.</p><p>现在我们发现 Vue.use() 的注册<code>本质上就是执行了一个 install 方法</code>，install 里的内容由开发者自己定义，通俗讲就是一个钩子可能更贴近语义化而已。</p><h2 id="Vue-use-有什么用"><a href="#Vue-use-有什么用" class="headerlink" title="Vue.use()有什么用"></a>Vue.use()有什么用</h2><p>官方文档是这么描述的：插件通常用来为 Vue 添加全局功能。插件的功能范围没有严格的限制——一般有下面几种：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js">MyPlugin.install = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">Vue, options</span>) </span>&#123;<br>  <span class="hljs-comment">// 1. 添加全局方法或 property</span><br>  Vue.myGlobalMethod = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 逻辑...</span><br>  &#125;<br><br>  <span class="hljs-comment">// 2. 添加全局资源</span><br>  Vue.directive(<span class="hljs-string">&#x27;my-directive&#x27;</span>, &#123;<br>    bind (el, binding, vnode, oldVnode) &#123;<br>      <span class="hljs-comment">// 逻辑...</span><br>    &#125;<br>    ...<br>  &#125;)<br><br>  <span class="hljs-comment">// 3. 注入组件选项</span><br>  Vue.mixin(&#123;<br>    created: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-comment">// 逻辑...</span><br>    &#125;<br>    ...<br>  &#125;)<br><br>  <span class="hljs-comment">// 4. 添加实例方法</span><br>  Vue.prototype.$myMethod = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">methodOptions</span>) </span>&#123;<br>    <span class="hljs-comment">// 逻辑...</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 install 里我们可以拿到 Vue 那么和 Vue 相关的周边工作都可以考虑放在 Vue.use() 方法里，接下来我们使用一下Vue.use来开发一个自定义Loading,Toast和Dialog组合方法。</p><h2 id="注册一个全局Loading-Toast和Dialog组合方法"><a href="#注册一个全局Loading-Toast和Dialog组合方法" class="headerlink" title="注册一个全局Loading,Toast和Dialog组合方法"></a>注册一个全局Loading,Toast和Dialog组合方法</h2><p>/common/components/Loading.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;dialog&quot;</span> v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;loading&quot;</span> v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;type == 1&quot;</span>&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;loading-container&quot;</span>&gt;<br>                &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;loading-box&quot;</span>&gt;&lt;/div&gt;<br>                &lt;p <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;loading-text&quot;</span>&gt;&#123;&#123;dialogStr&#125;&#125;&lt;/p&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;toast&quot;</span> v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;type == 2&quot;</span>&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;toast-box&quot;</span>&gt;<br>                &lt;p&gt;&#123;&#123;dialogStr&#125;&#125;&lt;/p&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>        &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;alert-dialog&quot;</span> @touchmove.prevent v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;type == 3&quot;</span>&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;dialog-bg&quot;</span>&gt;&lt;/div&gt;<br>            &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;alert-container&quot;</span>&gt;<br>                &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;alert-title&quot;</span> v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;dialogTitle&quot;</span>&gt;&#123;&#123;dialogTitle&#125;&#125;&lt;/div&gt;<br>                &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;alert-text&quot;</span>&gt;&#123;&#123;dialogStr&#125;&#125;&lt;/div&gt;<br>                &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;alert-btns&quot;</span>&gt;<br>                    &lt;button type=<span class="hljs-string">&quot;button&quot;</span> @click=<span class="hljs-string">&quot;show=false;cancelFn()&quot;</span> v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;cancelBtnStr&quot;</span>&gt;&#123;&#123;cancelBtnStr&#125;&#125;&lt;/button&gt;<br>                    &lt;button type=<span class="hljs-string">&quot;button&quot;</span> @click=<span class="hljs-string">&quot;show=false;okFn()&quot;</span> v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;okBtnStr&quot;</span>&gt;&#123;&#123;okBtnStr&#125;&#125;&lt;/button&gt;<br>                &lt;/div&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;style lang=<span class="hljs-string">&quot;scss&quot;</span> scoped&gt;<br>.dialog &#123;<br>    position: fixed;<br>    top:<span class="hljs-number">0</span>;<br>    left:<span class="hljs-number">0</span>;<br>    width:<span class="hljs-number">100</span>%;<br>    height:<span class="hljs-number">100</span>%;<br>    background-color: rgba(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    z-index: <span class="hljs-number">100</span>;<br>&#125;<br>.loading &#123;<br>    width: <span class="hljs-number">100</span>%;<br>    height: <span class="hljs-number">100</span>%;<br>    .loading-container &#123;<br>        min-height: <span class="hljs-number">0.</span>8rem;<br>        min-width: <span class="hljs-number">0.</span>8rem;<br>        padding: <span class="hljs-number">0.</span>1rem;<br>        position: absolute;<br>        left: <span class="hljs-number">50</span>%;<br>        top: <span class="hljs-number">50</span>%;<br>        transform: translate(-<span class="hljs-number">50</span>%, -<span class="hljs-number">50</span>%);<br>        background: rgba(<span class="hljs-number">18</span>, <span class="hljs-number">18</span>, <span class="hljs-number">18</span>, <span class="hljs-number">0.7</span>);<br>        color: #fff;<br>        border-radius: 5px;<br>        display: flex;<br>        flex-direction: column;<br>        align-items: center;<br>        justify-content: center;<br>        z-index: <span class="hljs-number">999</span>;<br>        .loading-box &#123;<br>            background: transparent<br>                url(<span class="hljs-string">&quot;data:image/svg+xml;charset=utf8, %3Csvg xmlns=&#x27;http://www.w3.org/2000/svg&#x27; width=&#x27;120&#x27; height=&#x27;120&#x27; viewBox=&#x27;0 0 100 100&#x27;%3E%3Cpath fill=&#x27;none&#x27; d=&#x27;M0 0h100v100H0z&#x27;/%3E%3Crect width=&#x27;7&#x27; height=&#x27;20&#x27; x=&#x27;46.5&#x27; y=&#x27;40&#x27; fill=&#x27;%23E9E9E9&#x27; rx=&#x27;5&#x27; ry=&#x27;5&#x27; transform=&#x27;translate(0 -30)&#x27;/%3E%3Crect width=&#x27;7&#x27; height=&#x27;20&#x27; x=&#x27;46.5&#x27; y=&#x27;40&#x27; fill=&#x27;%23989697&#x27; rx=&#x27;5&#x27; ry=&#x27;5&#x27; transform=&#x27;rotate(30 105.98 65)&#x27;/%3E%3Crect width=&#x27;7&#x27; height=&#x27;20&#x27; x=&#x27;46.5&#x27; y=&#x27;40&#x27; fill=&#x27;%239B999A&#x27; rx=&#x27;5&#x27; ry=&#x27;5&#x27; transform=&#x27;rotate(60 75.98 65)&#x27;/%3E%3Crect width=&#x27;7&#x27; height=&#x27;20&#x27; x=&#x27;46.5&#x27; y=&#x27;40&#x27; fill=&#x27;%23A3A1A2&#x27; rx=&#x27;5&#x27; ry=&#x27;5&#x27; transform=&#x27;rotate(90 65 65)&#x27;/%3E%3Crect width=&#x27;7&#x27; height=&#x27;20&#x27; x=&#x27;46.5&#x27; y=&#x27;40&#x27; fill=&#x27;%23ABA9AA&#x27; rx=&#x27;5&#x27; ry=&#x27;5&#x27; transform=&#x27;rotate(120 58.66 65)&#x27;/%3E%3Crect width=&#x27;7&#x27; height=&#x27;20&#x27; x=&#x27;46.5&#x27; y=&#x27;40&#x27; fill=&#x27;%23B2B2B2&#x27; rx=&#x27;5&#x27; ry=&#x27;5&#x27; transform=&#x27;rotate(150 54.02 65)&#x27;/%3E%3Crect width=&#x27;7&#x27; height=&#x27;20&#x27; x=&#x27;46.5&#x27; y=&#x27;40&#x27; fill=&#x27;%23BAB8B9&#x27; rx=&#x27;5&#x27; ry=&#x27;5&#x27; transform=&#x27;rotate(180 50 65)&#x27;/%3E%3Crect width=&#x27;7&#x27; height=&#x27;20&#x27; x=&#x27;46.5&#x27; y=&#x27;40&#x27; fill=&#x27;%23C2C0C1&#x27; rx=&#x27;5&#x27; ry=&#x27;5&#x27; transform=&#x27;rotate(-150 45.98 65)&#x27;/%3E%3Crect width=&#x27;7&#x27; height=&#x27;20&#x27; x=&#x27;46.5&#x27; y=&#x27;40&#x27; fill=&#x27;%23CBCBCB&#x27; rx=&#x27;5&#x27; ry=&#x27;5&#x27; transform=&#x27;rotate(-120 41.34 65)&#x27;/%3E%3Crect width=&#x27;7&#x27; height=&#x27;20&#x27; x=&#x27;46.5&#x27; y=&#x27;40&#x27; fill=&#x27;%23D2D2D2&#x27; rx=&#x27;5&#x27; ry=&#x27;5&#x27; transform=&#x27;rotate(-90 35 65)&#x27;/%3E%3Crect width=&#x27;7&#x27; height=&#x27;20&#x27; x=&#x27;46.5&#x27; y=&#x27;40&#x27; fill=&#x27;%23DADADA&#x27; rx=&#x27;5&#x27; ry=&#x27;5&#x27; transform=&#x27;rotate(-60 24.02 65)&#x27;/%3E%3Crect width=&#x27;7&#x27; height=&#x27;20&#x27; x=&#x27;46.5&#x27; y=&#x27;40&#x27; fill=&#x27;%23E2E2E2&#x27; rx=&#x27;5&#x27; ry=&#x27;5&#x27; transform=&#x27;rotate(-30 -5.98 65)&#x27;/%3E%3C/svg%3E&quot;</span>)<br>                no-repeat;<br>            margin: <span class="hljs-number">0</span> auto;<br>            width: <span class="hljs-number">0.</span>4rem;<br>            height: <span class="hljs-number">0.</span>4rem;<br>            animation: e 1s steps(<span class="hljs-number">12</span>) infinite;<br>            background-size: contain;<br>        &#125;<br>        .loading-text &#123;<br>            font-size: <span class="hljs-number">0.</span>14rem;<br>            text-align: center;<br>        &#125;<br>    &#125;<br>&#125;<br>.toast &#123;<br>    position: absolute;<br>    bottom: <span class="hljs-number">0.</span>6rem;<br>    font-size: <span class="hljs-number">0.</span>16rem;<br>    left: <span class="hljs-number">50</span>%;<br>    transform: translate(-<span class="hljs-number">50</span>%);<br>    z-index: <span class="hljs-number">999</span>;<br>    .toast-box &#123;<br>        padding: <span class="hljs-number">0.</span>1rem;<br>        background-color: rgba(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.6</span>);<br>        border-radius: <span class="hljs-number">0.</span>05rem;<br>        word-<span class="hljs-keyword">break</span>: <span class="hljs-keyword">break</span>-word;<br>        color: #fff;<br>    &#125;<br>&#125;<br>.alert-dialog &#123;<br>    width: <span class="hljs-number">100</span>%;<br>    height: <span class="hljs-number">100</span>%;<br>    .dialog-bg &#123;<br>        position: absolute;<br>        width: <span class="hljs-number">100</span>%;<br>        height: <span class="hljs-number">100</span>%;<br>        background-color: rgba(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.6</span>);<br>    &#125;<br>    .alert-container &#123;<br>        position: absolute;<br>        min-width: <span class="hljs-number">70</span>%;<br>        min-height: <span class="hljs-number">0.</span>5rem;<br>        left: <span class="hljs-number">50</span>%;<br>        top: <span class="hljs-number">50</span>%;<br>        transform: translate(-<span class="hljs-number">50</span>%, -<span class="hljs-number">50</span>%);<br>        background-color: #fff;<br>        z-index: <span class="hljs-number">999</span>;<br>        border-radius: 5px;<br>        overflow: hidden;<br>        .alert-title &#123;<br>            font-size: <span class="hljs-number">0.</span>15rem;<br>            text-align: left;<br>            font-weight: <span class="hljs-number">400</span>;<br>            padding: <span class="hljs-number">0.</span>1rem <span class="hljs-number">0.</span>15rem <span class="hljs-number">0</span>;<br>        &#125;<br>        .alert-text &#123;<br>            font-size: <span class="hljs-number">0.</span>14rem;<br>            text-align: left;<br>            padding: <span class="hljs-number">0.</span>2rem <span class="hljs-number">0.</span>05rem <span class="hljs-number">0.</span>2rem <span class="hljs-number">0.</span>2rem;<br>            max-height: 3rem;<br>            overflow: auto;<br>            color: #999;<br>        &#125;<br>        .alert-btns &#123;<br>            width: <span class="hljs-number">100</span>%;<br>            display: flex;<br>            border-top: 1px solid #d5d5d6;<br>            button &#123;<br>                flex: <span class="hljs-number">1</span>;<br>                border: none;<br>                height: <span class="hljs-number">0.</span>4rem;<br>                font-size: <span class="hljs-number">0.</span>14rem;<br>                background-color: #fff;<br>                &amp;:first-child &#123;<br>                    border-right: 1px solid #d5d5d6;<br>                &#125;<br>                &amp;:nth-<span class="hljs-function"><span class="hljs-title">child</span>(<span class="hljs-params"><span class="hljs-number">2</span></span>)</span> &#123;<br>                    color: #2aa4f1;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>@keyframes e &#123;<br>    <span class="hljs-number">0</span>% &#123;<br>        transform: rotate(0deg);<br>    &#125;<br>    to &#123;<br>        transform: rotate(1turn);<br>    &#125;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>/common/utils/loading.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Description: 动态的loading和toast和dialog弹框组件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> Dialog <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/common/Dialog.vue&#x27;</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;注册toast组件&#125;</span> </span>Vue对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">registryToast</span>(<span class="hljs-params">Vue</span>) </span>&#123;<br>    <span class="hljs-comment">// 将组件注册到 vue 的 原型链里去,</span><br>    <span class="hljs-comment">// 这样就可以在所有 vue 的实例里面使用 this.$toast()</span><br>    Vue.prototype.$toast = showToast;<br>    Vue.prototype.$loading = showLoading;<br>    Vue.prototype.$dialog = showDialog;<br>    <span class="hljs-keyword">const</span> DialogConstructor = Vue.extend(Dialog);<br>    <span class="hljs-keyword">let</span> loadingDom = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">let</span> dialogDom = <span class="hljs-literal">null</span>; <span class="hljs-comment">//弹框调用状态</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * loading框显示或隐藏</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;状态位&#125;</span> </span>flag </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;提示文本&#125;</span> </span>dialogStr </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showLoading</span>(<span class="hljs-params">flag, dialogStr</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (!loadingDom) &#123;<br>            <span class="hljs-comment">// 实例化一个 toast.vue</span><br>            loadingDom = <span class="hljs-keyword">new</span> DialogConstructor(&#123;<br>                el: <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>),<br>                <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>                    <span class="hljs-keyword">return</span> &#123;<br>                        type: <span class="hljs-number">1</span>,<br>                        show: flag,<br>                        dialogStr: dialogStr || <span class="hljs-string">&#x27;加载中&#x27;</span><br>                    &#125;;<br>                &#125;<br>            &#125;);<br>            <span class="hljs-comment">// 把 实例化的 toast.vue 添加到 body 里</span><br>            <span class="hljs-built_in">document</span>.body.appendChild(loadingDom.$el);<br>        &#125;<br>        loadingDom.show = flag;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 显示toast弹框</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;toast弹框文本串&#125;</span> </span>dialogStr </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showToast</span>(<span class="hljs-params">dialogStr, time</span>) </span>&#123;<br>        <span class="hljs-comment">// 实例化一个 toast.vue</span><br>        <span class="hljs-keyword">const</span> toastDom = <span class="hljs-keyword">new</span> DialogConstructor(&#123;<br>            el: <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>),<br>            <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>                <span class="hljs-keyword">return</span> &#123;<br>                    dialogStr: dialogStr,<br>                    type: <span class="hljs-number">2</span>,<br>                    show: <span class="hljs-literal">true</span><br>                &#125;;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// 把 实例化的 toast.vue 添加到 body 里</span><br>        <span class="hljs-built_in">document</span>.body.appendChild(toastDom.$el);<br>        <span class="hljs-comment">// 过了 duration 时间后隐藏</span><br>        <span class="hljs-keyword">let</span> timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            toastDom.show = <span class="hljs-literal">false</span>;<br>            <span class="hljs-built_in">clearTimeout</span>(timer);<br>        &#125;, time || <span class="hljs-number">1800</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 基础的dialog框</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param <span class="hljs-type">&#123;弹框参数&#125;</span> </span>options </span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showDialog</span>(<span class="hljs-params">options</span>) </span>&#123;<br>        <span class="hljs-keyword">let</span> defaultOptions = &#123;<br>            show: <span class="hljs-literal">true</span>, <span class="hljs-comment">//是否显示</span><br>            type: <span class="hljs-number">3</span>, <span class="hljs-comment">//类型</span><br>            dialogStr: <span class="hljs-string">&#x27;提示内容&#x27;</span>, <span class="hljs-comment">//弹框内容</span><br>            dialogTitle: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">//标题</span><br>            okBtnStr: <span class="hljs-string">&#x27;确定&#x27;</span>, <span class="hljs-comment">//确定按钮文本</span><br>            cancelBtnStr: <span class="hljs-string">&#x27;取消&#x27;</span>, <span class="hljs-comment">//取消按钮文本</span><br>            okFn: <span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-comment">//确定点击回调事件</span><br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;你点击了确定按钮&#x27;</span>);<br>            &#125;,<br>            cancelFn: <span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-comment">//取消点击回调事件</span><br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;你点击了取消按钮&#x27;</span>);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-built_in">Object</span>.assign(defaultOptions, options);<br>        <span class="hljs-keyword">if</span> (!dialogDom) &#123;<br>            dialogDom = <span class="hljs-keyword">new</span> DialogConstructor(&#123;<br>                el: <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>),<br>                <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>                    <span class="hljs-keyword">return</span> defaultOptions;<br>                &#125;<br>            &#125;);<br>            <span class="hljs-built_in">document</span>.body.appendChild(dialogDom.$el);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">Object</span>.assign(dialogDom, options);<br>        &#125;<br>        dialogDom.show = <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> registryToast;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue默认图片设置</title>
    <link href="/2020/09/13/Vue%E9%BB%98%E8%AE%A4%E5%9B%BE%E7%89%87%E8%AE%BE%E7%BD%AE/"/>
    <url>/2020/09/13/Vue%E9%BB%98%E8%AE%A4%E5%9B%BE%E7%89%87%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>在项目中经常会遇到一个关于图片的问题：如何设置默认图片？真实场景：获取某个区的一级医院列表，当从后端接口拿到数据后，里面每个医院对象里面都会有一个hospitalPicture字段，该字段可能有值可能无值，又可能是有效值或无效值，如何在不影响页面显示上配置好默认图片？</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>从后端接口取得图片地址，如果有图片地址，则正常显示该图片地址，反之，则显示默认图片地址；其次，虽然有图片地址，但是该地址报错即获取不到，也显示默认图片。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-keyword">import</span> defaultImg <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@assets/image/hospitalOrder/icon_hospital.png&#x27;</span>;<br>    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-keyword">return</span> &#123;<br>                defaultImg : <span class="hljs-string">`this.src=&quot;<span class="hljs-subst">$&#123;defaultImg&#125;</span>&quot;`</span><br>            &#125;;<br>        &#125;,<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>template</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;hospital-img&quot;</span>&gt;<br>      &lt;img :src=<span class="hljs-string">&quot;hospitalPicture ? hospitalPicture : &#x27;&#x27;&quot;</span> :onerror=<span class="hljs-string">&quot;defaultImg&quot;</span>/&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p><b>备注</b>：由于工程是vue的前端工程，就需要引入图片，而不能直接使用图片的路径，直接使用路径图片将不会渲染。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>当hospitalPicture为空时，src 为空，此时会执行  :onerror=”defaultImg”；而且，当获取hospitalPicture地址报错时，此时也会执行  :onerror=”defaultImg”。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue数据双向绑定实现原理</title>
    <link href="/2020/09/12/Vue%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <url>/2020/09/12/Vue%E6%95%B0%E6%8D%AE%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>Vue数据双向绑定（即数据响应式），是利用了Object.defineProperty()这个方法重新定义了对象获取属性值get和设置属性值set的操作来实现的。</p><h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;title&gt;vue knowledge&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&quot;school.name&quot;</span>&gt;<br>        &lt;div&gt;&#123;&#123;school.name&#125;&#125;&lt;/div&gt;<br>        &lt;div&gt;&#123;&#123;school.age&#125;&#125;&lt;/div&gt;<br>    &lt;/div&gt;<br>    &lt;script src=<span class="hljs-string">&quot;./mvvm.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script&gt;<br>        <span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> Mvvm(&#123;<br>            el : <span class="hljs-string">&#x27;#app&#x27;</span>,<br>            data : &#123;<br>                school : &#123;<br>                    age :<span class="hljs-number">18</span>,<br>                    name : <span class="hljs-string">&#x27;vanlus&#x27;</span><br>                &#125;<br>            &#125;<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="mvvm-js"><a href="#mvvm-js" class="headerlink" title="mvvm.js"></a>mvvm.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 基类 调度</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mvvm</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">options</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.$el = options.el;<br>        <span class="hljs-built_in">this</span>.$data = options.data;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.$el)&#123;<br>            <span class="hljs-comment">// 把数据 全部转化用Object.definedProperty来定义</span><br>            <span class="hljs-keyword">new</span> Observer(<span class="hljs-built_in">this</span>.$data);<br><br>            <span class="hljs-keyword">new</span> Compiler(<span class="hljs-built_in">this</span>.$el,<span class="hljs-built_in">this</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 编译（用于将基类中的数据渲染到视图中）</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Compiler</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">el,vm</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.vm = vm;<br>        <span class="hljs-comment">// 判断el属性是不是一个元素，如果不是元素，那就获取他</span><br>        <span class="hljs-built_in">this</span>.el = <span class="hljs-built_in">this</span>.isElementNode(el)?el:<span class="hljs-built_in">document</span>.querySelector(el);<br><br>        <span class="hljs-comment">// 把当前节点中的元素获取到放在内存中</span><br>        <span class="hljs-keyword">let</span> fragment = <span class="hljs-built_in">this</span>.node2fragment(<span class="hljs-built_in">this</span>.el);<br><br>        <span class="hljs-comment">// 把内存节点中的内容(变量)进行替换</span><br>        <span class="hljs-built_in">this</span>.compile(fragment);<br>        <span class="hljs-comment">// 把内存节点再塞到页面中</span><br>        <span class="hljs-built_in">this</span>.el.appendChild(fragment);<br>    &#125;<br>    <span class="hljs-comment">// 判断时候是元素节点</span><br>    <span class="hljs-function"><span class="hljs-title">isElementNode</span>(<span class="hljs-params">node</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> node.nodeType == <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 把节点移动到内存中</span><br>    <span class="hljs-function"><span class="hljs-title">node2fragment</span>(<span class="hljs-params">node</span>)</span>&#123;<br>        <span class="hljs-comment">// 创建一个文档碎片</span><br>        <span class="hljs-keyword">let</span> fragment = <span class="hljs-built_in">document</span>.createDocumentFragment();<br>        <span class="hljs-keyword">let</span> firstChild;<br>        <span class="hljs-comment">// 循环将node节点中的子元素一条一条地插到文档碎片中</span><br>        <span class="hljs-keyword">while</span>(firstChild = node.firstChild)&#123;<br>            <span class="hljs-comment">// appendChild具有移动性</span><br>            fragment.appendChild(firstChild);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> fragment;<br>    &#125;<br>    <span class="hljs-comment">// 用来编译内存中的dom节点</span><br>    <span class="hljs-function"><span class="hljs-title">compile</span>(<span class="hljs-params">node</span>)</span>&#123;<br>        <span class="hljs-keyword">let</span> childNodes = node.childNodes;<br>        [...childNodes].forEach(<span class="hljs-function"><span class="hljs-params">child</span>=&gt;</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.isElementNode(child))&#123;<br>                <span class="hljs-built_in">this</span>.compileElement(child);<br>                <span class="hljs-comment">// 如果是元素的话，需要把自己传进去，再去遍历子节点</span><br>                <span class="hljs-built_in">this</span>.compile(child);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">this</span>.compileText(child);<br>            &#125;<br>        &#125;)<br>    &#125;<br>    <span class="hljs-comment">// 编译元素的</span><br>    <span class="hljs-function"><span class="hljs-title">compileElement</span>(<span class="hljs-params">node</span>)</span>&#123;<br>        <span class="hljs-keyword">let</span> attributes = node.attributes;   <span class="hljs-comment">// 类数组</span><br>        [...attributes].forEach(<span class="hljs-function"><span class="hljs-params">attr</span>=&gt;</span>&#123;<br>            <span class="hljs-comment">// type=&quot;text&quot; v-model=&quot;school.name&quot;</span><br>            <span class="hljs-keyword">let</span> &#123;name,<span class="hljs-attr">value</span>:expr&#125; = attr;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.isDirective(name))&#123;<br>                <span class="hljs-keyword">let</span> [,directive] = name.split(<span class="hljs-string">&#x27;-&#x27;</span>);<br>                <span class="hljs-comment">// 需要调用不同的指令来处理</span><br>                CompileUtil[directive](node,expr,<span class="hljs-built_in">this</span>.vm);<br><br>            &#125;<br>        &#125;)<br>    &#125;<br>    <span class="hljs-comment">// 编译文本的，判断当前文本节点内容中是否包含&#123;&#123;&#125;&#125;</span><br>    <span class="hljs-function"><span class="hljs-title">compileText</span>(<span class="hljs-params">node</span>)</span>&#123;<br>        <span class="hljs-keyword">let</span> content = node.textContent;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/</span>.test(content))&#123;<br>            CompileUtil[<span class="hljs-string">&#x27;text&#x27;</span>](node,content,<span class="hljs-built_in">this</span>.vm);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 是否是指令，例如v-model</span><br>    <span class="hljs-function"><span class="hljs-title">isDirective</span>(<span class="hljs-params">attrName</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> attrName.startsWith(<span class="hljs-string">&#x27;v-&#x27;</span>);<br>    &#125;<br>&#125;<br><br>CompileUtil = &#123;<br>    <span class="hljs-function"><span class="hljs-title">setValue</span>(<span class="hljs-params">vm,expr,value</span>)</span>&#123;<br>        expr.split(<span class="hljs-string">&#x27;.&#x27;</span>).reduce(<span class="hljs-function">(<span class="hljs-params">data,current,index,arr</span>)=&gt;</span>&#123;<br>            <span class="hljs-keyword">if</span>(index == arr.length-<span class="hljs-number">1</span>)&#123;<br>                data[current] = value;<br>            &#125;<br>            <span class="hljs-keyword">return</span> data[current];<br>        &#125;,vm.$data)<br>    &#125;,<br>    <span class="hljs-comment">// node是节点 expr是表达式（school.name） vm是当前实例(vm.$data)</span><br>    <span class="hljs-function"><span class="hljs-title">model</span>(<span class="hljs-params">node,expr,vm</span>)</span>&#123;<br>        <span class="hljs-comment">// 给输入框加一个观察者，如果稍后数据更新了，会触发此方法，给输入框赋予新值</span><br>        <span class="hljs-keyword">new</span> Watcher(vm,expr,<span class="hljs-function">(<span class="hljs-params">newVal</span>)=&gt;</span>&#123;<br>            node.value = newVal;<br>        &#125;);<br>        node.addEventListener(<span class="hljs-string">&#x27;input&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span>&#123;<br>            <span class="hljs-keyword">let</span> value = e.target.value; <span class="hljs-comment">// 获取用户输入的内容</span><br>            <span class="hljs-built_in">this</span>.setValue(vm,expr,value);<br>        &#125;)<br>        <span class="hljs-comment">// 给输入框赋予value属性 node.value = xxx</span><br>        <span class="hljs-keyword">let</span> value = <span class="hljs-built_in">this</span>.getVal(vm,expr);<br>        node.value = value;<br>    &#125;,<br><br>    <span class="hljs-function"><span class="hljs-title">getContentValue</span>(<span class="hljs-params">vm,expr</span>)</span>&#123;<br>        <span class="hljs-comment">// 遍历表达式,将内容替换成一个新的完整的内容返还回去</span><br>        <span class="hljs-keyword">return</span> expr.replace(<span class="hljs-regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/g</span>,<span class="hljs-function">(<span class="hljs-params">...args</span>)=&gt;</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getVal(vm,args[<span class="hljs-number">1</span>]);<br>        &#125;)<br>    &#125;,<br><br>    <span class="hljs-function"><span class="hljs-title">text</span>(<span class="hljs-params">node,expr,vm</span>)</span>&#123;<br>        <span class="hljs-comment">// expr =&gt; &#123;&#123;a&#125;&#125; &#123;&#123;b&#125;&#125; &#123;&#123;c&#125;&#125;</span><br>        <span class="hljs-keyword">let</span> content = expr.replace(<span class="hljs-regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/g</span>,<span class="hljs-function">(<span class="hljs-params">...args</span>)=&gt;</span>&#123;<br>            <span class="hljs-comment">// 给表达式每个&#123;&#123;&#125;&#125;都加上观察者</span><br>            <span class="hljs-keyword">new</span> Watcher(vm,args[<span class="hljs-number">1</span>],<span class="hljs-function">()=&gt;</span>&#123;<br>                node.textContent = <span class="hljs-built_in">this</span>.getContentValue(vm,expr) <br>            &#125;)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getVal(vm,args[<span class="hljs-number">1</span>]);<br>        &#125;)<br>        node.textContent = content;<br>    &#125;,<br>    <span class="hljs-comment">// 给一个expr，就去vm中取到对应的值</span><br>    <span class="hljs-function"><span class="hljs-title">getVal</span>(<span class="hljs-params">vm,expr</span>)</span>&#123;<br>        <span class="hljs-comment">// &#x27;school.name&#x27; =&gt; [&#x27;school&#x27;,&#x27;name&#x27;]</span><br>        <span class="hljs-comment">// vm.$data[&#x27;school&#x27;][&#x27;name&#x27;]</span><br>        <span class="hljs-keyword">return</span> expr.split(<span class="hljs-string">&#x27;.&#x27;</span>).reduce(<span class="hljs-function">(<span class="hljs-params">data,current</span>)=&gt;</span>&#123;<br>            <span class="hljs-keyword">return</span> data[current];<br>        &#125;,vm.$data)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 实现数据劫持</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">data</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.observer(data);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">observer</span>(<span class="hljs-params">data</span>)</span>&#123;<br>        <span class="hljs-comment">// 如果是对象才观察</span><br>        <span class="hljs-keyword">if</span>(data &amp;&amp; <span class="hljs-keyword">typeof</span> data == <span class="hljs-string">&#x27;object&#x27;</span>)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> data)&#123;<br>                <span class="hljs-built_in">this</span>.defineReactive(data,key,data[key]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">defineReactive</span>(<span class="hljs-params">obj,key,value</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.observer(value);<br>        <span class="hljs-comment">// 给每一个属性都加上一个具有发布订阅功能</span><br>        <span class="hljs-keyword">let</span> dep = <span class="hljs-keyword">new</span> Dep();<br>        <span class="hljs-built_in">Object</span>.defineProperty(obj,key,&#123;<br>            <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-comment">// 创建watcher时，会取到对应的内容，并把watcher放到了全局上</span><br>                Dep.target &amp;&amp; dep.addSub(Dep.target);<br>                <span class="hljs-keyword">return</span> value<br>            &#125;,<br>            set:<span class="hljs-function">(<span class="hljs-params">newVal</span>)=&gt;</span>&#123;    <span class="hljs-comment">// &#123;school:&#123;name:&#x27;vanlus&#x27;&#125;&#125; =&gt; this.school=&#123;&#125; =&gt; &#123;school:&#123;&#125;&#125;</span><br>                <span class="hljs-keyword">if</span>(newVal != value)&#123;<br>                    <span class="hljs-built_in">this</span>.observer(newVal);<br>                    value = newVal;<br>                    dep.notify();<br>                &#125;<br>            &#125;<br>        &#125;)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 观察者（发布订阅）</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Watcher</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">vm,expr,cb</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.vm = vm;<br>        <span class="hljs-built_in">this</span>.expr = expr;<br>        <span class="hljs-built_in">this</span>.cb = cb;<br>        <span class="hljs-comment">// 默认先存放一个老值</span><br>        <span class="hljs-built_in">this</span>.oldValue = <span class="hljs-built_in">this</span>.get();<br>    &#125;<br>    <span class="hljs-comment">// 因为数据劫持，这里一取值就会调数据劫持中的get()方法</span><br>    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span>&#123;<br>        Dep.target = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-comment">// 取值，然后把观察者和数据关联起来</span><br>        <span class="hljs-keyword">let</span> value = CompileUtil.getVal(<span class="hljs-built_in">this</span>.vm,<span class="hljs-built_in">this</span>.expr);<br>        Dep.target = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    <span class="hljs-comment">// 更新操作，数据变化后，会调用观察者的update方法</span><br>    <span class="hljs-function"><span class="hljs-title">update</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">let</span> newVal = CompileUtil.getVal(<span class="hljs-built_in">this</span>.vm,<span class="hljs-built_in">this</span>.expr);<br>        <span class="hljs-keyword">if</span>(newVal != <span class="hljs-built_in">this</span>.oldValue)&#123;<br>            <span class="hljs-built_in">this</span>.cb(newVal);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dep</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.subs = []; <span class="hljs-comment">//存放所有的watcher</span><br>    &#125;<br>    <span class="hljs-comment">// 添加订阅</span><br>    <span class="hljs-function"><span class="hljs-title">addSub</span>(<span class="hljs-params">watcher</span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.subs.push(watcher);<br>    &#125;<br>    <span class="hljs-comment">// 发布</span><br>    <span class="hljs-function"><span class="hljs-title">notify</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.subs.forEach(<span class="hljs-function"><span class="hljs-params">watcher</span>=&gt;</span>watcher.update());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
